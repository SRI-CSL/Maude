
/*  A Bison parser, made from surface.yy
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	FILE_NAME_STRING	257
#define	UNINTERPRETED_STRING	258
#define	LATEX_STRING	259
#define	KW_FMOD	260
#define	KW_MOD	261
#define	KW_OMOD	262
#define	KW_PARSE	263
#define	KW_NORMALIZE	264
#define	KW_REDUCE	265
#define	KW_REWRITE	266
#define	KW_LOOP	267
#define	KW_NARROW	268
#define	KW_MATCH	269
#define	KW_XMATCH	270
#define	KW_UNIFY	271
#define	KW_XUNIFY	272
#define	KW_EREWRITE	273
#define	KW_FREWRITE	274
#define	KW_OREWRITE	275
#define	KW_CONTINUE	276
#define	KW_SEARCH	277
#define	KW_SET	278
#define	KW_SHOW	279
#define	KW_ON	280
#define	KW_OFF	281
#define	KW_TRACE	282
#define	KW_CONTEXT	283
#define	KW_WHOLE	284
#define	KW_SELECT	285
#define	KW_DESELECT	286
#define	KW_CONDITION	287
#define	KW_SUBSTITUTION	288
#define	KW_PRINT	289
#define	KW_GRAPH	290
#define	KW_MIXFIX	291
#define	KW_FLAT	292
#define	KW_WITH	293
#define	KW_PARENS	294
#define	KW_ALIASES	295
#define	KW_GC	296
#define	KW_TIME	297
#define	KW_STATS	298
#define	KW_TIMING	299
#define	KW_CMD	300
#define	KW_BREAKDOWN	301
#define	KW_BREAK	302
#define	KW_PATH	303
#define	KW_MODULE	304
#define	KW_MODULES	305
#define	KW_ALL	306
#define	KW_SORTS	307
#define	KW_OPS	308
#define	KW_VARS	309
#define	KW_MBS	310
#define	KW_EQS	311
#define	KW_RLS	312
#define	KW_SUMMARY	313
#define	KW_KINDS	314
#define	KW_ADVISE	315
#define	KW_VERBOSE	316
#define	KW_DO	317
#define	KW_CLEAR	318
#define	KW_INCLUDE	319
#define	KW_EXCLUDE	320
#define	KW_CONCEAL	321
#define	KW_REVEAL	322
#define	KW_COMPILE	323
#define	KW_COUNT	324
#define	KW_DEBUG	325
#define	KW_RESUME	326
#define	KW_ABORT	327
#define	KW_STEP	328
#define	KW_WHERE	329
#define	KW_CREDUCE	330
#define	KW_DUMP	331
#define	KW_PROFILE	332
#define	KW_NUMBER	333
#define	KW_RAT	334
#define	KW_COLOR	335
#define	SIMPLE_NUMBER	336
#define	KW_PWD	337
#define	KW_CD	338
#define	KW_PUSHD	339
#define	KW_POPD	340
#define	KW_LS	341
#define	KW_LOAD	342
#define	KW_QUIT	343
#define	KW_EOF	344
#define	KW_ENDFM	345
#define	KW_ENDM	346
#define	KW_ENDOM	347
#define	KW_IMPORT	348
#define	KW_SORT	349
#define	KW_SUBSORT	350
#define	KW_OP	351
#define	KW_MSGS	352
#define	KW_VAR	353
#define	KW_CLASS	354
#define	KW_SUBCLASS	355
#define	KW_MB	356
#define	KW_CMB	357
#define	KW_EQ	358
#define	KW_CEQ	359
#define	KW_RL	360
#define	KW_CRL	361
#define	KW_IS	362
#define	KW_ARROW	363
#define	KW_ARROW2	364
#define	KW_PARTIAL	365
#define	KW_IF	366
#define	KW_LABEL	367
#define	KW_TO	368
#define	KW_ASSOC	369
#define	KW_COMM	370
#define	KW_ID	371
#define	KW_IDEM	372
#define	KW_ITER	373
#define	KW_LEFT	374
#define	KW_RIGHT	375
#define	KW_PREC	376
#define	KW_GATHER	377
#define	KW_STRAT	378
#define	KW_POLY	379
#define	KW_MEMO	380
#define	KW_FROZEN	381
#define	KW_CTOR	382
#define	KW_LATEX	383
#define	KW_SPECIAL	384
#define	KW_CONFIG	385
#define	KW_OBJ	386
#define	KW_MSG	387
#define	KW_DITTO	388
#define	KW_FORMAT	389
#define	KW_ID_HOOK	390
#define	KW_OP_HOOK	391
#define	KW_TERM_HOOK	392
#define	KW_IN	393
#define	IDENTIFIER	394
#define	NUMERIC_ID	395

#line 27 "surface.yy"

#include <string>
#include <stack>

//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "renaming.hh"
#include "moduleExpression.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
#include "preModule.hh"
#include "visibleModule.hh"  // HACK
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

#include "main.hh"
#define clear()		bubble.contractTo(0);
#define store(token)	bubble.append(token)
#define YYPARSE_PARAM	parseResult
#define PARSE_RESULT	(*((UserLevelRewritingContext::ParseResult*) parseResult))

#define CM		interpreter.getCurrentModule()

void lexerInitialMode();
void lexerIdMode();
void lexerCmdMode();
void lexerFileNameMode();
void lexerStringMode();
void lexerLatexMode();
bool handleEof();
bool includeFile(const string& directory, const string& fileName, bool silent, int lineNr);
void eatComment(bool firstNonWhite);

Vector<Token> bubble;
Vector<Token> moduleExpr;
stack<ModuleExpression*> moduleExpressions;
Renaming* currentRenaming = 0;

Int64 number;
Int64 number2;

static void yyerror(char *s);

void cleanUpModuleExpression();
void cleanUpParser();

#line 88 "surface.yy"
typedef union
{
  bool yyBool;
  Int64 yyInt64;
  const char* yyString;
  Token yyToken;
} YYSTYPE;
#line 96 "surface.yy"

int yylex(YYSTYPE* lvalp);
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1045
#define	YYFLAG		-32768
#define	YYNTBASE	154

#define YYTRANSLATE(x) ((unsigned)(x) <= 395 ? yytranslate[x] : 395)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   115,
   116,   126,   125,   121,     2,   117,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   113,     2,   118,
   114,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   119,     2,   120,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,   122,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   123,   124,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     5,     7,     9,    10,    14,    15,    19,
    21,    22,    26,    27,    31,    33,    34,    38,    40,    42,
    44,    48,    52,    56,    57,    62,    66,    68,    73,    78,
    85,    86,    90,    91,    96,   101,   102,   105,   106,   108,
   109,   114,   115,   119,   120,   125,   129,   130,   133,   135,
   138,   139,   145,   146,   152,   153,   159,   160,   161,   169,
   170,   171,   179,   180,   181,   189,   191,   193,   195,   197,
   199,   201,   203,   205,   207,   209,   211,   213,   216,   217,
   220,   221,   224,   225,   229,   230,   235,   236,   237,   246,
   250,   254,   260,   261,   262,   270,   271,   272,   273,   284,
   285,   286,   294,   295,   296,   297,   308,   311,   313,   314,
   315,   323,   324,   325,   326,   337,   339,   343,   347,   348,
   354,   355,   356,   365,   367,   370,   372,   376,   380,   383,
   385,   386,   390,   391,   396,   399,   401,   403,   404,   409,
   416,   418,   420,   423,   424,   426,   427,   432,   436,   438,
   442,   443,   446,   448,   450,   453,   456,   458,   460,   461,
   465,   467,   469,   472,   473,   479,   480,   486,   487,   493,
   494,   500,   502,   504,   506,   507,   513,   515,   517,   519,
   520,   526,   531,   533,   536,   538,   541,   543,   546,   547,
   554,   555,   562,   563,   570,   573,   574,   577,   578,   579,
   585,   588,   589,   590,   596,   599,   600,   601,   607,   610,
   611,   612,   618,   621,   622,   623,   629,   632,   633,   634,
   640,   643,   644,   645,   651,   654,   655,   657,   660,   662,
   663,   668,   669,   675,   678,   681,   683,   685,   688,   690,
   692,   694,   696,   697,   702,   704,   706,   708,   710,   712,
   714,   716,   718,   720,   722,   724,   726,   728,   730,   732,
   734,   736,   738,   740,   742,   744,   746,   748,   750,   752,
   754,   756,   758,   760,   762,   764,   766,   768,   770,   772,
   774,   776,   778,   780,   782,   784,   786,   788,   790,   792,
   794,   796,   798,   800,   802,   804,   806,   808,   810,   812,
   814,   816,   818,   820,   822,   824,   826,   828,   830,   832,
   834,   836,   838,   840,   842,   844,   846,   848,   850,   852,
   854,   856,   858,   860,   862,   864,   866,   868,   870,   872,
   874,   876,   878,   880,   882,   884,   886,   888,   890,   892,
   894,   896,   898,   900,   902,   904,   906,   908,   910,   912,
   914,   916,   918,   920,   922,   924,   926,   928,   930,   932,
   934,   936,   938,   940,   942,   944,   946,   948,   950,   952,
   954,   956,   958,   960,   962,   964,   966,   968,   970,   972,
   974,   976,   978,   980,   982,   984,   986,   988,   990,   992,
   994,   996,   998,  1000,  1002,  1004,  1006,  1008,  1010,  1012,
  1014,  1016,  1018,  1020,  1022,  1024,  1026,  1027,  1028,  1035,
  1036,  1037,  1044,  1045,  1049,  1050,  1054,  1055,  1060,  1061,
  1066,  1067,  1072,  1073,  1078,  1079,  1083,  1084,  1088,  1093,
  1094,  1098,  1099,  1104,  1105,  1111,  1112,  1118,  1119,  1125,
  1126,  1132,  1137,  1138,  1144,  1145,  1151,  1152,  1158,  1162,
  1163,  1169,  1170,  1176,  1177,  1183,  1184,  1190,  1191,  1197,
  1198,  1204,  1205,  1211,  1212,  1218,  1223,  1228,  1229,  1235,
  1241,  1247,  1254,  1260,  1266,  1273,  1279,  1285,  1291,  1297,
  1304,  1311,  1317,  1323,  1329,  1335,  1341,  1347,  1352,  1358,
  1364,  1370,  1376,  1382,  1388,  1394,  1400,  1405,  1406,  1407,
  1415,  1416,  1417,  1426,  1431,  1437,  1443,  1448,  1454,  1457,
  1460,  1463,  1466,  1472,  1477,  1478,  1482,  1484,  1486,  1488,
  1490,  1492,  1494,  1496,  1498,  1500,  1502,  1504,  1505,  1507,
  1508,  1509,  1514,  1515,  1520,  1521,  1522,  1529,  1531,  1532,
  1536,  1537,  1542,  1543,  1548,  1549,  1553,  1554,  1559,  1561,
  1562,  1566,  1567,  1572,  1574,  1575,  1579,  1580,  1585,  1586,
  1591,  1592,  1596,  1597,  1602,  1604,  1605,  1609,  1610,  1614,
  1615,  1620,  1622,  1623,  1627,  1628,  1633,  1635,  1636,  1640,
  1641,  1646,  1648,  1651,  1652,  1655,  1656,  1659,  1660,  1662,
  1664,  1666,  1668,  1670,  1672,  1674,  1676,  1677,  1682,  1684,
  1686,  1688,  1690,  1692,  1694,  1696,  1697,  1702,  1704,  1706,
  1708,  1710,  1712,  1714,  1715,  1720,  1722,  1724,  1726,  1728,
  1730,  1732,  1734,  1735,  1740,  1742,  1744,  1746,  1748,  1750,
  1752,  1753,  1758,  1760,  1762,  1764,  1766,  1768,  1770,  1771,
  1776,  1778,  1780,  1782,  1784,  1786,  1788,  1789,  1794,  1796,
  1798,  1800,  1802,  1804,  1805,  1810,  1813,  1815,  1817,  1818,
  1823,  1825,  1827,  1829,  1831,  1833,  1835
};

static const short yyrhs[] = {   155,
     0,     0,   183,     0,   156,     0,   296,     0,     0,   151,
   157,     3,     0,     0,    88,   158,     3,     0,    83,     0,
     0,    84,   159,     3,     0,     0,    85,   160,     3,     0,
    86,     0,     0,    87,   161,     4,     0,    89,     0,    90,
     0,   279,     0,   162,   125,   162,     0,   162,   126,   163,
     0,   115,   162,   116,     0,     0,   115,   164,   165,   116,
     0,   165,   121,   166,     0,   166,     0,    95,   279,   124,
   279,     0,   123,   290,   124,   290,     0,    97,   167,   170,
   124,   174,   177,     0,     0,   279,   168,   262,     0,     0,
   115,   169,   258,   116,     0,   113,   171,   234,   172,     0,
     0,   171,   172,     0,     0,   289,     0,     0,   119,   173,
   238,   120,     0,     0,   279,   175,   264,     0,     0,   115,
   176,   258,   116,     0,   119,   178,   120,     0,     0,   178,
   179,     0,   179,     0,   134,   152,     0,     0,   135,   115,
   180,   250,   116,     0,     0,   147,   115,   181,   250,   116,
     0,     0,   141,   115,   182,     5,   116,     0,     0,     0,
     6,   184,   279,   108,   185,   196,   190,     0,     0,     0,
     7,   186,   279,   108,   187,   197,   192,     0,     0,     0,
     8,   188,   279,   108,   189,   198,   194,     0,    91,     0,
   191,     0,    92,     0,    93,     0,    92,     0,   193,     0,
    91,     0,    93,     0,    93,     0,   195,     0,    91,     0,
    92,     0,   196,   199,     0,     0,   197,   213,     0,     0,
   198,   219,     0,     0,    94,   162,   117,     0,     0,    95,
   200,   257,   117,     0,     0,     0,    96,   279,   201,   256,
   118,   202,   257,   117,     0,    97,   227,   233,     0,    54,
   230,   233,     0,    99,   226,   113,   236,   117,     0,     0,
     0,   102,   203,   260,   113,   204,   272,   117,     0,     0,
     0,     0,   103,   205,   260,   113,   206,   270,   112,   207,
   272,   117,     0,     0,     0,   104,   208,   266,   114,   209,
   272,   117,     0,     0,     0,     0,   105,   210,   266,   114,
   211,   270,   112,   212,   272,   117,     0,     1,   117,     0,
   199,     0,     0,     0,   106,   214,   268,   110,   215,   272,
   117,     0,     0,     0,     0,   107,   216,   268,   110,   217,
   270,   112,   218,   272,   117,     0,   213,     0,   145,   227,
   233,     0,    98,   230,   233,     0,     0,   100,   279,   220,
   223,   117,     0,     0,     0,   101,   279,   221,   256,   118,
   222,   257,   117,     0,   122,     0,   122,   224,     0,   225,
     0,   224,   121,   225,     0,   280,   113,   279,     0,   226,
   285,     0,   285,     0,     0,   279,   228,   260,     0,     0,
   115,   229,   258,   116,     0,   230,   231,     0,   231,     0,
   285,     0,     0,   115,   232,   258,   116,     0,   113,   235,
   234,   236,   239,   117,     0,   109,     0,   111,     0,   235,
   236,     0,     0,   289,     0,     0,   119,   237,   238,   120,
     0,   238,   121,   289,     0,   289,     0,   119,   240,   120,
     0,     0,   240,   242,     0,   242,     0,   129,     0,   132,
   129,     0,   133,   129,     0,   127,     0,   128,     0,     0,
   241,   243,   276,     0,   130,     0,   131,     0,   134,   152,
     0,     0,   135,   115,   244,   250,   116,     0,     0,   147,
   115,   245,   250,   116,     0,     0,   136,   115,   246,   250,
   116,     0,     0,   137,   115,   247,   250,   116,     0,   138,
     0,   140,     0,   139,     0,     0,   139,   115,   248,   250,
   116,     0,   143,     0,   144,     0,   145,     0,     0,   141,
   115,   249,     5,   116,     0,   142,   115,   251,   116,     0,
   146,     0,   250,   152,     0,   152,     0,   251,   252,     0,
   252,     0,   148,   279,     0,     0,   148,   279,   115,   253,
   258,   116,     0,     0,   149,   279,   115,   254,   258,   116,
     0,     0,   150,   279,   115,   255,   258,   116,     0,   256,
   286,     0,     0,   257,   280,     0,     0,     0,   258,   115,
   259,   258,   116,     0,   258,   279,     0,     0,     0,   260,
   115,   261,   258,   116,     0,   260,   285,     0,     0,     0,
   262,   115,   263,   258,   116,     0,   262,   287,     0,     0,
     0,   264,   115,   265,   258,   116,     0,   264,   288,     0,
     0,     0,   266,   115,   267,   258,   116,     0,   266,   283,
     0,     0,     0,   268,   115,   269,   258,   116,     0,   268,
   282,     0,     0,     0,   270,   115,   271,   258,   116,     0,
   270,   284,     0,     0,   273,     0,   272,   117,     0,   117,
     0,     0,   115,   274,   258,   116,     0,     0,   272,   115,
   275,   258,   116,     0,   273,   291,     0,   272,   281,     0,
   280,     0,   277,     0,   276,   277,     0,   290,     0,   292,
     0,   293,     0,   117,     0,     0,   115,   278,   258,   116,
     0,   290,     0,   291,     0,   293,     0,   294,     0,   117,
     0,   290,     0,   291,     0,   293,     0,   294,     0,   290,
     0,   293,     0,   294,     0,   290,     0,   291,     0,   294,
     0,   117,     0,   118,     0,   113,     0,   109,     0,   111,
     0,   114,     0,   112,     0,   108,     0,   290,     0,   291,
     0,   294,     0,   117,     0,   118,     0,   113,     0,   109,
     0,   111,     0,   110,     0,   112,     0,   108,     0,   290,
     0,   291,     0,   294,     0,   117,     0,   118,     0,   113,
     0,   109,     0,   111,     0,   114,     0,   110,     0,   108,
     0,   290,     0,   291,     0,   294,     0,   117,     0,   118,
     0,   109,     0,   111,     0,   114,     0,   110,     0,   112,
     0,   108,     0,   290,     0,   291,     0,   294,     0,   117,
     0,   113,     0,   109,     0,   111,     0,   114,     0,   110,
     0,   112,     0,   108,     0,   152,     0,   121,     0,   122,
     0,   123,     0,   125,     0,   126,     0,   291,     0,   294,
     0,   117,     0,   118,     0,   109,     0,   111,     0,   114,
     0,   110,     0,   112,     0,   108,     0,   152,     0,   122,
     0,   123,     0,   124,     0,   125,     0,   126,     0,   291,
     0,   295,     0,   117,     0,   120,     0,   293,     0,   290,
     0,   291,     0,   295,     0,   114,     0,   110,     0,   112,
     0,   108,     0,   152,     0,   121,     0,   122,     0,   123,
     0,   124,     0,   125,     0,   126,     0,   145,     0,   292,
     0,    94,     0,    95,     0,    96,     0,    97,     0,    54,
     0,    99,     0,    98,     0,   100,     0,   101,     0,   102,
     0,   103,     0,   104,     0,   105,     0,   106,     0,   107,
     0,    91,     0,    92,     0,    93,     0,   118,     0,   113,
     0,   109,     0,   111,     0,   114,     0,   110,     0,   112,
     0,   108,     0,   119,     0,   120,     0,   295,     0,   127,
     0,   128,     0,   129,     0,   130,     0,   131,     0,   132,
     0,   133,     0,   134,     0,   135,     0,   136,     0,   137,
     0,   138,     0,   140,     0,   141,     0,   142,     0,   139,
     0,   143,     0,   144,     0,   146,     0,   147,     0,   148,
     0,   149,     0,   150,     0,     0,     0,    31,   297,   375,
   298,   373,   117,     0,     0,     0,    77,   299,   375,   300,
   373,   117,     0,     0,     9,   301,   339,     0,     0,    76,
   302,   339,     0,     0,   337,    11,   303,   339,     0,     0,
   337,    12,   304,   345,     0,     0,   337,    19,   305,   345,
     0,     0,   337,    20,   306,   355,     0,     0,    23,   307,
   345,     0,     0,   336,   308,   345,     0,   337,    22,   338,
   117,     0,     0,    13,   309,   339,     0,     0,   115,   310,
   372,   116,     0,     0,    28,   333,   311,   391,   117,     0,
     0,    28,   334,   312,   391,   117,     0,     0,    48,   333,
   313,   391,   117,     0,     0,    35,   335,   314,   391,   117,
     0,    63,    64,   138,   117,     0,     0,    25,     7,   315,
   373,   117,     0,     0,    25,    50,   316,   373,   117,     0,
     0,    25,    52,   317,   373,   117,     0,    25,    51,   117,
     0,     0,    25,    53,   318,   373,   117,     0,     0,    25,
    54,   319,   373,   117,     0,     0,    25,    55,   320,   373,
   117,     0,     0,    25,    56,   321,   373,   117,     0,     0,
    25,    57,   322,   373,   117,     0,     0,    25,    58,   323,
   373,   117,     0,     0,    25,    59,   324,   373,   117,     0,
     0,    25,    60,   325,   373,   117,     0,    25,    49,    82,
   117,     0,    25,    23,    36,   117,     0,     0,    25,    78,
   326,   373,   117,     0,    24,    25,    61,   332,   117,     0,
    24,    25,    44,   332,   117,     0,    24,    25,    13,    44,
   332,   117,     0,    24,    25,    45,   332,   117,     0,    24,
    25,    47,   332,   117,     0,    24,    25,    13,    45,   332,
   117,     0,    24,    25,    46,   332,   117,     0,    24,    25,
    42,   332,   117,     0,    24,    35,    37,   332,   117,     0,
    24,    35,    38,   332,   117,     0,    24,    35,    39,    41,
   332,   117,     0,    24,    35,    39,    40,   332,   117,     0,
    24,    35,    36,   332,   117,     0,    24,    35,    67,   332,
   117,     0,    24,    35,    79,   332,   117,     0,    24,    35,
    80,   332,   117,     0,    24,    35,    81,   332,   117,     0,
    24,    35,   147,   332,   117,     0,    24,    28,   332,   117,
     0,    24,    28,    33,   332,   117,     0,    24,    28,    29,
   332,   117,     0,    24,    28,    30,   332,   117,     0,    24,
    28,    34,   332,   117,     0,    24,    28,    31,   332,   117,
     0,    24,    28,    56,   332,   117,     0,    24,    28,    57,
   332,   117,     0,    24,    28,    58,   332,   117,     0,    24,
    48,   332,   117,     0,     0,     0,    24,    65,   327,   394,
   328,   332,   117,     0,     0,     0,    24,     8,    65,   329,
   394,   330,   332,   117,     0,    24,    62,   332,   117,     0,
    24,    64,   138,   332,   117,     0,    24,    69,    70,   332,
   117,     0,    24,    78,   332,   117,     0,    24,    64,    78,
   332,   117,     0,    72,   117,     0,    73,   117,     0,    74,
   117,     0,    75,   117,     0,    24,    42,    25,   332,   117,
     0,    24,    44,   332,   117,     0,     0,     1,   331,   117,
     0,    26,     0,    27,     0,    31,     0,    32,     0,    66,
     0,    65,     0,    67,     0,    68,     0,    16,     0,    15,
     0,    71,     0,     0,    82,     0,     0,     0,   151,   340,
   374,   342,     0,     0,   381,   341,   373,   117,     0,     0,
     0,   113,   343,   375,   344,   373,   117,     0,   117,     0,
     0,   119,   346,   349,     0,     0,   151,   347,   374,   342,
     0,     0,   383,   348,   373,   117,     0,     0,   153,   350,
   352,     0,     0,   385,   351,   373,   117,     0,   117,     0,
     0,   120,   353,   339,     0,     0,   387,   354,   373,   117,
     0,   117,     0,     0,   119,   356,   359,     0,     0,   151,
   357,   374,   342,     0,     0,   383,   358,   373,   117,     0,
     0,   153,   360,   362,     0,     0,   385,   361,   373,   117,
     0,   117,     0,     0,   120,   363,   339,     0,     0,   121,
   364,   366,     0,     0,   389,   365,   373,   117,     0,   117,
     0,     0,   153,   367,   369,     0,     0,   385,   368,   373,
   117,     0,   117,     0,     0,   120,   370,   339,     0,     0,
   387,   371,   373,   117,     0,   117,     0,   372,   375,     0,
     0,   373,   377,     0,     0,   374,   379,     0,     0,   152,
     0,   153,     0,   119,     0,   120,     0,   151,     0,   113,
     0,   117,     0,   121,     0,     0,   115,   376,   372,   116,
     0,   152,     0,   153,     0,   119,     0,   120,     0,   151,
     0,   113,     0,   121,     0,     0,   115,   378,   372,   116,
     0,   152,     0,   153,     0,   119,     0,   120,     0,   151,
     0,   121,     0,     0,   115,   380,   372,   116,     0,   152,
     0,   153,     0,   119,     0,   120,     0,   113,     0,   117,
     0,   121,     0,     0,   115,   382,   372,   116,     0,   152,
     0,   153,     0,   120,     0,   113,     0,   117,     0,   121,
     0,     0,   115,   384,   372,   116,     0,   152,     0,   119,
     0,   120,     0,   151,     0,   113,     0,   121,     0,     0,
   115,   386,   372,   116,     0,   152,     0,   153,     0,   119,
     0,   151,     0,   113,     0,   121,     0,     0,   115,   388,
   372,   116,     0,   152,     0,   153,     0,   119,     0,   151,
     0,   113,     0,     0,   115,   390,   372,   116,     0,   391,
   392,     0,   392,     0,   394,     0,     0,   115,   393,   372,
   116,     0,   152,     0,   153,     0,   119,     0,   120,     0,
   151,     0,   113,     0,   121,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   191,   192,   198,   199,   200,   206,   208,   216,   218,   226,
   230,   232,   241,   243,   252,   263,   265,   268,   273,   306,
   310,   318,   325,   328,   332,   335,   336,   339,   343,   347,
   350,   351,   352,   353,   356,   357,   360,   361,   364,   370,
   371,   377,   378,   379,   380,   383,   384,   387,   388,   391,
   392,   393,   394,   395,   396,   397,   403,   404,   410,   416,
   417,   423,   429,   430,   436,   444,   445,   452,   452,   455,
   456,   463,   463,   466,   467,   474,   474,   477,   478,   481,
   482,   485,   486,   489,   496,   497,   499,   500,   501,   503,
   505,   507,   509,   510,   511,   513,   514,   515,   516,   518,
   519,   520,   522,   523,   524,   525,   527,   538,   539,   540,
   541,   543,   544,   545,   546,   549,   550,   554,   558,   561,
   564,   565,   566,   569,   570,   573,   574,   577,   582,   583,
   586,   587,   588,   589,   592,   593,   596,   602,   603,   606,
   613,   614,   617,   618,   621,   627,   628,   634,   635,   638,
   639,   642,   643,   646,   650,   654,   660,   664,   668,   669,
   670,   674,   678,   679,   680,   681,   682,   683,   684,   685,
   686,   687,   691,   695,   700,   701,   702,   706,   710,   714,
   715,   716,   717,   723,   724,   727,   728,   731,   736,   737,
   741,   742,   746,   747,   756,   757,   760,   761,   767,   768,
   769,   770,   773,   774,   775,   776,   779,   780,   781,   782,
   785,   786,   787,   788,   791,   792,   793,   794,   797,   798,
   799,   800,   803,   804,   805,   806,   809,   810,   811,   814,
   815,   816,   817,   818,   819,   820,   826,   827,   830,   830,
   830,   830,   831,   832,   838,   838,   838,   838,   838,   841,
   841,   841,   841,   844,   844,   844,   847,   847,   847,   847,
   848,   848,   848,   848,   848,   848,   848,   850,   850,   850,
   850,   851,   851,   851,   851,   851,   851,   851,   853,   853,
   853,   853,   854,   854,   854,   854,   854,   854,   854,   856,
   856,   856,   856,   857,   857,   857,   857,   857,   857,   857,
   859,   859,   859,   859,   860,   860,   860,   860,   860,   860,
   860,   862,   862,   862,   862,   862,   862,   863,   863,   863,
   864,   864,   864,   864,   864,   864,   864,   866,   866,   866,
   866,   866,   866,   867,   867,   867,   867,   867,   870,   870,
   870,   870,   871,   871,   871,   877,   877,   877,   877,   877,
   877,   877,   880,   880,   883,   883,   883,   883,   883,   883,
   884,   884,   884,   885,   885,   885,   885,   885,   885,   886,
   886,   886,   889,   889,   889,   889,   889,   889,   889,   889,
   892,   892,   892,   895,   895,   895,   895,   895,   895,   895,
   896,   896,   896,   896,   896,   896,   897,   897,   897,   898,
   898,   898,   898,   899,   899,   899,   926,   927,   928,   933,
   934,   935,   941,   948,   954,   961,   967,   974,   980,   988,
   993,  1001,  1006,  1015,  1020,  1028,  1033,  1041,  1046,  1050,
  1057,  1062,  1063,  1071,  1072,  1077,  1078,  1083,  1084,  1089,
  1090,  1095,  1103,  1104,  1110,  1111,  1117,  1118,  1124,  1128,
  1129,  1135,  1136,  1142,  1143,  1149,  1150,  1156,  1157,  1163,
  1164,  1170,  1171,  1177,  1178,  1184,  1188,  1192,  1193,  1202,
  1206,  1210,  1214,  1218,  1222,  1226,  1230,  1234,  1238,  1242,
  1246,  1250,  1254,  1258,  1262,  1266,  1270,  1274,  1278,  1282,
  1286,  1290,  1294,  1298,  1302,  1306,  1310,  1314,  1315,  1316,
  1320,  1321,  1322,  1326,  1330,  1334,  1338,  1342,  1349,  1353,
  1357,  1361,  1368,  1372,  1379,  1381,  1386,  1387,  1390,  1391,
  1394,  1395,  1398,  1399,  1402,  1403,  1406,  1407,  1410,  1411,
  1419,  1420,  1421,  1422,  1425,  1426,  1427,  1428,  1437,  1439,
  1439,  1440,  1441,  1442,  1446,  1448,  1448,  1449,  1450,  1454,
  1460,  1460,  1461,  1462,  1471,  1473,  1473,  1474,  1475,  1476,
  1480,  1482,  1482,  1483,  1484,  1488,  1494,  1494,  1496,  1496,
  1497,  1498,  1502,  1504,  1504,  1505,  1506,  1510,  1517,  1517,
  1518,  1519,  1525,  1526,  1529,  1530,  1534,  1535,  1541,  1541,
  1541,  1541,  1541,  1541,  1541,  1541,  1542,  1543,  1546,  1546,
  1546,  1546,  1546,  1546,  1546,  1547,  1548,  1552,  1552,  1552,
  1552,  1552,  1552,  1553,  1554,  1557,  1557,  1557,  1557,  1557,
  1557,  1557,  1558,  1559,  1562,  1562,  1562,  1562,  1562,  1562,
  1563,  1564,  1568,  1568,  1568,  1568,  1568,  1568,  1569,  1570,
  1574,  1574,  1574,  1574,  1574,  1574,  1575,  1576,  1580,  1580,
  1580,  1580,  1580,  1581,  1582,  1588,  1589,  1592,  1598,  1599,
  1606,  1606,  1606,  1606,  1606,  1606,  1606
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","FILE_NAME_STRING",
"UNINTERPRETED_STRING","LATEX_STRING","KW_FMOD","KW_MOD","KW_OMOD","KW_PARSE",
"KW_NORMALIZE","KW_REDUCE","KW_REWRITE","KW_LOOP","KW_NARROW","KW_MATCH","KW_XMATCH",
"KW_UNIFY","KW_XUNIFY","KW_EREWRITE","KW_FREWRITE","KW_OREWRITE","KW_CONTINUE",
"KW_SEARCH","KW_SET","KW_SHOW","KW_ON","KW_OFF","KW_TRACE","KW_CONTEXT","KW_WHOLE",
"KW_SELECT","KW_DESELECT","KW_CONDITION","KW_SUBSTITUTION","KW_PRINT","KW_GRAPH",
"KW_MIXFIX","KW_FLAT","KW_WITH","KW_PARENS","KW_ALIASES","KW_GC","KW_TIME","KW_STATS",
"KW_TIMING","KW_CMD","KW_BREAKDOWN","KW_BREAK","KW_PATH","KW_MODULE","KW_MODULES",
"KW_ALL","KW_SORTS","KW_OPS","KW_VARS","KW_MBS","KW_EQS","KW_RLS","KW_SUMMARY",
"KW_KINDS","KW_ADVISE","KW_VERBOSE","KW_DO","KW_CLEAR","KW_INCLUDE","KW_EXCLUDE",
"KW_CONCEAL","KW_REVEAL","KW_COMPILE","KW_COUNT","KW_DEBUG","KW_RESUME","KW_ABORT",
"KW_STEP","KW_WHERE","KW_CREDUCE","KW_DUMP","KW_PROFILE","KW_NUMBER","KW_RAT",
"KW_COLOR","SIMPLE_NUMBER","KW_PWD","KW_CD","KW_PUSHD","KW_POPD","KW_LS","KW_LOAD",
"KW_QUIT","KW_EOF","KW_ENDFM","KW_ENDM","KW_ENDOM","KW_IMPORT","KW_SORT","KW_SUBSORT",
"KW_OP","KW_MSGS","KW_VAR","KW_CLASS","KW_SUBCLASS","KW_MB","KW_CMB","KW_EQ",
"KW_CEQ","KW_RL","KW_CRL","KW_IS","KW_ARROW","KW_ARROW2","KW_PARTIAL","KW_IF",
"':'","'='","'('","')'","'.'","'<'","'['","']'","','","'|'","KW_LABEL","KW_TO",
"'+'","'*'","KW_ASSOC","KW_COMM","KW_ID","KW_IDEM","KW_ITER","KW_LEFT","KW_RIGHT",
"KW_PREC","KW_GATHER","KW_STRAT","KW_POLY","KW_MEMO","KW_FROZEN","KW_CTOR","KW_LATEX",
"KW_SPECIAL","KW_CONFIG","KW_OBJ","KW_MSG","KW_DITTO","KW_FORMAT","KW_ID_HOOK",
"KW_OP_HOOK","KW_TERM_HOOK","KW_IN","IDENTIFIER","NUMERIC_ID","top","item","directive",
"@1","@2","@3","@4","@5","moduleExpr","renaming","@6","mappingList","mapping",
"fromOpName","@7","@8","fromSpec","fromTypeList","fromType","@9","toOpName",
"@10","@11","toAttributes","toAttributeList","toAttribute","@12","@13","@14",
"module","@15","@16","@17","@18","@19","@20","endfm","notEndfm","endm","notEndm",
"endom","notEndom","fDecList","decList","oDecList","fDeclaration","@21","@22",
"@23","@24","@25","@26","@27","@28","@29","@30","@31","@32","@33","declaration",
"@34","@35","@36","@37","@38","oDeclaration","@39","@40","@41","classDef","cPairList",
"cPair","varNameList","opName","@42","@43","opNameList","simpleOpName","@44",
"domainRangeAttr","arrow","typeList","type","@45","sortTokens","attributes",
"attributeList","idKeyword","attribute","@46","@47","@48","@49","@50","@51",
"@52","idList","hookList","hook","@53","@54","@55","listBarLt","listBarDot",
"tokens","@56","tokensBarColon","@57","tokensBarColonTo","@58","tokensBarCommaLeft",
"@59","tokensBarEqual","@60","tokensBarArrow2","@61","tokensBarIf","@62","endTokens",
"noTrailingDot","@63","@64","identity","identityChunk","@65","token","tokenBarDot",
"endToken","tokenBarArrow2","tokenBarEqual","tokenBarIf","tokenBarColon","tokenBarLt",
"tokenBarColonTo","tokenBarCommaLeft","sortToken","identifier","startKeyword",
"startKeyword2","midKeyword","attrKeyword","attrKeyword2","command","@66","@67",
"@68","@69","@70","@71","@72","@73","@74","@75","@76","@77","@78","@79","@80",
"@81","@82","@83","@84","@85","@86","@87","@88","@89","@90","@91","@92","@93",
"@94","@95","@96","@97","@98","@99","@100","polarity","select","exclude","conceal",
"match","optDebug","optNumber","moduleAndTerm","@101","@102","inEnd","@103",
"@104","numberModuleTerm","@105","@106","@107","numberModuleTerm1","@108","@109",
"numberModuleTerm2","@110","@111","numbersModuleTerm","@112","@113","@114","numbersModuleTerm1",
"@115","@116","numbersModuleTerm2","@117","@118","@119","numbersModuleTerm3",
"@120","@121","numbersModuleTerm4","@122","@123","cTokens","cTokensBarDot","cTokensBarDotColon",
"cToken","@124","cTokenBarDot","@125","cTokenBarDotColon","@126","cTokenBarIn",
"@127","cTokenBarLeftIn","@128","cTokenBarDotNumber","@129","cTokenBarDotRight",
"@130","cTokenBarDotCommaRight","@131","cOpNameList","cSimpleOpName","@132",
"cSimpleTokenBarDot", NULL
};
#endif

static const short yyr1[] = {     0,
   154,   154,   155,   155,   155,   157,   156,   158,   156,   156,
   159,   156,   160,   156,   156,   161,   156,   156,   156,   162,
   162,   162,   162,   164,   163,   165,   165,   166,   166,   166,
   168,   167,   169,   167,   170,   170,   171,   171,   172,   173,
   172,   175,   174,   176,   174,   177,   177,   178,   178,   179,
   180,   179,   181,   179,   182,   179,   184,   185,   183,   186,
   187,   183,   188,   189,   183,   190,   190,   191,   191,   192,
   192,   193,   193,   194,   194,   195,   195,   196,   196,   197,
   197,   198,   198,   199,   200,   199,   201,   202,   199,   199,
   199,   199,   203,   204,   199,   205,   206,   207,   199,   208,
   209,   199,   210,   211,   212,   199,   199,   213,   214,   215,
   213,   216,   217,   218,   213,   219,   219,   219,   220,   219,
   221,   222,   219,   223,   223,   224,   224,   225,   226,   226,
   228,   227,   229,   227,   230,   230,   231,   232,   231,   233,
   234,   234,   235,   235,   236,   237,   236,   238,   238,   239,
   239,   240,   240,   241,   241,   241,   242,   242,   243,   242,
   242,   242,   242,   244,   242,   245,   242,   246,   242,   247,
   242,   242,   242,   242,   248,   242,   242,   242,   242,   249,
   242,   242,   242,   250,   250,   251,   251,   252,   253,   252,
   254,   252,   255,   252,   256,   256,   257,   257,   259,   258,
   258,   258,   261,   260,   260,   260,   263,   262,   262,   262,
   265,   264,   264,   264,   267,   266,   266,   266,   269,   268,
   268,   268,   271,   270,   270,   270,   272,   272,   272,   274,
   273,   275,   273,   273,   273,   273,   276,   276,   277,   277,
   277,   277,   278,   277,   279,   279,   279,   279,   279,   280,
   280,   280,   280,   281,   281,   281,   282,   282,   282,   282,
   282,   282,   282,   282,   282,   282,   282,   283,   283,   283,
   283,   283,   283,   283,   283,   283,   283,   283,   284,   284,
   284,   284,   284,   284,   284,   284,   284,   284,   284,   285,
   285,   285,   285,   285,   285,   285,   285,   285,   285,   285,
   286,   286,   286,   286,   286,   286,   286,   286,   286,   286,
   286,   287,   287,   287,   287,   287,   287,   287,   287,   287,
   287,   287,   287,   287,   287,   287,   287,   288,   288,   288,
   288,   288,   288,   288,   288,   288,   288,   288,   289,   289,
   289,   289,   289,   289,   289,   290,   290,   290,   290,   290,
   290,   290,   291,   291,   292,   292,   292,   292,   292,   292,
   292,   292,   292,   292,   292,   292,   292,   292,   292,   292,
   292,   292,   293,   293,   293,   293,   293,   293,   293,   293,
   294,   294,   294,   295,   295,   295,   295,   295,   295,   295,
   295,   295,   295,   295,   295,   295,   295,   295,   295,   295,
   295,   295,   295,   295,   295,   295,   297,   298,   296,   299,
   300,   296,   301,   296,   302,   296,   303,   296,   304,   296,
   305,   296,   306,   296,   307,   296,   308,   296,   296,   309,
   296,   310,   296,   311,   296,   312,   296,   313,   296,   314,
   296,   296,   315,   296,   316,   296,   317,   296,   296,   318,
   296,   319,   296,   320,   296,   321,   296,   322,   296,   323,
   296,   324,   296,   325,   296,   296,   296,   326,   296,   296,
   296,   296,   296,   296,   296,   296,   296,   296,   296,   296,
   296,   296,   296,   296,   296,   296,   296,   296,   296,   296,
   296,   296,   296,   296,   296,   296,   296,   327,   328,   296,
   329,   330,   296,   296,   296,   296,   296,   296,   296,   296,
   296,   296,   296,   296,   331,   296,   332,   332,   333,   333,
   334,   334,   335,   335,   336,   336,   337,   337,   338,   338,
   340,   339,   341,   339,   343,   344,   342,   342,   346,   345,
   347,   345,   348,   345,   350,   349,   351,   349,   349,   353,
   352,   354,   352,   352,   356,   355,   357,   355,   358,   355,
   360,   359,   361,   359,   359,   363,   362,   364,   362,   365,
   362,   362,   367,   366,   368,   366,   366,   370,   369,   371,
   369,   369,   372,   372,   373,   373,   374,   374,   375,   375,
   375,   375,   375,   375,   375,   375,   376,   375,   377,   377,
   377,   377,   377,   377,   377,   378,   377,   379,   379,   379,
   379,   379,   379,   380,   379,   381,   381,   381,   381,   381,
   381,   381,   382,   381,   383,   383,   383,   383,   383,   383,
   384,   383,   385,   385,   385,   385,   385,   385,   386,   385,
   387,   387,   387,   387,   387,   387,   388,   387,   389,   389,
   389,   389,   389,   390,   389,   391,   391,   392,   393,   392,
   394,   394,   394,   394,   394,   394,   394
};

static const short yyr2[] = {     0,
     1,     0,     1,     1,     1,     0,     3,     0,     3,     1,
     0,     3,     0,     3,     1,     0,     3,     1,     1,     1,
     3,     3,     3,     0,     4,     3,     1,     4,     4,     6,
     0,     3,     0,     4,     4,     0,     2,     0,     1,     0,
     4,     0,     3,     0,     4,     3,     0,     2,     1,     2,
     0,     5,     0,     5,     0,     5,     0,     0,     7,     0,
     0,     7,     0,     0,     7,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     0,     2,
     0,     2,     0,     3,     0,     4,     0,     0,     8,     3,
     3,     5,     0,     0,     7,     0,     0,     0,    10,     0,
     0,     7,     0,     0,     0,    10,     2,     1,     0,     0,
     7,     0,     0,     0,    10,     1,     3,     3,     0,     5,
     0,     0,     8,     1,     2,     1,     3,     3,     2,     1,
     0,     3,     0,     4,     2,     1,     1,     0,     4,     6,
     1,     1,     2,     0,     1,     0,     4,     3,     1,     3,
     0,     2,     1,     1,     2,     2,     1,     1,     0,     3,
     1,     1,     2,     0,     5,     0,     5,     0,     5,     0,
     5,     1,     1,     1,     0,     5,     1,     1,     1,     0,
     5,     4,     1,     2,     1,     2,     1,     2,     0,     6,
     0,     6,     0,     6,     2,     0,     2,     0,     0,     5,
     2,     0,     0,     5,     2,     0,     0,     5,     2,     0,
     0,     5,     2,     0,     0,     5,     2,     0,     0,     5,
     2,     0,     0,     5,     2,     0,     1,     2,     1,     0,
     4,     0,     5,     2,     2,     1,     1,     2,     1,     1,
     1,     1,     0,     4,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     0,     0,     6,     0,
     0,     6,     0,     3,     0,     3,     0,     4,     0,     4,
     0,     4,     0,     4,     0,     3,     0,     3,     4,     0,
     3,     0,     4,     0,     5,     0,     5,     0,     5,     0,
     5,     4,     0,     5,     0,     5,     0,     5,     3,     0,
     5,     0,     5,     0,     5,     0,     5,     0,     5,     0,
     5,     0,     5,     0,     5,     4,     4,     0,     5,     5,
     5,     6,     5,     5,     6,     5,     5,     5,     5,     6,
     6,     5,     5,     5,     5,     5,     5,     4,     5,     5,
     5,     5,     5,     5,     5,     5,     4,     0,     0,     7,
     0,     0,     8,     4,     5,     5,     4,     5,     2,     2,
     2,     2,     5,     4,     0,     3,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     0,     1,     0,
     0,     4,     0,     4,     0,     0,     6,     1,     0,     3,
     0,     4,     0,     4,     0,     3,     0,     4,     1,     0,
     3,     0,     4,     1,     0,     3,     0,     4,     0,     4,
     0,     3,     0,     4,     1,     0,     3,     0,     3,     0,
     4,     1,     0,     3,     0,     4,     1,     0,     3,     0,
     4,     1,     2,     0,     2,     0,     2,     0,     1,     1,
     1,     1,     1,     1,     1,     1,     0,     4,     1,     1,
     1,     1,     1,     1,     1,     0,     4,     1,     1,     1,
     1,     1,     1,     0,     4,     1,     1,     1,     1,     1,
     1,     1,     0,     4,     1,     1,     1,     1,     1,     1,
     0,     4,     1,     1,     1,     1,     1,     1,     0,     4,
     1,     1,     1,     1,     1,     1,     0,     4,     1,     1,
     1,     1,     1,     0,     4,     2,     1,     1,     0,     4,
     1,     1,     1,     1,     1,     1,     1
};

static const short yydefact[] = {     0,
   515,    57,    60,    63,   413,   430,   526,   525,   425,     0,
     0,     0,   407,     0,     0,     0,   527,     0,     0,     0,
     0,   415,   410,    10,    11,    13,    15,    16,     8,    18,
    19,   432,     6,     1,     4,     3,     5,   427,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   498,     0,     0,   443,     0,
     0,   445,     0,   447,   450,   452,   454,   456,   458,   460,
   462,   464,   468,   519,   520,   522,   521,   434,   436,     0,
   523,   524,   440,   438,     0,   509,   510,   511,   512,     0,
     0,     0,     0,     0,     0,   584,     0,     0,   417,   419,
   421,   423,   530,   516,   359,   370,   371,   372,   355,   356,
   357,   358,   361,   360,   362,   363,   364,   365,   366,   367,
   368,   369,   380,   375,   378,   376,   379,   374,   377,   249,
   373,   381,   382,   347,   348,   349,   350,   351,   352,   384,
   385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
   395,   399,   396,   397,   398,   400,   401,   353,   402,   403,
   404,   405,   406,   346,     0,   245,   246,   354,   247,   248,
   383,     0,     0,   620,   623,   621,   618,   619,   622,   531,
   616,   617,   414,   533,   431,   628,   631,   629,   539,   627,
   630,   541,   625,   626,   426,   543,   501,     0,     0,     0,
     0,     0,     0,     0,   517,   518,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   586,     0,     0,   586,   449,   586,   586,
   586,   586,   586,   586,   586,   586,   586,   586,     0,     0,
   594,   597,   595,   591,   592,   596,   593,   589,   590,   408,
     0,     0,     0,   416,   411,    12,    14,    17,     9,     0,
     7,   428,     0,     0,     0,     0,   529,     0,    58,    61,
    64,   584,   588,   586,   584,     0,   588,   586,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   488,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   514,   497,   504,
     0,     0,   666,   663,   664,   667,   665,   661,   662,   499,
     0,   507,     0,   467,   466,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   659,     0,   657,   658,
     0,   584,   586,     0,     0,   442,   586,   433,   583,   418,
   420,   422,   555,   557,   424,   559,   429,    79,    81,    83,
     0,     0,     0,     0,   637,   639,   549,   634,   635,   638,
   636,   633,   545,   540,   547,     0,     0,   502,     0,     0,
   477,   471,   473,   476,   474,   470,   490,   491,   493,   489,
   492,   494,   495,   496,   482,   478,   479,     0,     0,   483,
   484,   485,   486,   487,   513,   508,   505,     0,   506,   604,
   606,   444,   601,   602,   605,   603,   599,   600,   585,   446,
   448,   451,   453,   455,   457,   459,   461,   463,   465,   469,
   584,   435,   656,   437,     0,     0,   441,   439,     0,     0,
   588,   586,     0,     0,     0,   624,   535,   614,   538,   610,
   611,   613,   612,   608,   609,   532,   587,   534,   632,   584,
     0,   586,   542,   544,     0,   472,   475,   481,   480,     0,
   584,     0,   598,   409,   412,   565,   561,   556,   563,     0,
     0,     0,     0,    66,    68,    69,     0,    85,     0,     0,
     0,    93,    96,   100,   103,    59,    67,    78,    72,    70,
    73,   109,   112,    62,    71,   108,    80,    76,    77,    74,
     0,     0,     0,     0,    65,    75,   116,    82,     0,   584,
     0,   645,   647,   554,   643,   550,   646,   644,   641,   642,
   546,   552,     0,     0,   500,     0,   660,     0,   586,   558,
   560,   107,   300,   295,   298,   296,   299,   297,   138,   293,
   294,     0,   136,   137,   290,   291,   292,     0,     0,    20,
   198,    87,   133,     0,   131,     0,   130,   206,   206,   218,
   218,   222,   222,     0,   119,   121,     0,   536,     0,   640,
   584,     0,   586,   548,   503,   607,   653,   654,   572,   651,
   566,   568,   652,   649,   650,   562,   570,     0,   202,   144,
   135,    91,     0,    84,     0,     0,     0,   196,   202,    90,
   206,     0,   129,     0,     0,     0,     0,     0,     0,   118,
     0,   196,   117,   586,   615,     0,   551,     0,   584,     0,
     0,   586,   564,     0,     0,    23,    21,    24,    22,    86,
   197,   250,   251,   252,   253,     0,     0,   132,   345,   343,
   344,   342,   146,     0,   145,   339,   340,   341,    94,   203,
   205,    97,   278,   274,   276,   275,   277,   273,   101,   215,
   271,   272,   217,   268,   269,   270,   104,   267,   263,   110,
   264,   266,   262,   265,   219,   260,   261,   221,   257,   258,
   259,   113,   124,     0,     0,     0,   648,   553,     0,   567,
   577,   573,   569,   575,     0,   199,   139,   201,   141,   142,
     0,   143,     0,   311,   306,   309,   307,   310,   305,   308,
   304,    88,   195,   301,   302,   303,   134,     0,    92,     0,
   202,   226,     0,   202,   226,     0,   202,   226,   125,   126,
     0,   120,   122,   537,   655,     0,   586,   571,   202,   151,
     0,     0,     0,     0,    27,   198,     0,   149,   230,   229,
     0,   227,   236,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   198,   582,   578,   574,   580,     0,     0,
     0,     0,     0,    33,    36,    31,     0,    25,     0,     0,
   147,     0,   202,   232,   228,   235,   254,   255,   256,   234,
   204,   289,   285,   288,   286,    98,   284,   287,   223,   282,
   283,   225,   279,   280,   281,   228,   216,   105,   228,   220,
   114,   127,   128,     0,     0,   586,   576,   200,   157,   158,
   154,   161,   162,     0,     0,     0,     0,     0,     0,   172,
   174,   173,     0,     0,   177,   178,   179,   183,     0,     0,
   159,   153,   140,     0,   202,    38,     0,   210,     0,    26,
    89,   148,     0,   202,     0,   202,     0,     0,   123,   579,
     0,   155,   156,   163,   164,   168,   170,   175,   180,     0,
   166,   150,   152,     0,    28,     0,     0,     0,    32,    29,
   231,     0,     0,     0,     0,     0,   581,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   187,     0,   243,   242,
   160,   237,   239,   240,   241,    34,    40,    37,     0,    39,
    44,    47,    42,   327,   322,   325,   323,   326,   324,   207,
   320,   321,   313,   314,   315,   316,   317,   312,   209,   318,
   319,   233,   228,   224,   228,   228,   185,     0,     0,     0,
     0,     0,   188,     0,     0,   182,   186,     0,   202,   238,
     0,    35,   202,     0,    30,   214,   202,   165,   184,   169,
   171,   176,   181,   189,   191,   193,   167,     0,     0,     0,
     0,     0,     0,     0,     0,    49,    43,     0,   202,   202,
   202,   244,    41,    45,    50,    51,    55,    53,    46,    48,
   211,   336,   337,   329,   330,   331,   332,   333,   328,   213,
   334,   338,   335,   208,     0,     0,     0,     0,     0,     0,
   202,   190,   192,   194,     0,     0,     0,     0,    52,    56,
    54,   212,     0,     0,     0
};

static const short yydefgoto[] = {  1043,
    34,    35,    97,    95,    92,    93,    94,   569,   649,   723,
   764,   765,   795,   868,   865,   867,   897,   928,   971,   932,
   976,   973,   975,   995,   996,  1028,  1030,  1029,    36,    41,
   368,    42,   369,    43,   370,   506,   507,   514,   515,   525,
   526,   453,   454,   455,   516,   571,   618,   766,   578,   740,
   579,   742,   875,   580,   743,   581,   745,   877,   517,   582,
   746,   583,   748,   878,   528,   631,   632,   784,   704,   749,
   750,   576,   574,   621,   619,   562,   563,   609,   612,   721,
   645,   664,   738,   767,   792,   860,   861,   862,   894,   908,
   918,   909,   910,   911,   912,   958,   916,   917,   999,  1000,
  1001,   656,   617,   644,   759,   624,   741,   899,   977,   997,
  1031,   626,   744,   628,   747,   775,   876,   771,   772,   803,
   874,   921,   922,   969,   718,   773,   806,   698,   683,   822,
   564,   733,   949,  1020,   665,   166,   167,   168,   169,   170,
   171,    37,    80,   353,    91,   357,    44,    90,   273,   274,
   275,   276,    46,    98,    45,    96,   249,   250,   262,   261,
   234,   237,   239,   240,   241,   242,   243,   244,   245,   246,
   247,   248,   231,   418,   289,   475,    40,   215,    78,    79,
    83,    38,    39,   278,   183,   283,   284,   466,   529,   634,
   195,   286,   287,   288,   384,   471,   472,   541,   592,   593,
   365,   450,   451,   452,   488,   548,   549,   606,   640,   641,
   642,   713,   756,   757,   787,   835,   836,   270,   333,   372,
   359,   352,   429,   481,   467,   530,   184,   282,   196,   285,
   385,   470,   542,   591,   607,   639,   348,   349,   441,   350
};

static const short yypact[] = {   932,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   293,
    22,   109,-32768,    -4,   130,   -29,-32768,   -70,    -9,    -1,
     2,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   175,     6,
  3739,  3739,  3739,   765,   765,  5154,     3,    85,   942,    58,
    88,   150,   150,   150,   -48,-32768,    78,   150,-32768,    92,
    54,-32768,    62,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  5163,
-32768,-32768,-32768,-32768,    74,-32768,-32768,-32768,-32768,   765,
  5163,   197,   214,   219,   222,-32768,   224,  5154,-32768,-32768,
-32768,-32768,   161,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   136,-32768,-32768,-32768,-32768,-32768,
-32768,   146,   148,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   190,   150,   150,
   150,   150,   150,   150,-32768,-32768,   150,   150,   150,   150,
   150,   150,   150,   150,   140,   150,   150,   150,   163,   150,
   150,   150,   150,   150,   150,   145,   147,   153,   150,   150,
   233,   150,   158,-32768,   165,   166,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   159,   159,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   159,   159,   168,-32768,-32768,-32768,-32768,-32768,-32768,   310,
-32768,-32768,   765,  5154,  5154,  5172,-32768,   169,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  5181,-32768,-32768,   233,   150,
   150,   170,   171,   173,   179,   182,   185,   188,   191,   196,
   198,   205,   206,   207,   212,-32768,   215,   216,   217,   150,
   150,   221,   223,   225,   226,   227,   232,-32768,-32768,-32768,
   234,   239,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   244,-32768,  5222,-32768,-32768,  5231,  5240,  5249,  5290,  5299,
  5308,  5317,  5358,  5367,  5376,  5385,-32768,  5426,-32768,-32768,
  5435,-32768,-32768,  5444,  5453,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   386,  5494,  5503,   460,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  5494,  5512,-32768,   248,   249,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   250,   252,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   150,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   583,  5521,-32768,-32768,  5562,  5571,
-32768,-32768,   156,   450,   805,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  5580,-32768,-32768,-32768,   150,-32768,-32768,-32768,-32768,   253,
-32768,   628,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  5494,
  5589,   256,  3801,-32768,-32768,-32768,  2809,-32768,  3739,  2871,
  4297,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  3801,  3739,  3739,  2871,-32768,-32768,-32768,-32768,  5163,-32768,
   637,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  5630,   257,-32768,   648,-32768,  5639,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  2933,-32768,-32768,-32768,-32768,-32768,  2809,    81,-32768,
-32768,-32768,-32768,   154,-32768,  3863,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  2933,-32768,-32768,   154,-32768,   695,-32768,
-32768,   765,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  5648,-32768,-32768,
-32768,-32768,    18,-32768,  2809,   151,  3925,-32768,-32768,-32768,
-32768,  4669,-32768,  2995,  3057,  3119,  3181,  3243,  3305,-32768,
   192,-32768,-32768,-32768,-32768,   709,-32768,  5657,-32768,   765,
  5698,-32768,-32768,  1160,  4545,-32768,   213,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  3987,  1257,  4049,-32768,-32768,
-32768,-32768,-32768,   258,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  4359,   259,  4111,  5707,-32768,-32768,   724,-32768,
-32768,-32768,-32768,-32768,  5716,-32768,-32768,-32768,-32768,-32768,
  4669,-32768,   -35,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  4793,-32768,  3367,
-32768,-32768,  3367,-32768,-32768,  3367,-32768,-32768,   152,-32768,
   218,-32768,-32768,-32768,-32768,  5725,-32768,-32768,-32768,   260,
  3739,  3429,   363,   -77,-32768,-32768,   116,-32768,-32768,-32768,
  4891,   937,-32768,  1354,  3491,  4936,  1451,  3553,  4981,  1548,
  3615,  4359,  3739,-32768,-32768,-32768,-32768,-32768,  5766,  1645,
  1186,   263,   265,-32768,   264,-32768,   266,-32768,   -35,  4173,
-32768,  4793,-32768,-32768,   969,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   995,-32768,-32768,  1024,-32768,
-32768,-32768,-32768,  4235,   765,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   254,   262,   229,   267,   272,   278,-32768,
   280,-32768,   282,   283,-32768,-32768,-32768,-32768,   284,  1098,
-32768,-32768,-32768,  3739,-32768,-32768,   287,-32768,   363,-32768,
-32768,-32768,  1742,-32768,  3367,-32768,  3367,  3367,-32768,-32768,
  5775,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    66,
-32768,-32768,-32768,  4855,-32768,  1839,  4607,  3677,  4421,-32768,
-32768,  1936,  5026,  2033,  5071,  5116,-32768,   255,   255,   255,
   255,   399,  3739,  3739,  3739,    42,-32768,   255,-32768,-32768,
  4855,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  4731,-32768,
-32768,   289,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1050,-32768,  1079,  1105,-32768,   -82,   -67,   -66,
   -60,   290,   306,   313,   317,-32768,-32768,   -59,-32768,-32768,
  4793,-32768,-32768,   -30,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  2130,   120,  2227,
   285,   319,   320,   321,   157,-32768,  4483,  2324,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  2421,  2518,  2615,   255,   433,   255,
-32768,-32768,-32768,-32768,   -50,   324,   -49,  2712,-32768,-32768,
-32768,-32768,   441,   442,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -531,-32768,-32768,
-32768,  -356,-32768,-32768,-32768,-32768,-32768,  -484,-32768,-32768,
-32768,-32768,-32768,-32768,  -548,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    -5,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    -6,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -330,-32768,   -71,-32768,-32768,   -61,  -519,-32768,  -415,  -442,
-32768,  -622,-32768,  -514,-32768,-32768,-32768,  -396,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -857,-32768,  -450,-32768,-32768,
-32768,  -165,  -726,  -581,-32768,  -538,-32768,-32768,-32768,-32768,
-32768,  -110,-32768,  -111,-32768,  -633,-32768,  -710,-32768,-32768,
-32768,-32768,  -448,-32768,   -41,  -589,-32768,-32768,-32768,-32768,
  -469,-32768,-32768,-32768,  -733,  -212,  -475,  -788,  -558,   149,
  -603,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   416,   461,-32768,
-32768,-32768,-32768,-32768,   -42,-32768,-32768,  -364,-32768,-32768,
   -73,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -261,  -233,  -267,
   -64,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   199,-32768,
  -433,-32768,  -279,-32768,-32768,-32768,  -140,  -122,-32768,  -200
};


#define	YYLAST		5928


static const short yytable[] = {   165,
   172,   173,   185,   336,   768,   337,   338,   339,   340,   341,
   342,   343,   344,   345,   346,   260,   489,   566,   668,   386,
   371,   473,   722,   374,   272,   566,   265,   651,    59,   229,
   330,   577,   776,   978,    85,   779,   613,   657,   798,   800,
   625,   668,   611,   799,    60,   566,    86,   264,   980,   981,
   373,   959,   960,   961,   387,   982,   987,   834,   654,   761,
   968,   762,    81,    82,   611,  1039,  1041,   197,   872,   979,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,   658,   647,   979,   979,   566,   763,   388,   230,
   445,   979,   979,   216,   217,   218,   219,   198,   760,    73,
   566,   979,   979,   991,   992,   924,   623,    87,   566,   351,
   993,   778,   225,   751,   781,    88,   994,   668,    89,   446,
   354,   355,   104,   449,   220,   550,   199,   235,   200,   201,
   202,   203,   924,   646,   668,   236,   221,   222,   223,    74,
    75,   653,   615,   616,   654,   204,   667,   232,   566,   566,
   685,   685,   700,   700,   671,   671,   492,   966,   620,   774,
    74,    75,   777,   930,   903,   780,   905,   906,   630,   667,
  1035,   633,  1037,    76,    77,   205,   206,   790,   238,   482,
   735,   654,   566,   490,   654,    99,   100,   654,   671,   913,
   914,   915,   751,   101,   102,   930,   103,   614,   668,   266,
   361,   362,   310,   311,   224,   615,   616,   714,   531,   493,
   651,   263,   808,   913,   914,   915,   267,   808,   491,   546,
   808,   873,   268,   654,   269,   443,   271,   653,   443,   735,
   360,   443,   443,   290,   291,   801,   802,   768,   543,  1003,
   802,   654,   277,   279,   651,   667,   494,   495,   496,   497,
   498,   499,   500,   280,   501,   281,   306,   502,   503,   504,
   505,   318,   667,   319,   653,   648,   610,   653,   589,   320,
   653,   323,   782,   347,   332,   654,  1009,   324,   325,   326,
   565,   334,   335,   896,   356,   367,   391,   392,   565,   393,
   991,   992,   902,   668,   904,   394,   810,   993,   395,   824,
    47,   396,   824,   994,   397,   824,   653,   398,   565,   327,
   328,   329,   399,   703,   400,   608,   654,    48,   654,   654,
    49,   401,   402,   403,   653,   668,   667,    50,   404,   636,
   783,   405,   406,   407,    51,   925,    52,   410,   616,   411,
    53,   412,   413,   414,   808,   323,   808,   808,   415,   565,
   416,   324,   325,   326,    54,   417,    55,    56,   653,   638,
   419,    57,   925,   565,   476,   477,   478,   668,   479,   545,
    58,   565,   552,   595,   739,   752,   866,   709,   791,   863,
   884,   885,   882,   327,   328,   329,   886,   988,   864,   869,
   883,   990,   887,  1023,   888,   998,   889,   890,   891,   653,
   706,   653,   653,   962,   652,   983,   957,   974,   715,   666,
   898,   565,   565,   684,   684,   699,   699,  1025,  1026,  1027,
   984,   667,   251,   950,   252,   358,   253,   985,   254,   255,
   256,   986,   666,  1006,  1007,  1008,  1005,  1036,  1022,  1040,
  1044,  1045,   870,   734,   972,   565,  1010,   508,   527,  1038,
   492,   832,   587,   667,   929,   570,   989,   572,   575,   584,
   257,   258,   259,   893,   588,   967,   705,   226,   227,   228,
   627,   629,   970,   233,   366,    84,   788,     0,     0,     0,
   585,   586,   575,   134,   135,   136,   137,   138,   139,     0,
   652,     0,   734,     0,     0,   667,     0,     0,   251,     0,
   252,   456,   253,   493,   254,   255,   256,     0,   666,     0,
     0,     0,     0,     0,   164,     0,     0,     0,     0,     0,
     0,  1021,     0,   789,     0,   666,   570,   652,     0,     0,
   652,     0,     0,   652,     0,     0,   257,   258,   259,     0,
   509,   510,   511,   497,   498,   499,   500,     0,   501,   637,
   797,   502,   503,   504,   505,   512,   513,     0,   807,     0,
     0,     0,   823,   807,     0,   823,   807,     0,   823,   652,
     0,     0,   251,   570,   252,   469,   253,     0,   254,   255,
   256,     0,     0,     0,     0,     0,     0,   652,     0,   666,
     0,     0,     0,     0,     0,     0,     0,   710,     0,     0,
     0,     0,   881,     0,     0,     0,     0,     0,     0,     0,
   257,   258,   259,     0,   292,   293,   294,   295,   296,   297,
     0,   652,   298,   299,   300,   301,   302,   303,   304,   305,
     0,   307,   308,   309,     0,   312,   313,   314,   315,   316,
   317,   567,     0,     0,   321,   322,     0,   331,     0,   567,
     0,     0,     0,     0,     0,     0,   900,     0,     0,     0,
     0,     0,   652,     0,   652,   652,     0,     0,     0,   567,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   923,     0,     0,   666,     0,     0,     0,     0,     0,
   807,     0,   807,   807,     0,   251,     0,   252,   483,   253,
     0,   254,   255,   256,     0,   389,   390,     0,   923,     0,
   567,     0,     0,     0,     0,     0,   666,     0,     0,   793,
   796,     0,     0,     0,   567,   408,   409,     0,     0,     0,
     0,     0,   567,   257,   258,   259,     0,     0,     0,     0,
   251,   833,   252,   547,   253,     0,   254,   255,   256,   251,
     0,   252,   590,   253,     0,   254,   255,   256,   666,     0,
   251,     0,   252,   596,   253,   655,   254,   255,   256,     0,
     0,     0,   567,   567,   686,   686,   701,   701,   257,   258,
   259,     0,     0,     0,     0,     0,     0,   257,   258,   259,
     0,     0,   880,     0,     0,     0,     0,     0,   257,   258,
   259,     0,     0,     0,   736,   492,   567,   251,     0,   252,
   635,   253,     0,   254,   255,   256,     0,     0,     0,     0,
     0,   251,   895,   252,   707,   253,     0,   254,   255,   256,
     0,     0,     0,   480,     0,     0,   251,     0,   252,   755,
   253,     0,   254,   255,   256,   257,   258,   259,     0,     0,
     0,   655,     0,   736,     0,     0,   933,     0,   493,   257,
   258,   259,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   963,   964,   965,   257,   258,   259,   174,     0,   175,
     0,   176,     0,   177,   178,   179,     0,     0,   655,     0,
   544,   655,     0,     0,   655,   518,   519,   520,   497,   498,
   499,   500,   521,   501,   522,   523,   502,   503,   504,   505,
   512,   513,     0,     0,     0,   180,   181,   182,     0,   809,
     0,     0,     0,   825,   809,     0,   825,   809,     0,   825,
   655,    -2,     1,     0,     0,     0,     0,     2,     3,     4,
     5,     0,  -528,  -528,     6,     0,     7,     8,   655,   524,
  -528,  -528,     0,  -528,     9,    10,    11,     0,     0,    12,
     0,     0,    13,     0,     0,     0,    14,   205,   206,   -95,
   207,   208,   209,     0,   210,   211,     0,     0,     0,    15,
     0,     0,   655,     0,     0,     0,     0,     0,     0,     0,
   105,     0,     0,     0,    16,  -102,     0,   212,   213,   214,
     0,     0,    17,    18,    19,    20,    21,    22,    23,     0,
     0,     0,     0,     0,    24,    25,    26,    27,    28,    29,
    30,    31,   -95,   655,  -111,   655,   655,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,     0,     0,    32,   951,  -102,     0,
   -99,   809,     0,   809,   809,     0,     0,     0,     0,   -95,
   -95,   -95,   -95,   -95,   -95,   -95,   -95,   -95,   -95,   -95,
   -95,   -95,   -95,   -95,   -95,   -95,     0,  -111,     0,  -106,
     0,   158,    33,     0,     0,  -102,  -102,  -102,  -102,  -102,
  -102,  -102,  -102,  -102,  -102,  -102,  -102,  -102,  -102,  -102,
  -102,  -102,     0,   -99,     0,  -115,     0,     0,     0,     0,
     0,     0,     0,   -95,  -111,  -111,  -111,  -111,  -111,  -111,
  -111,  -111,  -111,  -111,  -111,  -111,  -111,  -111,  -111,  -111,
  -111,     0,  -106,     0,     0,     0,     0,     0,     0,  -102,
   -99,   -99,   -99,   -99,   -99,   -99,   -99,   -99,   -99,   -99,
   -99,   -99,   -99,   -99,   -99,   -99,   -99,     0,  -115,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  -111,  -106,
  -106,  -106,  -106,  -106,  -106,  -106,  -106,  -106,  -106,  -106,
  -106,  -106,  -106,  -106,  -106,  -106,     0,     0,     0,     0,
     0,     0,     0,     0,   -99,  -115,  -115,  -115,  -115,  -115,
  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,
  -115,  -115,     0,   105,     0,     0,     0,   892,     0,     0,
     0,     0,     0,  -106,   839,   840,   841,   842,   843,   844,
   845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
   855,   856,   857,   858,   859,     0,     0,     0,     0,  -115,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   716,   717,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   105,   164,   839,   840,   841,   842,   843,   844,   845,   846,
   847,   848,   849,   850,   851,   852,   853,   854,   855,   856,
   857,   858,   859,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   716,   737,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   105,   164,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   716,   811,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   105,   164,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   716,   827,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   105,   164,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   716,   830,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   105,   164,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   716,
   838,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   105,   164,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   716,   901,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   105,   164,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   716,   926,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   105,
   164,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   716,   952,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   105,   164,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   716,   954,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   105,   164,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   716,  1002,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   105,   164,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   716,  1004,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   105,   164,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   716,  1024,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   105,   164,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   716,  1032,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   105,   164,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   716,  1033,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   105,   164,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   716,
  1034,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   105,   164,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   716,  1042,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   105,   164,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   568,   105,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
   164,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   573,   105,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,     0,   164,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   553,   554,   555,   556,   557,   610,   558,   559,   105,   560,
   561,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,     0,   164,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   553,   554,   555,   556,   557,   669,   558,   670,
   105,   560,   561,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,     0,   164,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   553,   554,   555,   556,   557,   672,
   558,   670,   105,   560,   561,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,     0,   164,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   673,   674,   675,   676,
   677,   678,   679,   680,   105,   681,   682,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
   164,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   673,   674,
   675,   676,   677,   678,   687,   680,   105,   681,   682,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,     0,   164,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   688,   689,   690,   691,   692,   693,   694,   695,   105,   696,
   697,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,     0,   164,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   688,   689,   702,   691,   692,   693,   694,   695,
   105,   696,   697,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,     0,   164,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   769,   105,   770,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,     0,   164,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   794,   105,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
   164,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   812,   813,
   814,   815,   816,   817,   818,   819,   105,   820,   821,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,     0,   164,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   812,   813,   814,   815,   828,   817,   818,   819,   105,   820,
   821,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,     0,   164,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   812,   813,   814,   815,   831,   817,   818,   819,
   105,   820,   821,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,     0,   164,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   931,   105,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,     0,   164,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,     0,   105,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
   164,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   553,   554,
   555,   556,   557,     0,   558,   559,   105,   560,   561,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,     0,   164,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   553,   554,   555,   556,   557,   622,   558,     0,   105,   560,
   561,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,     0,   164,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,     0,
   105,   650,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,     0,   164,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   724,   725,   726,   727,   728,   729,
   730,     0,   105,   731,   732,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,     0,   164,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   553,   554,   555,   556,
   557,     0,   558,   670,   105,   560,   561,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
   164,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   724,   725,
   726,   727,   728,   729,   730,     0,   105,   731,   753,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,     0,   164,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,     0,   105,   871,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,     0,   164,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,     0,
   105,   879,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,     0,   164,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   553,   554,   555,   556,   557,     0,
   558,     0,   105,   560,   561,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,     0,   164,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,     0,   105,     0,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
   164,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   934,   935,
   936,   937,   938,     0,   939,   940,   105,   941,   942,   132,
   133,   943,   944,   945,     0,   946,   947,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,     0,   948,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,  1011,   105,  1012,
   131,     0,  1013,     0,  1014,  1015,  1016,  1017,  1018,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,     0,  1019,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   659,   719,   660,   720,   661,     0,   662,     0,
   105,     0,     0,   663,     0,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,     0,   164,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   659,   719,   660,   720,   661,     0,
   662,     0,   105,     0,     0,   927,     0,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,     0,   164,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   659,     0,   660,     0,
   661,     0,   662,     0,   105,     0,     0,   663,     0,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
   164,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   659,     0,
   660,     0,   661,     0,   662,     0,   105,     0,     0,   927,
     0,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,     0,   164,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   659,     0,   660,     0,   661,     0,   662,     0,   105,     0,
     0,     0,     0,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,     0,   164,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   919,
     0,   920,   131,     0,     0,   134,   135,   136,   137,   138,
   139,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   123,   124,
   125,   126,   127,   128,   129,   804,   164,   805,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,     0,   159,   160,   161,   162,
   163,     0,   164,   123,   124,   125,   126,   127,   128,   129,
   804,     0,   826,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     0,   159,   160,   161,   162,   163,     0,   164,   123,   124,
   125,   126,   127,   128,   129,   804,     0,   829,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,     0,   159,   160,   161,   162,
   163,     0,   164,   123,   124,   125,   126,   127,   128,   129,
   804,     0,   953,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     0,   159,   160,   161,   162,   163,     0,   164,   123,   124,
   125,   126,   127,   128,   129,   804,     0,   955,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,     0,   159,   160,   161,   162,
   163,     0,   164,   123,   124,   125,   126,   127,   128,   129,
   804,     0,   956,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     0,   159,   160,   161,   162,   163,   186,   164,   187,     0,
   188,     0,   189,   190,   191,   251,     0,   252,     0,   253,
     0,   254,   255,   256,   186,     0,   187,     0,   188,     0,
   363,   190,   191,   375,     0,   376,     0,   377,     0,   378,
   379,   380,     0,     0,   192,   193,   194,     0,     0,     0,
     0,     0,     0,   257,   258,   259,     0,     0,     0,     0,
     0,     0,   364,   193,   194,     0,     0,     0,     0,     0,
     0,   381,   382,   383,   420,     0,   421,     0,   422,     0,
   423,   424,   425,   420,     0,   421,     0,   430,     0,   423,
   424,   425,   420,     0,   421,     0,   431,     0,   423,   424,
   425,   420,     0,   421,     0,   432,     0,   423,   424,   425,
     0,     0,   426,   427,   428,     0,     0,     0,     0,     0,
     0,   426,   427,   428,     0,     0,     0,     0,     0,     0,
   426,   427,   428,     0,     0,     0,     0,     0,     0,   426,
   427,   428,   420,     0,   421,     0,   433,     0,   423,   424,
   425,   420,     0,   421,     0,   434,     0,   423,   424,   425,
   420,     0,   421,     0,   435,     0,   423,   424,   425,   420,
     0,   421,     0,   436,     0,   423,   424,   425,     0,     0,
   426,   427,   428,     0,     0,     0,     0,     0,     0,   426,
   427,   428,     0,     0,     0,     0,     0,     0,   426,   427,
   428,     0,     0,     0,     0,     0,     0,   426,   427,   428,
   420,     0,   421,     0,   437,     0,   423,   424,   425,   420,
     0,   421,     0,   438,     0,   423,   424,   425,   420,     0,
   421,     0,   439,     0,   423,   424,   425,   420,     0,   421,
     0,   440,     0,   423,   424,   425,     0,     0,   426,   427,
   428,     0,     0,     0,     0,     0,     0,   426,   427,   428,
     0,     0,     0,     0,     0,     0,   426,   427,   428,     0,
     0,     0,     0,     0,     0,   426,   427,   428,   323,     0,
   347,     0,   442,     0,   324,   325,   326,   323,     0,   347,
     0,   444,     0,   324,   325,   326,   323,     0,   347,     0,
   447,     0,   324,   325,   326,   323,     0,   347,     0,   448,
     0,   324,   325,   326,     0,     0,   327,   328,   329,     0,
     0,     0,     0,     0,     0,   327,   328,   329,     0,     0,
     0,     0,     0,     0,   327,   328,   329,     0,     0,     0,
     0,     0,     0,   327,   328,   329,   457,     0,   458,     0,
   459,     0,   460,   461,   462,   420,     0,   421,     0,   468,
     0,   423,   424,   425,   420,     0,   421,     0,   474,     0,
   423,   424,   425,   420,     0,   421,     0,   484,     0,   423,
   424,   425,     0,     0,   463,   464,   465,     0,     0,     0,
     0,     0,     0,   426,   427,   428,     0,     0,     0,     0,
     0,     0,   426,   427,   428,     0,     0,     0,     0,     0,
     0,   426,   427,   428,   420,     0,   421,     0,   485,     0,
   423,   424,   425,   375,     0,   376,     0,   486,     0,   378,
   379,   380,   532,     0,   533,     0,   534,     0,   535,   536,
   537,   420,     0,   421,     0,   551,     0,   423,   424,   425,
     0,     0,   426,   427,   428,     0,     0,     0,     0,     0,
     0,   381,   382,   487,     0,     0,     0,     0,     0,     0,
   538,   539,   540,     0,     0,     0,     0,     0,     0,   426,
   427,   428,   420,     0,   421,     0,   594,     0,   423,   424,
   425,   597,     0,   598,     0,   599,     0,   600,   601,   602,
   420,     0,   421,     0,   643,     0,   423,   424,   425,   420,
     0,   421,     0,   708,     0,   423,   424,   425,     0,     0,
   426,   427,   428,     0,     0,     0,     0,     0,     0,   603,
   604,   605,     0,     0,     0,     0,     0,     0,   426,   427,
   428,     0,     0,     0,     0,     0,     0,   426,   427,   428,
   375,     0,   376,     0,   711,     0,   378,   379,   380,   420,
     0,   421,     0,   754,     0,   423,   424,   425,   420,     0,
   421,     0,   758,     0,   423,   424,   425,   532,     0,   533,
     0,   785,     0,   535,   786,   537,     0,     0,   381,   382,
   712,     0,     0,     0,     0,     0,     0,   426,   427,   428,
     0,     0,     0,     0,     0,     0,   426,   427,   428,     0,
     0,     0,     0,     0,     0,   538,   539,   540,   420,     0,
   421,     0,   837,     0,   423,   424,   425,   420,     0,   421,
     0,   907,     0,   423,   424,   425,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   426,   427,   428,     0,
     0,     0,     0,     0,     0,   426,   427,   428
};

static const short yycheck[] = {    41,
    42,    43,    45,   237,   738,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,    80,   450,   493,   622,   287,
   282,   386,   645,   285,    98,   501,    91,   617,     7,    78,
   231,   501,   743,   116,    64,   746,   568,   619,   116,   766,
   579,   645,   562,   121,    23,   521,   117,    90,   116,   116,
   284,   909,   910,   911,   288,   116,   116,   784,   617,    95,
   918,    97,    67,    68,   584,   116,   116,    65,   802,   152,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,   621,   615,   152,   152,   562,   123,   289,   138,
   352,   152,   152,    36,    37,    38,    39,    13,   721,    78,
   576,   152,   152,   134,   135,   894,   576,   117,   584,   250,
   141,   745,    25,   703,   748,   117,   147,   721,   117,   353,
   261,   262,   117,   357,    67,   490,    42,    36,    44,    45,
    46,    47,   921,   116,   738,    82,    79,    80,    81,    31,
    32,   617,   125,   126,   703,    61,   622,    70,   624,   625,
   626,   627,   628,   629,   624,   625,     1,   116,   574,   741,
    31,    32,   744,   897,   875,   747,   877,   878,   584,   645,
  1028,   587,  1030,    65,    66,    26,    27,   759,   117,   441,
   656,   740,   658,   451,   743,    11,    12,   746,   658,   148,
   149,   150,   782,    19,    20,   929,    22,   117,   802,     3,
   274,   275,    40,    41,   147,   125,   126,   641,   470,    54,
   800,   138,   771,   148,   149,   150,     3,   776,   452,   481,
   779,   803,     4,   782,     3,   348,     3,   703,   351,   705,
   273,   354,   355,    44,    45,   120,   121,   971,   472,   120,
   121,   800,    82,   108,   834,   721,    91,    92,    93,    94,
    95,    96,    97,   108,    99,   108,   117,   102,   103,   104,
   105,   117,   738,   117,   740,   115,   113,   743,   530,   117,
   746,   113,   121,   115,   117,   834,   120,   119,   120,   121,
   493,   117,   117,   865,   117,   117,   117,   117,   501,   117,
   134,   135,   874,   897,   876,   117,   772,   141,   117,   775,
     8,   117,   778,   147,   117,   781,   782,   117,   521,   151,
   152,   153,   117,   122,   117,   549,   875,    25,   877,   878,
    28,   117,   117,   117,   800,   929,   802,    35,   117,   591,
   113,   117,   117,   117,    42,   894,    44,   117,   126,   117,
    48,   117,   117,   117,   903,   113,   905,   906,   117,   562,
   117,   119,   120,   121,    62,   117,    64,    65,   834,   593,
   117,    69,   921,   576,   117,   117,   117,   971,   117,   117,
    78,   584,   117,   117,   117,   117,   113,   639,   119,   117,
   152,   115,   129,   151,   152,   153,   115,   969,   124,   124,
   129,   973,   115,   997,   115,   977,   115,   115,   115,   875,
   634,   877,   878,     5,   617,   116,   152,   119,   642,   622,
   124,   624,   625,   626,   627,   628,   629,   999,  1000,  1001,
   115,   897,   113,   899,   115,   116,   117,   115,   119,   120,
   121,   115,   645,   115,   115,   115,   152,     5,   997,   116,
     0,     0,   799,   656,   929,   658,   995,   453,   455,  1031,
     1,   782,   524,   929,   897,   497,   971,   499,   500,   521,
   151,   152,   153,   860,   529,   916,   632,    52,    53,    54,
   581,   583,   921,    58,   276,    15,   756,    -1,    -1,    -1,
   522,   523,   524,   121,   122,   123,   124,   125,   126,    -1,
   703,    -1,   705,    -1,    -1,   971,    -1,    -1,   113,    -1,
   115,   116,   117,    54,   119,   120,   121,    -1,   721,    -1,
    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,
    -1,   997,    -1,   757,    -1,   738,   568,   740,    -1,    -1,
   743,    -1,    -1,   746,    -1,    -1,   151,   152,   153,    -1,
    91,    92,    93,    94,    95,    96,    97,    -1,    99,   592,
   763,   102,   103,   104,   105,   106,   107,    -1,   771,    -1,
    -1,    -1,   775,   776,    -1,   778,   779,    -1,   781,   782,
    -1,    -1,   113,   615,   115,   116,   117,    -1,   119,   120,
   121,    -1,    -1,    -1,    -1,    -1,    -1,   800,    -1,   802,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   640,    -1,    -1,
    -1,    -1,   836,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   151,   152,   153,    -1,   199,   200,   201,   202,   203,   204,
    -1,   834,   207,   208,   209,   210,   211,   212,   213,   214,
    -1,   216,   217,   218,    -1,   220,   221,   222,   223,   224,
   225,   493,    -1,    -1,   229,   230,    -1,   232,    -1,   501,
    -1,    -1,    -1,    -1,    -1,    -1,   869,    -1,    -1,    -1,
    -1,    -1,   875,    -1,   877,   878,    -1,    -1,    -1,   521,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   894,    -1,    -1,   897,    -1,    -1,    -1,    -1,    -1,
   903,    -1,   905,   906,    -1,   113,    -1,   115,   116,   117,
    -1,   119,   120,   121,    -1,   290,   291,    -1,   921,    -1,
   562,    -1,    -1,    -1,    -1,    -1,   929,    -1,    -1,   761,
   762,    -1,    -1,    -1,   576,   310,   311,    -1,    -1,    -1,
    -1,    -1,   584,   151,   152,   153,    -1,    -1,    -1,    -1,
   113,   783,   115,   116,   117,    -1,   119,   120,   121,   113,
    -1,   115,   116,   117,    -1,   119,   120,   121,   971,    -1,
   113,    -1,   115,   116,   117,   617,   119,   120,   121,    -1,
    -1,    -1,   624,   625,   626,   627,   628,   629,   151,   152,
   153,    -1,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
    -1,    -1,   835,    -1,    -1,    -1,    -1,    -1,   151,   152,
   153,    -1,    -1,    -1,   656,     1,   658,   113,    -1,   115,
   116,   117,    -1,   119,   120,   121,    -1,    -1,    -1,    -1,
    -1,   113,   864,   115,   116,   117,    -1,   119,   120,   121,
    -1,    -1,    -1,   418,    -1,    -1,   113,    -1,   115,   116,
   117,    -1,   119,   120,   121,   151,   152,   153,    -1,    -1,
    -1,   703,    -1,   705,    -1,    -1,   898,    -1,    54,   151,
   152,   153,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   913,   914,   915,   151,   152,   153,   113,    -1,   115,
    -1,   117,    -1,   119,   120,   121,    -1,    -1,   740,    -1,
   475,   743,    -1,    -1,   746,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,    -1,    -1,    -1,   151,   152,   153,    -1,   771,
    -1,    -1,    -1,   775,   776,    -1,   778,   779,    -1,   781,
   782,     0,     1,    -1,    -1,    -1,    -1,     6,     7,     8,
     9,    -1,    11,    12,    13,    -1,    15,    16,   800,   145,
    19,    20,    -1,    22,    23,    24,    25,    -1,    -1,    28,
    -1,    -1,    31,    -1,    -1,    -1,    35,    26,    27,     1,
    29,    30,    31,    -1,    33,    34,    -1,    -1,    -1,    48,
    -1,    -1,   834,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    54,    -1,    -1,    -1,    63,     1,    -1,    56,    57,    58,
    -1,    -1,    71,    72,    73,    74,    75,    76,    77,    -1,
    -1,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
    89,    90,    54,   875,     1,   877,   878,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,    -1,    -1,   115,   899,    54,    -1,
     1,   903,    -1,   905,   906,    -1,    -1,    -1,    -1,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,    -1,    54,    -1,     1,
    -1,   145,   151,    -1,    -1,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,    -1,    54,    -1,     1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   145,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,   145,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,    -1,    54,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   145,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,    -1,    54,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,   145,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,   145,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
    54,   152,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,    54,   152,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,    54,   152,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,    54,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,    54,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,    54,   152,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,    54,   152,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,    54,
   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,    54,   152,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,    54,   152,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
    54,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,    54,   152,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,    54,   152,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,    54,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,    54,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,    54,   152,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,    54,   152,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,    54,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,    -1,
   152,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,    54,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,    -1,   152,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,    54,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,    -1,   152,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
    54,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,    -1,   152,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,    54,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,    -1,   152,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,    54,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,    -1,
   152,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,    54,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,    -1,   152,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,    54,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,    -1,   152,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
    54,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,    -1,   152,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,    54,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,    -1,   152,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,    54,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,    -1,
   152,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,    54,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,    -1,   152,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,    54,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,    -1,   152,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
    54,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,    -1,   152,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,    54,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,    -1,   152,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,    -1,    54,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,    -1,
   152,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,    -1,   114,   115,    54,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,    -1,   152,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,    -1,    54,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,    -1,   152,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
    54,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,    -1,   152,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,    -1,    54,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,    -1,   152,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,    -1,   114,   115,    54,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,    -1,
   152,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,    -1,    54,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,    -1,   152,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,    -1,    54,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,    -1,   152,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
    54,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,    -1,   152,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
   114,    -1,    54,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,    -1,   152,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,    -1,    54,    -1,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,    -1,
   152,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,    -1,   114,   115,    54,   117,   118,   119,
   120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,    -1,   152,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,    54,   117,
   118,    -1,   120,    -1,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,    -1,   152,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
    54,    -1,    -1,   119,    -1,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,    -1,   152,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
   114,    -1,    54,    -1,    -1,   119,    -1,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,    -1,   152,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,    -1,   110,    -1,
   112,    -1,   114,    -1,    54,    -1,    -1,   119,    -1,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,    -1,
   152,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,    -1,
   110,    -1,   112,    -1,   114,    -1,    54,    -1,    -1,   119,
    -1,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,    -1,   152,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,    -1,   110,    -1,   112,    -1,   114,    -1,    54,    -1,
    -1,    -1,    -1,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,    -1,   152,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
    -1,   117,   118,    -1,    -1,   121,   122,   123,   124,   125,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,   109,
   110,   111,   112,   113,   114,   115,   152,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,    -1,   146,   147,   148,   149,
   150,    -1,   152,   108,   109,   110,   111,   112,   113,   114,
   115,    -1,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
    -1,   146,   147,   148,   149,   150,    -1,   152,   108,   109,
   110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,    -1,   146,   147,   148,   149,
   150,    -1,   152,   108,   109,   110,   111,   112,   113,   114,
   115,    -1,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
    -1,   146,   147,   148,   149,   150,    -1,   152,   108,   109,
   110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,    -1,   146,   147,   148,   149,
   150,    -1,   152,   108,   109,   110,   111,   112,   113,   114,
   115,    -1,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
    -1,   146,   147,   148,   149,   150,   113,   152,   115,    -1,
   117,    -1,   119,   120,   121,   113,    -1,   115,    -1,   117,
    -1,   119,   120,   121,   113,    -1,   115,    -1,   117,    -1,
   119,   120,   121,   113,    -1,   115,    -1,   117,    -1,   119,
   120,   121,    -1,    -1,   151,   152,   153,    -1,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,    -1,    -1,    -1,    -1,
    -1,    -1,   151,   152,   153,    -1,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   113,    -1,   115,    -1,   117,    -1,
   119,   120,   121,   113,    -1,   115,    -1,   117,    -1,   119,
   120,   121,   113,    -1,   115,    -1,   117,    -1,   119,   120,
   121,   113,    -1,   115,    -1,   117,    -1,   119,   120,   121,
    -1,    -1,   151,   152,   153,    -1,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,    -1,    -1,    -1,    -1,    -1,    -1,
   151,   152,   153,    -1,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   113,    -1,   115,    -1,   117,    -1,   119,   120,
   121,   113,    -1,   115,    -1,   117,    -1,   119,   120,   121,
   113,    -1,   115,    -1,   117,    -1,   119,   120,   121,   113,
    -1,   115,    -1,   117,    -1,   119,   120,   121,    -1,    -1,
   151,   152,   153,    -1,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,    -1,    -1,    -1,    -1,    -1,    -1,   151,   152,
   153,    -1,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   113,    -1,   115,    -1,   117,    -1,   119,   120,   121,   113,
    -1,   115,    -1,   117,    -1,   119,   120,   121,   113,    -1,
   115,    -1,   117,    -1,   119,   120,   121,   113,    -1,   115,
    -1,   117,    -1,   119,   120,   121,    -1,    -1,   151,   152,
   153,    -1,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
    -1,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,    -1,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   113,    -1,
   115,    -1,   117,    -1,   119,   120,   121,   113,    -1,   115,
    -1,   117,    -1,   119,   120,   121,   113,    -1,   115,    -1,
   117,    -1,   119,   120,   121,   113,    -1,   115,    -1,   117,
    -1,   119,   120,   121,    -1,    -1,   151,   152,   153,    -1,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,    -1,    -1,
    -1,    -1,    -1,    -1,   151,   152,   153,    -1,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,   113,    -1,   115,    -1,
   117,    -1,   119,   120,   121,   113,    -1,   115,    -1,   117,
    -1,   119,   120,   121,   113,    -1,   115,    -1,   117,    -1,
   119,   120,   121,   113,    -1,   115,    -1,   117,    -1,   119,
   120,   121,    -1,    -1,   151,   152,   153,    -1,    -1,    -1,
    -1,    -1,    -1,   151,   152,   153,    -1,    -1,    -1,    -1,
    -1,    -1,   151,   152,   153,    -1,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,   113,    -1,   115,    -1,   117,    -1,
   119,   120,   121,   113,    -1,   115,    -1,   117,    -1,   119,
   120,   121,   113,    -1,   115,    -1,   117,    -1,   119,   120,
   121,   113,    -1,   115,    -1,   117,    -1,   119,   120,   121,
    -1,    -1,   151,   152,   153,    -1,    -1,    -1,    -1,    -1,
    -1,   151,   152,   153,    -1,    -1,    -1,    -1,    -1,    -1,
   151,   152,   153,    -1,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,   113,    -1,   115,    -1,   117,    -1,   119,   120,
   121,   113,    -1,   115,    -1,   117,    -1,   119,   120,   121,
   113,    -1,   115,    -1,   117,    -1,   119,   120,   121,   113,
    -1,   115,    -1,   117,    -1,   119,   120,   121,    -1,    -1,
   151,   152,   153,    -1,    -1,    -1,    -1,    -1,    -1,   151,
   152,   153,    -1,    -1,    -1,    -1,    -1,    -1,   151,   152,
   153,    -1,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
   113,    -1,   115,    -1,   117,    -1,   119,   120,   121,   113,
    -1,   115,    -1,   117,    -1,   119,   120,   121,   113,    -1,
   115,    -1,   117,    -1,   119,   120,   121,   113,    -1,   115,
    -1,   117,    -1,   119,   120,   121,    -1,    -1,   151,   152,
   153,    -1,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
    -1,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,    -1,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,   113,    -1,
   115,    -1,   117,    -1,   119,   120,   121,   113,    -1,   115,
    -1,   117,    -1,   119,   120,   121,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,    -1,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/csl/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/csl/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 191 "surface.yy"
{ YYACCEPT; ;
    break;}
case 2:
#line 193 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::QUIT;
			;
    break;}
case 6:
#line 206 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 7:
#line 208 "surface.yy"
{
			  int lineNr = lineNumber;
			  eatComment(false); // eat \n so that line number is correct
			  string directory;
			  string fileName;
			  if (findFile(yyvsp[0].yyString, directory, fileName, lineNr))
			    includeFile(directory, fileName, false, lineNr);
			;
    break;}
case 8:
#line 216 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 9:
#line 218 "surface.yy"
{
			  int lineNr = lineNumber;
			  eatComment(false); // eat \n so that line number is correct
			  string directory;
			  string fileName;
			  if (findFile(yyvsp[0].yyString, directory, fileName, lineNr))
			    includeFile(directory, fileName, true, lineNr);
			;
    break;}
case 10:
#line 227 "surface.yy"
{
			  cout << directoryManager.getCwd() << '\n';
			;
    break;}
case 11:
#line 230 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 12:
#line 232 "surface.yy"
{
			  string directory;
			  directoryManager.realPath(yyvsp[0].yyString, directory);
			  if (!directoryManager.cd(directory))
			    {
			      IssueWarning(LineNumber(lineNumber) <<
					   ": cd failed");
			    }
			;
    break;}
case 13:
#line 241 "surface.yy"
{ lexerFileNameMode(); ;
    break;}
case 14:
#line 243 "surface.yy"
{
			  string directory;
			  directoryManager.realPath(yyvsp[0].yyString, directory);
			  if (directoryManager.pushd(directory) == UNDEFINED)
			    {
			      IssueWarning(LineNumber(lineNumber) <<
					   ": pushd failed");
			    }
			;
    break;}
case 15:
#line 253 "surface.yy"
{
			  const char* path = directoryManager.popd();
			  if (path != 0)
			    cout << path << '\n';
			  else
			    {
			      IssueWarning(LineNumber(lineNumber) <<
					   ": popd failed");
			    }
			;
    break;}
case 16:
#line 263 "surface.yy"
{ lexerStringMode(); ;
    break;}
case 17:
#line 265 "surface.yy"
{
			  system((string("ls") + yyvsp[0].yyString).c_str());
			;
    break;}
case 18:
#line 269 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::QUIT;
			  YYACCEPT;
			;
    break;}
case 19:
#line 274 "surface.yy"
{
			  if(!handleEof())
			    {
			      PARSE_RESULT = UserLevelRewritingContext::QUIT;
			    }
			;
    break;}
case 20:
#line 307 "surface.yy"
{
			  moduleExpressions.push(new ModuleExpression(yyvsp[0].yyToken));
			;
    break;}
case 21:
#line 311 "surface.yy"
{
			  ModuleExpression* m1 = moduleExpressions.top();
			  moduleExpressions.pop();
			  ModuleExpression* m2 = moduleExpressions.top();
			  moduleExpressions.pop();
			  moduleExpressions.push(new ModuleExpression(m1, m2));
			;
    break;}
case 22:
#line 319 "surface.yy"
{
			  ModuleExpression* m = moduleExpressions.top();
			  moduleExpressions.pop();
			  moduleExpressions.push(new ModuleExpression(m, currentRenaming));
			  currentRenaming = 0;
			;
    break;}
case 23:
#line 325 "surface.yy"
{;
    break;}
case 24:
#line 329 "surface.yy"
{
			  currentRenaming = new Renaming;
			;
    break;}
case 28:
#line 340 "surface.yy"
{
			  currentRenaming->addSortMapping(yyvsp[-2].yyToken, yyvsp[0].yyToken);
			;
    break;}
case 29:
#line 344 "surface.yy"
{
			  currentRenaming->addLabelMapping(yyvsp[-2].yyToken, yyvsp[0].yyToken);
			;
    break;}
case 30:
#line 347 "surface.yy"
{;
    break;}
case 31:
#line 350 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 32:
#line 351 "surface.yy"
{ currentRenaming->addOpMapping(bubble); ;
    break;}
case 33:
#line 352 "surface.yy"
{ clear(); ;
    break;}
case 34:
#line 353 "surface.yy"
{ currentRenaming->addOpMapping(bubble); ;
    break;}
case 35:
#line 356 "surface.yy"
{;
    break;}
case 39:
#line 365 "surface.yy"
{
			  clear();
			  bubble.append(yyvsp[0].yyToken);
			  currentRenaming->addType(bubble);
			;
    break;}
case 40:
#line 370 "surface.yy"
{ clear(); ;
    break;}
case 41:
#line 372 "surface.yy"
{
			  currentRenaming->addType(bubble);
			;
    break;}
case 42:
#line 377 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 43:
#line 378 "surface.yy"
{ currentRenaming->addOpTarget(bubble); ;
    break;}
case 44:
#line 379 "surface.yy"
{ clear(); ;
    break;}
case 45:
#line 380 "surface.yy"
{ currentRenaming->addOpTarget(bubble); ;
    break;}
case 46:
#line 383 "surface.yy"
{;
    break;}
case 50:
#line 391 "surface.yy"
{ currentRenaming->setPrec(yyvsp[0].yyToken); ;
    break;}
case 51:
#line 392 "surface.yy"
{ clear(); ;
    break;}
case 52:
#line 393 "surface.yy"
{ currentRenaming->setGather(bubble); ;
    break;}
case 53:
#line 394 "surface.yy"
{ clear(); ;
    break;}
case 54:
#line 395 "surface.yy"
{ currentRenaming->setFormat(bubble); ;
    break;}
case 55:
#line 396 "surface.yy"
{ lexerLatexMode(); ;
    break;}
case 56:
#line 397 "surface.yy"
{ currentRenaming->setLatexMacro(yyvsp[-1].yyString); ;
    break;}
case 57:
#line 403 "surface.yy"
{ lexerIdMode(); ;
    break;}
case 58:
#line 405 "surface.yy"
{
			  interpreter.
			    setCurrentModule(new PreModule(yyvsp[-1].yyToken, MixfixModule::FUNCTIONAL_MODULE));
			  fileTable.beginModule(yyvsp[-3].yyToken, yyvsp[-1].yyToken);
			;
    break;}
case 59:
#line 411 "surface.yy"
{
			  lexerInitialMode();
			  fileTable.endModule(lineNumber);
			  CM->finishModule();
			;
    break;}
case 60:
#line 416 "surface.yy"
{ lexerIdMode(); ;
    break;}
case 61:
#line 418 "surface.yy"
{
			  interpreter.
			    setCurrentModule(new PreModule(yyvsp[-1].yyToken, MixfixModule::SYSTEM_MODULE));
			  fileTable.beginModule(yyvsp[-3].yyToken, yyvsp[-1].yyToken);
			;
    break;}
case 62:
#line 424 "surface.yy"
{
			  lexerInitialMode();
			  fileTable.endModule(lineNumber);
			  CM->finishModule();
			;
    break;}
case 63:
#line 429 "surface.yy"
{ lexerIdMode(); ;
    break;}
case 64:
#line 431 "surface.yy"
{
			  interpreter.
			    setCurrentModule(new PreModule(yyvsp[-1].yyToken, MixfixModule::SYSTEM_MODULE));
			  fileTable.beginModule(yyvsp[-3].yyToken, yyvsp[-1].yyToken);
			;
    break;}
case 65:
#line 437 "surface.yy"
{
			  lexerInitialMode();
			  fileTable.endModule(lineNumber);
			  CM->finishModule();
			;
    break;}
case 66:
#line 444 "surface.yy"
{;
    break;}
case 67:
#line 446 "surface.yy"
{
			  IssueWarning(LineNumber(lineNumber) <<
			               ": fmod ended by " << yyvsp[0].yyToken << '.');
			;
    break;}
case 70:
#line 455 "surface.yy"
{;
    break;}
case 71:
#line 457 "surface.yy"
{
			  IssueWarning(LineNumber(lineNumber) <<
			               ": mod ended by " << yyvsp[0].yyToken << '.');
			;
    break;}
case 74:
#line 466 "surface.yy"
{;
    break;}
case 75:
#line 468 "surface.yy"
{
			  IssueWarning(LineNumber(lineNumber) <<
			               ": omod ended by " << yyvsp[0].yyToken << '.');
			;
    break;}
case 84:
#line 490 "surface.yy"
{
			  ModuleExpression* me = moduleExpressions.top();
			  moduleExpressions.pop();
			  CM->addImport(yyvsp[-2].yyToken, me);
			;
    break;}
case 85:
#line 496 "surface.yy"
{ clear(); ;
    break;}
case 86:
#line 497 "surface.yy"
{ CM->addSortDecl(bubble); ;
    break;}
case 87:
#line 499 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 88:
#line 500 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 89:
#line 501 "surface.yy"
{ CM->addSubsortDecl(bubble); ;
    break;}
case 90:
#line 503 "surface.yy"
{;
    break;}
case 91:
#line 505 "surface.yy"
{;
    break;}
case 92:
#line 507 "surface.yy"
{;
    break;}
case 93:
#line 509 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 94:
#line 510 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 95:
#line 511 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 96:
#line 513 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 97:
#line 514 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 98:
#line 515 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 99:
#line 516 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 100:
#line 518 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 101:
#line 519 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 102:
#line 520 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 103:
#line 522 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 104:
#line 523 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 105:
#line 524 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 106:
#line 525 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 107:
#line 528 "surface.yy"
{
			  //
			  //	Fix things that might be in a bad state due
			  //	to a partially processed declaration.
			  //
			  cleanUpModuleExpression();
			  CM->makeOpDeclsConsistent();
			;
    break;}
case 109:
#line 539 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 110:
#line 540 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 111:
#line 541 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 112:
#line 543 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 113:
#line 544 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 114:
#line 545 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 115:
#line 546 "surface.yy"
{ CM->addStatement(bubble); ;
    break;}
case 117:
#line 551 "surface.yy"
{
			  CM->setFlag(SymbolType::MESSAGE);
			;
    break;}
case 118:
#line 555 "surface.yy"
{
			  CM->setFlag(SymbolType::MESSAGE);
			;
    break;}
case 119:
#line 559 "surface.yy"
{
			;
    break;}
case 120:
#line 562 "surface.yy"
{
			;
    break;}
case 121:
#line 564 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 122:
#line 565 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 123:
#line 566 "surface.yy"
{ CM->addSubsortDecl(bubble); ;
    break;}
case 124:
#line 569 "surface.yy"
{;
    break;}
case 125:
#line 570 "surface.yy"
{;
    break;}
case 128:
#line 578 "surface.yy"
{
			;
    break;}
case 129:
#line 582 "surface.yy"
{ CM->addVarDecl(yyvsp[0].yyToken); ;
    break;}
case 130:
#line 583 "surface.yy"
{ CM->addVarDecl(yyvsp[0].yyToken); ;
    break;}
case 131:
#line 586 "surface.yy"
{ clear(); store(yyvsp[0].yyToken); ;
    break;}
case 132:
#line 587 "surface.yy"
{ CM->addOpDecl(bubble); ;
    break;}
case 133:
#line 588 "surface.yy"
{ clear(); ;
    break;}
case 134:
#line 589 "surface.yy"
{ CM->addOpDecl(bubble); ;
    break;}
case 137:
#line 597 "surface.yy"
{
			  clear();
			  store(yyvsp[0].yyToken);
			  CM->addOpDecl(bubble);
			;
    break;}
case 138:
#line 602 "surface.yy"
{ clear(); ;
    break;}
case 139:
#line 603 "surface.yy"
{ CM->addOpDecl(bubble); ;
    break;}
case 140:
#line 607 "surface.yy"
{
			  if (yyvsp[-3].yyBool)
			    CM->convertSortsToKinds();
			;
    break;}
case 141:
#line 613 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 142:
#line 614 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 145:
#line 622 "surface.yy"
{
			  clear();
			  bubble.append(yyvsp[0].yyToken);
			  CM->addType(false, bubble);
			;
    break;}
case 146:
#line 627 "surface.yy"
{ clear(); ;
    break;}
case 147:
#line 629 "surface.yy"
{
			  CM->addType(true, bubble);
			;
    break;}
case 148:
#line 634 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 149:
#line 635 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 150:
#line 638 "surface.yy"
{;
    break;}
case 154:
#line 647 "surface.yy"
{
			  CM->setFlag(SymbolType::LEFT_ID | SymbolType::RIGHT_ID);
			;
    break;}
case 155:
#line 651 "surface.yy"
{
			  CM->setFlag(SymbolType::LEFT_ID);
			;
    break;}
case 156:
#line 655 "surface.yy"
{
			  CM->setFlag(SymbolType::RIGHT_ID);
			;
    break;}
case 157:
#line 661 "surface.yy"
{
			  CM->setFlag(SymbolType::ASSOC);
			;
    break;}
case 158:
#line 665 "surface.yy"
{
			  CM->setFlag(SymbolType::COMM);
			;
    break;}
case 159:
#line 668 "surface.yy"
{ clear(); ;
    break;}
case 160:
#line 669 "surface.yy"
{ CM->setIdentity(bubble); ;
    break;}
case 161:
#line 671 "surface.yy"
{
			  CM->setFlag(SymbolType::IDEM);
			;
    break;}
case 162:
#line 675 "surface.yy"
{
			  CM->setFlag(SymbolType::ITER);
			;
    break;}
case 163:
#line 678 "surface.yy"
{ CM->setPrec(yyvsp[0].yyToken); ;
    break;}
case 164:
#line 679 "surface.yy"
{ clear(); ;
    break;}
case 165:
#line 680 "surface.yy"
{ CM->setGather(bubble); ;
    break;}
case 166:
#line 681 "surface.yy"
{ clear(); ;
    break;}
case 167:
#line 682 "surface.yy"
{ CM->setFormat(bubble); ;
    break;}
case 168:
#line 683 "surface.yy"
{ clear(); ;
    break;}
case 169:
#line 684 "surface.yy"
{ CM->setStrat(bubble); ;
    break;}
case 170:
#line 685 "surface.yy"
{ clear(); ;
    break;}
case 171:
#line 686 "surface.yy"
{ CM->setPoly(bubble); ;
    break;}
case 172:
#line 688 "surface.yy"
{
			  CM->setFlag(SymbolType::MEMO);
			;
    break;}
case 173:
#line 692 "surface.yy"
{
			  CM->setFlag(SymbolType::CTOR);
			;
    break;}
case 174:
#line 696 "surface.yy"
{
			  clear();
			  CM->setFrozen(bubble);
			;
    break;}
case 175:
#line 700 "surface.yy"
{ clear(); ;
    break;}
case 176:
#line 701 "surface.yy"
{ CM->setFrozen(bubble); ;
    break;}
case 177:
#line 703 "surface.yy"
{
			  CM->setFlag(SymbolType::CONFIG);
			;
    break;}
case 178:
#line 707 "surface.yy"
{
			  CM->setFlag(SymbolType::OBJECT);
			;
    break;}
case 179:
#line 711 "surface.yy"
{
			  CM->setFlag(SymbolType::MESSAGE);
			;
    break;}
case 180:
#line 714 "surface.yy"
{ lexerLatexMode(); ;
    break;}
case 181:
#line 715 "surface.yy"
{ CM->setLatexMacro(yyvsp[-1].yyString); ;
    break;}
case 182:
#line 716 "surface.yy"
{;
    break;}
case 183:
#line 718 "surface.yy"
{
			  CM->setFlag(SymbolType::DITTO);
			;
    break;}
case 184:
#line 723 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 185:
#line 724 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 188:
#line 732 "surface.yy"
{
			  clear();
			  CM->addHook(PreModule::ID_HOOK, yyvsp[0].yyToken, bubble);
			;
    break;}
case 189:
#line 736 "surface.yy"
{ clear(); ;
    break;}
case 190:
#line 738 "surface.yy"
{
			  CM->addHook(PreModule::ID_HOOK, yyvsp[-4].yyToken, bubble);
			;
    break;}
case 191:
#line 741 "surface.yy"
{ clear(); ;
    break;}
case 192:
#line 743 "surface.yy"
{
			  CM->addHook(PreModule::OP_HOOK, yyvsp[-4].yyToken, bubble);
			;
    break;}
case 193:
#line 746 "surface.yy"
{ clear(); ;
    break;}
case 194:
#line 748 "surface.yy"
{
			  CM->addHook(PreModule::TERM_HOOK, yyvsp[-4].yyToken, bubble);
			;
    break;}
case 195:
#line 756 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 197:
#line 760 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 199:
#line 767 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 200:
#line 768 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 201:
#line 769 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 203:
#line 773 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 204:
#line 774 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 205:
#line 775 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 207:
#line 779 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 208:
#line 780 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 209:
#line 781 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 211:
#line 785 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 212:
#line 786 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 213:
#line 787 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 215:
#line 791 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 216:
#line 792 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 217:
#line 793 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 219:
#line 797 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 220:
#line 798 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 221:
#line 799 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 223:
#line 803 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 224:
#line 804 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 225:
#line 805 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 228:
#line 810 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 229:
#line 811 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 230:
#line 814 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 231:
#line 815 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 232:
#line 816 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 233:
#line 817 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 234:
#line 818 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 235:
#line 819 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 236:
#line 820 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 237:
#line 826 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 238:
#line 827 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 243:
#line 831 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 244:
#line 832 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 407:
#line 926 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 408:
#line 927 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 409:
#line 929 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.setCurrentModule(bubble);
			;
    break;}
case 410:
#line 933 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 411:
#line 934 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 412:
#line 936 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    CM->dump();
			;
    break;}
case 413:
#line 942 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 414:
#line 948 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.parse(bubble);
			;
    break;}
case 415:
#line 955 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 416:
#line 961 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.creduce(bubble);
			;
    break;}
case 417:
#line 968 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 418:
#line 974 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.reduce(bubble, yyvsp[-3].yyBool);
			;
    break;}
case 419:
#line 981 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 420:
#line 988 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.rewrite(bubble, number, yyvsp[-3].yyBool);
			;
    break;}
case 421:
#line 994 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 422:
#line 1001 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    ;
			;
    break;}
case 423:
#line 1007 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			  number2 = NONE;
			;
    break;}
case 424:
#line 1015 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.fRewrite(bubble, number, number2, yyvsp[-3].yyBool);
			;
    break;}
case 425:
#line 1021 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 426:
#line 1028 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.search(bubble, number);
			;
    break;}
case 427:
#line 1034 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			  number = NONE;
			;
    break;}
case 428:
#line 1041 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.match(bubble, yyvsp[-2].yyBool, number);
			;
    break;}
case 429:
#line 1047 "surface.yy"
{
			  interpreter.cont(yyvsp[-1].yyInt64, yyvsp[-3].yyBool);
			;
    break;}
case 430:
#line 1051 "surface.yy"
{
			  lexerCmdMode();
			  clear();
			  moduleExpr.contractTo(0);
			;
    break;}
case 431:
#line 1057 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(moduleExpr, 1))
			    interpreter.loop(bubble);
			;
    break;}
case 432:
#line 1062 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 433:
#line 1064 "surface.yy"
{
			  lexerInitialMode();
			  moduleExpr.contractTo(0);
			  if (interpreter.setCurrentModule(moduleExpr))  // HACK
			    interpreter.contLoop(bubble);
			;
    break;}
case 434:
#line 1071 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 435:
#line 1073 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.traceSelect(yyvsp[-3].yyBool);
			;
    break;}
case 436:
#line 1077 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 437:
#line 1079 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.traceExclude(yyvsp[-3].yyBool);
			;
    break;}
case 438:
#line 1083 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 439:
#line 1085 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.breakSelect(yyvsp[-3].yyBool);
			;
    break;}
case 440:
#line 1089 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 441:
#line 1091 "surface.yy"
{
			  lexerInitialMode();
			  interpreter.printConceal(yyvsp[-3].yyBool);
			;
    break;}
case 442:
#line 1096 "surface.yy"
{
			  if (CM != 0)  // HACK
			    CM->getFlatSignature()->clearMemo();
			;
    break;}
case 443:
#line 1103 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 444:
#line 1105 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    CM->showModule();
			;
    break;}
case 445:
#line 1110 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 446:
#line 1112 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    CM->showModule();
			;
    break;}
case 447:
#line 1117 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 448:
#line 1119 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showModule(true);
			;
    break;}
case 449:
#line 1125 "surface.yy"
{
			  interpreter.showModules(true);
			;
    break;}
case 450:
#line 1128 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 451:
#line 1130 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showSortsAndSubsorts();
			;
    break;}
case 452:
#line 1135 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 453:
#line 1137 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showOps();
			;
    break;}
case 454:
#line 1142 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 455:
#line 1144 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showVars();
			;
    break;}
case 456:
#line 1149 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 457:
#line 1151 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showMbs();
			;
    break;}
case 458:
#line 1156 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 459:
#line 1158 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showEqs();
			;
    break;}
case 460:
#line 1163 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 461:
#line 1165 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showRls();
			;
    break;}
case 462:
#line 1170 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 463:
#line 1172 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showSummary();
			;
    break;}
case 464:
#line 1177 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 465:
#line 1179 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showKinds();
			;
    break;}
case 466:
#line 1185 "surface.yy"
{
			  interpreter.showSearchPath(yyvsp[-1].yyInt64);
			;
    break;}
case 467:
#line 1189 "surface.yy"
{
			  interpreter.showSearchGraph();
			;
    break;}
case 468:
#line 1192 "surface.yy"
{ lexerCmdMode(); clear(); ;
    break;}
case 469:
#line 1194 "surface.yy"
{
			  lexerInitialMode();
			  if (interpreter.setCurrentModule(bubble))
			    interpreter.showProfile();
			;
    break;}
case 470:
#line 1203 "surface.yy"
{
			  globalAdvisoryFlag = yyvsp[-1].yyBool;
			;
    break;}
case 471:
#line 1207 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_STATS, yyvsp[-1].yyBool);
			;
    break;}
case 472:
#line 1211 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_LOOP_STATS, yyvsp[-1].yyBool);
			;
    break;}
case 473:
#line 1215 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_TIMING, yyvsp[-1].yyBool);
			;
    break;}
case 474:
#line 1219 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_BREAKDOWN, yyvsp[-1].yyBool);
			;
    break;}
case 475:
#line 1223 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_LOOP_TIMING, yyvsp[-1].yyBool);
			;
    break;}
case 476:
#line 1227 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_COMMAND, yyvsp[-1].yyBool);
			;
    break;}
case 477:
#line 1231 "surface.yy"
{
			  MemoryCell::setShowGC(yyvsp[-1].yyBool);
			;
    break;}
case 478:
#line 1235 "surface.yy"
{
			  MixfixModule::setPrintMixfix(yyvsp[-1].yyBool);
			;
    break;}
case 479:
#line 1239 "surface.yy"
{
			  MixfixModule::setPrintFlat(yyvsp[-1].yyBool);
			;
    break;}
case 480:
#line 1243 "surface.yy"
{
			  MixfixModule::setPrintWithAliases(yyvsp[-1].yyBool);
			;
    break;}
case 481:
#line 1247 "surface.yy"
{
			  MixfixModule::setPrintWithParens(yyvsp[-1].yyBool);
			;
    break;}
case 482:
#line 1251 "surface.yy"
{
			  MixfixModule::setPrintGraph(yyvsp[-1].yyBool);
			;
    break;}
case 483:
#line 1255 "surface.yy"
{
			  MixfixModule::setPrintConceal(yyvsp[-1].yyBool);
			;
    break;}
case 484:
#line 1259 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PRINT_NUMBER, yyvsp[-1].yyBool);
			;
    break;}
case 485:
#line 1263 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PRINT_RAT, yyvsp[-1].yyBool);
			;
    break;}
case 486:
#line 1267 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PRINT_COLOR, yyvsp[-1].yyBool);
			;
    break;}
case 487:
#line 1271 "surface.yy"
{
			  MixfixModule::setPrintFormat(yyvsp[-1].yyBool);
			;
    break;}
case 488:
#line 1275 "surface.yy"
{
			  interpreter.setFlag(Interpreter::TRACE, yyvsp[-1].yyBool);
			;
    break;}
case 489:
#line 1279 "surface.yy"
{
			  UserLevelRewritingContext::setTraceConditionFlag(yyvsp[-1].yyBool);
			;
    break;}
case 490:
#line 1283 "surface.yy"
{
			// ??? what is this supposed to do?
			;
    break;}
case 491:
#line 1287 "surface.yy"
{
			  UserLevelRewritingContext::setTraceWholeFlag(yyvsp[-1].yyBool);
			;
    break;}
case 492:
#line 1291 "surface.yy"
{
			  UserLevelRewritingContext::setTraceSubstitutionFlag(yyvsp[-1].yyBool);
			;
    break;}
case 493:
#line 1295 "surface.yy"
{
			  UserLevelRewritingContext::setTraceSelectFlag(yyvsp[-1].yyBool);
			;
    break;}
case 494:
#line 1299 "surface.yy"
{
			  UserLevelRewritingContext::setTraceScFlag(yyvsp[-1].yyBool);
			;
    break;}
case 495:
#line 1303 "surface.yy"
{
			  UserLevelRewritingContext::setTraceEqFlag(yyvsp[-1].yyBool);
			;
    break;}
case 496:
#line 1307 "surface.yy"
{
			  UserLevelRewritingContext::setTraceRuleFlag(yyvsp[-1].yyBool);
			;
    break;}
case 497:
#line 1311 "surface.yy"
{
			  interpreter.setFlag(Interpreter::BREAK, yyvsp[-1].yyBool);
			;
    break;}
case 498:
#line 1314 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 499:
#line 1315 "surface.yy"
{ lexerInitialMode(); ;
    break;}
case 500:
#line 1317 "surface.yy"
{
			  interpreter.setInclude(yyvsp[-3].yyToken, yyvsp[-1].yyBool);
			;
    break;}
case 501:
#line 1320 "surface.yy"
{ lexerCmdMode(); ;
    break;}
case 502:
#line 1321 "surface.yy"
{ lexerInitialMode(); ;
    break;}
case 503:
#line 1323 "surface.yy"
{
			  interpreter.setOmodInclude(yyvsp[-3].yyToken, yyvsp[-1].yyBool);
			;
    break;}
case 504:
#line 1327 "surface.yy"
{
			  globalVerboseFlag = yyvsp[-1].yyBool;
			;
    break;}
case 505:
#line 1331 "surface.yy"
{
			  interpreter.setFlag(Interpreter::AUTO_CLEAR_MEMO, yyvsp[-1].yyBool);
			;
    break;}
case 506:
#line 1335 "surface.yy"
{
			  interpreter.setFlag(Interpreter::COMPILE_COUNT, yyvsp[-1].yyBool);
			;
    break;}
case 507:
#line 1339 "surface.yy"
{
			  interpreter.setFlag(Interpreter::PROFILE, yyvsp[-1].yyBool);
			;
    break;}
case 508:
#line 1343 "surface.yy"
{
			  interpreter.setFlag(Interpreter::AUTO_CLEAR_PROFILE, yyvsp[-1].yyBool);
			;
    break;}
case 509:
#line 1350 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::RESUME;
			;
    break;}
case 510:
#line 1354 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::ABORT;
			;
    break;}
case 511:
#line 1358 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::STEP;
			;
    break;}
case 512:
#line 1362 "surface.yy"
{
			  PARSE_RESULT = UserLevelRewritingContext::WHERE;
			;
    break;}
case 513:
#line 1369 "surface.yy"
{
			  MemoryCell::setShowGC(yyvsp[-1].yyBool);
			;
    break;}
case 514:
#line 1373 "surface.yy"
{
			  interpreter.setFlag(Interpreter::SHOW_STATS, yyvsp[-1].yyBool);
			;
    break;}
case 515:
#line 1379 "surface.yy"
{ lexerInitialMode(); ;
    break;}
case 517:
#line 1386 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 518:
#line 1387 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 519:
#line 1390 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 520:
#line 1391 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 521:
#line 1394 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 522:
#line 1395 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 523:
#line 1398 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 524:
#line 1399 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 525:
#line 1402 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 526:
#line 1403 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 527:
#line 1406 "surface.yy"
{ yyval.yyBool = true; ;
    break;}
case 528:
#line 1407 "surface.yy"
{ yyval.yyBool = false; ;
    break;}
case 529:
#line 1410 "surface.yy"
{ yyval.yyInt64 = yyvsp[0].yyInt64; ;
    break;}
case 530:
#line 1411 "surface.yy"
{ yyval.yyInt64 = NONE; ;
    break;}
case 531:
#line 1419 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 533:
#line 1421 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 535:
#line 1425 "surface.yy"
{ moduleExpr = bubble; clear(); ;
    break;}
case 536:
#line 1426 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 537:
#line 1427 "surface.yy"
{;
    break;}
case 538:
#line 1428 "surface.yy"
{;
    break;}
case 539:
#line 1437 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 541:
#line 1439 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 543:
#line 1441 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 545:
#line 1446 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 547:
#line 1448 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 549:
#line 1450 "surface.yy"
{;
    break;}
case 550:
#line 1455 "surface.yy"
{
			  number = Token::codeToInt64(bubble[1].code());
			  clear();
			;
    break;}
case 552:
#line 1460 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 554:
#line 1462 "surface.yy"
{;
    break;}
case 555:
#line 1471 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 557:
#line 1473 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 559:
#line 1475 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 561:
#line 1480 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 563:
#line 1482 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 565:
#line 1484 "surface.yy"
{;
    break;}
case 566:
#line 1489 "surface.yy"
{
			  number = Token::codeToInt64(bubble[1].code());
			  clear();
			;
    break;}
case 568:
#line 1494 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 570:
#line 1496 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 572:
#line 1498 "surface.yy"
{;
    break;}
case 573:
#line 1502 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 575:
#line 1504 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 577:
#line 1506 "surface.yy"
{;
    break;}
case 578:
#line 1511 "surface.yy"
{
			  number = Token::codeToInt64(bubble[1].code());
			  number2 = Token::codeToInt64(bubble[3].code());
			  clear();
			;
    break;}
case 580:
#line 1517 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 582:
#line 1519 "surface.yy"
{;
    break;}
case 583:
#line 1525 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 585:
#line 1529 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 587:
#line 1534 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 597:
#line 1542 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 598:
#line 1543 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 606:
#line 1547 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 607:
#line 1548 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 614:
#line 1553 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 615:
#line 1554 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 623:
#line 1558 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 624:
#line 1559 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 631:
#line 1563 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 632:
#line 1564 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 639:
#line 1569 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 640:
#line 1570 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 647:
#line 1575 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 648:
#line 1576 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 654:
#line 1581 "surface.yy"
{ store(yyvsp[0].yyToken); ;
    break;}
case 655:
#line 1582 "surface.yy"
{ yyval.yyToken = yyvsp[0].yyToken; ;
    break;}
case 658:
#line 1593 "surface.yy"
{
			  clear();
			  store(yyvsp[0].yyToken);
			  interpreter.addSelected(bubble);
			;
    break;}
case 659:
#line 1598 "surface.yy"
{ clear(); ;
    break;}
case 660:
#line 1600 "surface.yy"
{
			  interpreter.addSelected(bubble);
			;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/csl/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1630 "surface.yy"


static void
yyerror(char *s)
{
  if (!(UserLevelRewritingContext::interrupted()))
    IssueWarning(LineNumber(lineNumber) << ": " << s);
}

void
cleanUpModuleExpression()
{
  //
  //	Delete pieces of a partly built module expression.
  //
  delete currentRenaming;
  currentRenaming = 0;
  while (!moduleExpressions.empty())
    {
      moduleExpressions.top()->deepSelfDestruct();
      moduleExpressions.pop();
    }
}

void
cleanUpParser()
{
  //bubble.contractTo(0);
  //moduleExpr.contractTo(0);
  //pattern.contractTo(0);
  interpreter.makeClean(lineNumber);
  /*
  if (currentModule != 0 && !(currentModule->isComplete()))
    {
      IssueAdvisory(cerr << LineNumber(lineNumber) << ": discarding incomplete module.");
      delete currentModule;
      currentModule = 0;
    }
  */
}
