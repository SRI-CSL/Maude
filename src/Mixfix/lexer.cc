/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 168
#define YY_END_OF_BUFFER 169
static yyconst short int yy_accept[871] =
    {   0,
      165,  165,  165,  165,  165,  165,  154,  154,  156,  156,
        0,    0,  169,  167,  165,  166,  166,   97,  167,   95,
       97,   97,   97,   95,   96,   96,   97,  167,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   15,   97,   97,   97,   97,   97,   97,   97,
      153,  167,  151,  151,  151,  153,  151,  151,  153,  167,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  101,  167,
       99,  101,   99,  101,  101,  100,   99,  101,  167,  101,
      101,  155,  154,  168,  156,  157,  164,  158,  163,  163,

      159,  160,  158,  161,  162,  165,   97,    0,   97,    0,
        0,    0,   97,   97,   96,    0,   97,   97,   97,   97,
       97,   97,   11,   97,   97,   97,   97,   97,   40,   97,
       97,   72,   97,   97,   97,   97,   97,   97,   97,   59,
       97,    5,   97,   97,   97,   14,   97,   71,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   35,   69,   97,
       97,   97,   97,   97,   97,   97,   97,   73,   97,   97,
       97,   97,   97,   97,   97,   97,    6,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,  153,    0,  152,
      153,    0,    0,    0,  153,  153,  147,  150,  148,    0,

      153,  153,  153,  153,  153,  142,  153,  153,  153,  153,
      141,  130,  153,  153,  153,  153,  129,  153,  128,  153,
      153,  153,  153,  139,  153,  153,  153,  135,  153,  130,
      153,  143,  153,  153,  153,  153,  153,  102,  130,  153,
      149,  101,    0,  101,    0,    0,    0,  101,  101,    0,
       98,  100,    0,    5,  155,  154,  156,  158,  158,   97,
        0,    2,    2,   97,   97,   97,   64,   97,   97,   97,
       97,   63,   97,   97,   97,   97,   97,   97,   97,   97,
       16,   72,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   71,   97,   97,    6,

       27,   97,   97,   36,   97,   69,   97,   97,   97,   97,
       97,   97,   10,   97,   94,   19,   97,   97,   21,   73,
       97,   97,   97,   33,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   70,   97,   97,   97,   97,
       97,   97,   97,  153,    0,    2,    2,  153,  153,  140,
      153,  153,  144,  153,  153,  153,  153,  153,  153,  153,
      153,  107,  153,  130,  153,  145,  153,  153,  153,  153,
      153,  153,  123,  122,  153,  136,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  138,  101,    0,    2,
        2,    0,    0,    0,    0,    2,    2,    2,    1,    2,

        2,   97,   97,   97,   42,   97,   97,   97,   97,   97,
       97,   97,   49,   26,   97,   20,   97,   97,   87,   22,
       97,   97,   55,   97,   23,   97,   97,   97,   97,    9,
       25,   97,    3,   97,   97,   97,   18,   97,    7,   97,
       97,   90,   13,   97,   97,   97,   97,   15,   97,   97,
       97,   97,   97,   73,   97,   97,   34,   68,   24,   97,
       85,   97,   97,   60,   97,   97,   97,   70,   97,    8,
       97,   97,   56,   97,   97,    0,    0,    2,    2,    2,
        1,    2,    2,  153,  153,  106,  153,  153,  118,  153,
      153,  145,  153,  153,  146,  153,  153,  103,  153,  153,

      153,  108,  153,  153,  109,  153,  153,  110,    3,  153,
      153,  137,  153,  153,  117,  112,  153,  153,  131,  153,
      153,  153,  153,  153,  153,  138,    0,    0,    2,    2,
        1,    2,    2,    0,    0,    2,    2,    1,    1,    1,
        1,    1,    2,    2,    2,   84,   97,   58,   88,   97,
       41,   52,   97,   97,   97,   97,   97,   97,   77,   97,
       82,   97,   97,   97,   97,   97,   97,   97,   53,   97,
       75,   91,   28,   97,   97,   97,   97,   97,   57,   17,
       51,   97,   97,   12,   97,   97,   97,   97,   97,   97,
       97,   68,   97,   61,   50,   97,   97,   37,   31,   97,

       67,   86,   44,   97,   97,    2,    2,    1,    1,    1,
        1,    1,    2,    2,    2,  105,  133,  153,  153,  153,
      124,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  104,  119,  153,  153,  153,  153,  153,  153,  153,
      111,  131,  153,  115,  153,  153,  153,  130,    2,    2,
        1,    1,    1,    1,    2,    2,    2,    1,    1,    1,
        1,    1,    2,    2,   38,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   79,
       97,    4,   97,   97,   91,   54,   66,   27,   97,   93,
       57,   97,   97,   97,   97,   19,   83,   48,   97,   30,

       45,   97,   97,   97,   62,   97,   29,   32,    1,    1,
        1,    1,    1,    2,    2,  153,  153,  121,  153,  153,
        4,  116,  113,  153,  153,  153,  153,  153,  153,  153,
      122,  153,  153,  153,  153,  153,  153,  153,  153,  153,
        1,    1,    1,    1,    1,    2,    2,    1,    1,   97,
       58,   97,   43,   76,   97,   47,   97,   97,   20,   97,
       97,   81,   97,   97,   80,   65,   97,   97,   92,   78,
       97,   21,   97,   97,   74,   39,    1,    1,  153,  153,
      153,  153,  153,  125,  153,  153,  153,  153,  123,  153,
      126,  153,  153,  153,  120,  153,  153,  132,  153,    1,

        1,   97,   97,   76,   97,   97,   26,   46,   22,   97,
       23,   97,   97,   94,   24,   97,  153,  153,  153,  153,
      153,  153,  153,  153,  109,  114,  153,  153,  153,  115,
      134,  132,  153,   97,   89,   97,   49,   55,   18,   97,
       97,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      127,   97,   97,  153,  153,  153,  153,  108,  153,  112,
      134,   97,  105,  106,  153,  117,   50,  153,  121,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   22,    8,   24,   25,   26,   27,   28,   29,

       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   13,   53,   54,    1,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55
    } ;

static yyconst int yy_meta[56] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    6,    9,    9,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    7,    7,    5,    6
    } ;

static yyconst short int yy_base[916] =
    {   0,
        0,    0,   55,    0,  110,  163,  134,  140,  145,  149,
      216,  271,  284, 5230,  151, 5230, 5230,  167,  171, 5230,
      174, 5230,  180,  184,  187,  219,  205,  196,  226,  261,
      274,  291,  304,  222,  311,  309,  232,  316,  340,  352,
      348,  359,  264,  384,  422,  379,  372,  408,  391,  281,
      334,  215, 5230,  411,  432,  454,  434,  464,  467,  476,
      486,  522,  484,  524,  496,  490,  565,  510,  545,  568,
      590,  602,  563,  612,  614,  616,  639,  650,  284,  231,
     5230,  472, 5230,  498,  674,  533,  420,  577,  674,  610,
     5230,    0,  116, 5230,    0, 5230, 5230,    0, 5230, 5230,

     5230, 5230,  149, 5230, 5230,  285,  637,  255,  677,  681,
      329,  276,  685,  691,  695,  707,  698,  715,  719,  721,
      727,  739,  745,  752,  756,  759,  762,  766,  770,  779,
      790,  798,  800,  803,  809,  820,  827,  829,  831,  837,
      841,  848,  854,  859,  865,  871,  873,  876,  878,  883,
      885,  897,  902,  904,  906,  924,  910,  914,  927,  934,
      937,  948,  945,  951,  959,  972,  976,  978,  982,  989,
      985, 1003, 1007, 1012, 1021, 1029, 1024, 1035, 1046, 1052,
     1054, 1056, 1059, 1066, 1076, 1078, 1083, 1089,  346, 1100,
     1102, 1119,  417,  258, 1122, 1127, 1139, 1141, 1144, 1148,

     1158, 1164, 1168, 1187, 1199, 1201, 1204, 1218, 1223, 1235,
     1237, 1241, 1247, 1258, 1260, 1272, 1283, 1285, 1295, 1305,
     1307, 1309, 1328, 1332, 1329, 1346, 1356, 1360, 1370, 1373,
     1384, 1390, 1396, 1401, 1413, 1418, 1424, 1435, 1437, 1441,
     1454, 1166,  428, 1303, 1463,  494,  255, 1471, 1466, 1495,
     5230, 1494, 1495, 1315,    0,  131,    0,    0, 5230, 1499,
      518, 1548, 1601, 1511, 1504, 1516, 1521, 1541, 1551, 1555,
     1558, 1562, 1569, 1565, 1589, 1607, 1595, 1612, 1618, 1620,
     1572, 1626, 1631, 1638, 1640, 1643, 1648, 1657, 1660, 1662,
     1665, 1667, 1669, 1688, 1691, 1695, 1697, 1700, 1702, 1705,

     1719, 1722, 1725, 1729, 1732, 1739, 1746, 1749, 1756, 1759,
     1763, 1768, 1780, 1782, 1786, 1788, 1790, 1793, 1800, 1807,
     1817, 1813, 1820, 1824, 1830, 1837, 1843, 1848, 1850, 1856,
     1860, 1862, 1868, 1881, 1890, 1892, 1898, 1894, 1902, 1904,
     1915, 1922, 1925, 1928,  559, 1967, 2020, 1945, 1949, 1970,
     1987, 1969, 1981, 2023, 1993, 2020, 2045, 2062, 2065, 2068,
     2082, 2086, 2088, 2105, 2108, 2119, 2122, 2125, 2144, 2147,
     2149, 2166, 2161, 2172, 2185, 2190, 2195, 2207, 2212, 2217,
     2230, 2235, 2240, 2252, 2262, 2258, 2279, 1998,  582, 2323,
     2376,  240,  230,  599,  239,    0,  213, 1530, 2429,  106,

     2482, 2031, 2281, 2284, 2028, 2290, 2155, 2292, 2327, 2329,
     2332, 2334, 2260, 2337, 2354, 2358, 2364, 2382, 2384, 2393,
     2386, 2396, 2417, 2422, 2425, 2436, 2448, 2446, 2450, 2454,
     2475, 2486, 2488, 2492, 2496, 2499, 2505, 2513, 2516, 2523,
     2527, 2535, 2540, 2544, 2546, 2549, 2552, 2558, 2563, 2566,
     2575, 2583, 2577, 2595, 2597, 2603, 2605, 2608, 2617, 2625,
     2629, 2631, 2637, 2634, 2642, 2648, 2655, 2659, 2661, 2665,
     2668, 2678, 2682, 2686, 2688,  620,  230,  211, 2714,  202,
     2737,  369, 2790, 2708, 2719, 2733, 2751, 2757, 2762, 2768,
     2794, 2797, 2800, 2820, 2824, 2838, 2841, 2855, 2859, 2869,

     2872, 2882, 2886, 2892, 2904, 2909, 2923, 2926, 2928, 2940,
     2945, 2951, 2962, 2964, 2968, 2985, 2987, 2989, 3007, 3011,
     3013, 3017, 3031, 3037, 3041, 3051,  624,  210,  182, 2851,
     3076,  370, 3129,  188,  175, 3087,  666,    0, 3182, 3088,
      159, 3235, 3092,  150, 3108, 2730, 3019, 3039, 2802, 2771,
     2934, 3059, 3095, 3098, 3117, 3123, 3112, 3137, 3141, 3143,
     3149, 3154, 3163, 3176, 3185, 3193, 3202, 3204, 3206, 3239,
     3216, 3228, 3241, 3245, 3249, 3252, 3258, 3266, 3272, 3277,
     3280, 3283, 3290, 3297, 3301, 3303, 3314, 3310, 3321, 3327,
     3332, 3334, 3339, 3344, 3346, 3358, 3363, 3365, 3367, 3369,

     3372, 3375, 3393, 3395, 3397, 3407, 1116, 3447, 3422,    0,
      136, 3500, 3422,  135, 3445, 3457, 3418, 3461, 3471, 3496,
     3507, 3510, 3520, 3531, 3541, 3545, 3558, 3562, 3575, 3581,
     3587, 3592, 3598, 3604, 3609, 3615, 3621, 3632, 3634, 3646,
     3657, 3659, 3669, 3680, 3682, 3693, 3704, 3706, 3731, 1215,
     3754, 3738,  124, 3807, 3738,  109, 3765, 3766, 1342, 3770,
        0, 3792, 3796, 1451, 3400, 3785, 3469, 3493, 3640, 3539,
     3732, 3811, 3789, 3570, 3815, 3818, 3821, 3483, 3828, 3568,
     3838, 3629, 3841, 3845, 3702, 3762, 3847, 3855, 3858, 3864,
     3869, 3872, 3876, 3878, 3886, 3889, 3895, 3900, 3906, 3908,

     3913, 3917, 3919, 3925, 3930, 3936, 3943, 3947, 3969, 1485,
     3937,    0, 3973, 3984, 1959, 3978, 3989, 3992, 4002, 4012,
     4015, 4025, 4035, 4038, 4048, 4052, 4062, 4074, 4076, 4086,
     4096, 4098, 4100, 4117, 4120, 4130, 4144, 4147, 4150, 4161,
     4180, 2869, 4168,    0, 4193, 4203, 2978, 4204, 3434, 3975,
     4056, 4174, 4094, 4200, 4205, 4126, 4208, 4210, 4214, 4222,
     4227, 4236, 4240, 4244, 4247, 4253, 4257, 4264, 4266, 4271,
     4274, 4276, 4288, 4278, 4295, 4297, 4322, 3696, 4316, 4318,
     4328, 4330, 4340, 4350, 4353, 4364, 4376, 4378, 4381, 4395,
     4400, 4413, 4417, 4419, 4423, 4436, 4441, 4446, 4458, 4468,

     4392, 4454, 4464, 4326, 4471, 4483, 4485, 4488, 4490, 4495,
     4493, 4502, 4512, 4514, 4516, 4519, 4526, 4537, 4543, 4549,
     4554, 4566, 4568, 4572, 4586, 4590, 4592, 4603, 4613, 4617,
     4623, 4634, 4640, 4611, 4524, 4636, 4642, 4645, 4648, 4653,
     4662, 4665, 4675, 4679, 4685, 4689, 4702, 4707, 4719, 4724,
     4729, 4732, 4737, 4749, 4762, 4766, 4772, 4785, 4789, 4795,
     4807, 4760, 4809, 4812, 4826, 4829, 4683, 4831, 4843, 5230,
     4870, 4879, 4888, 4897, 4902, 4908, 4913, 4919, 4924, 4930,
     4939, 4948, 4956, 4961, 4965, 4969, 4974, 4983, 4989, 4998,
     5004, 5013, 5022, 5031, 5040, 5049, 5058, 5067, 5076, 5085,

     5094, 5103, 5112, 5121, 5130, 5139, 5148, 5157, 5166, 5175,
     5184, 5193, 5202, 5211, 5220
    } ;

static yyconst short int yy_def[916] =
    {   0,
      870,    1,  870,    3,  871,  871,  872,  872,  873,  873,
      874,  874,  870,  870,  870,  870,  870,  875,  876,  870,
      875,  870,  875,  875,  875,  875,  875,  870,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      877,  878,  870,  877,  877,  877,  877,  877,  877,  870,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  879,  880,
      870,  879,  870,  879,  879,  879,  879,  879,  870,  879,
      870,  881,  870,  870,  882,  870,  870,  883,  870,  870,

      870,  870,  870,  870,  870,  870,  875,  876,  875,  884,
      876,  876,  875,  875,  875,  870,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  877,  878,  877,
      877,  885,  878,  878,  877,  877,  877,  877,  877,  870,

      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,   67,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  879,  880,  879,  886,  880,  880,  879,  879,  870,
      870,  879,  870,  879,  881,  870,  882,  883,  870,  875,
      887,  888,  888,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,

      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  877,  889,  890,  890,  877,  877,  877,
      877,   67,  877,  877,  877,   67,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  879,  891,  892,
      892,  870,  870,  887,  887,  893,  263,  894,  895,  263,

      896,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  889,  889,  347,  897,  347,
      898,  347,  899,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,

      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  891,  891,  391,  900,
      901,  391,  902,  870,  870,  894,  894,  903,  895,  904,
      539,  905,  893,  263,  906,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,

      875,  875,  875,  875,  875,  897,  897,  898,  907,  608,
      608,  908,  893,  347,  909,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  900,  900,
      901,  910,  651,  911,  893,  391,  912,  904,  904,  903,
      539,  913,  906,  906,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,

      875,  875,  875,  875,  875,  875,  875,  875,  907,  907,
      903,  608,  914,  909,  909,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      910,  910,  903,  651,  915,  912,  912,  913,  913,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  914,  914,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  915,

      915,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  875,  875,  875,  875,  875,  875,  875,
      875,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  875,  875,  877,  877,  877,  877,  877,  877,  877,
      877,  875,  877,  877,  877,  877,  875,  877,  877,    0,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,

      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870
    } ;

static yyconst short int yy_nxt[5286] =
    {   0,
       14,   15,   16,   14,   17,   15,   15,   18,   19,   20,
       20,   21,   18,   22,   23,   24,   25,   26,   18,   18,
       18,   20,   18,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   18,   36,   18,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   18,
       18,   22,   22,   18,   18,   14,   15,   16,   14,   17,
       15,   15,   51,   52,   53,   53,   54,   55,   53,   56,
       55,   51,   51,   57,   58,   51,   53,   51,   59,   60,
       61,   51,   62,   63,   64,   65,   66,   51,   67,   68,
       51,   69,   70,   51,   71,   72,   51,   73,   74,   75,

       76,   77,   51,   51,   51,   51,   53,   53,   78,   51,
       14,   15,   16,   14,   17,   15,   15,  256,   80,   81,
       81,   82,  256,   83,   84,   85,  397,   86,   87,  529,
      543,   81,  256,   88,   89,   93,   94,  256,   94,   94,
       93,   93,   94,   90,   94,   94,   93,   96,  743,   96,
       96,   96,  106,   96,   96,  478,  106,  106,  259,  259,
      711,   91,   91,   14,   15,   16,   14,   17,   15,   15,
      397,   80,   81,   81,   82,  108,   83,   84,   85,  107,
       86,   87,  108,  660,   81,  113,   88,   89,  108,  251,
      109,  110,  108,  112,  114,  108,   90,  109,  110,  251,

      259,  259,  529,  109,  110,  109,  109,  109,  110,  109,
      109,  110,  527,  108,   91,   91,   97,  109,   99,   97,
      100,   97,  478,  188,   97,  101,  102,  108,  109,  116,
      108,  478,  476,  397,  108,  115,  115,  194,  103,  242,
      108,  394,  109,  110,  535,  109,  110,  109,  109,  109,
      110,  534,  117,  247,  118,  109,  110,  246,  135,  136,
      193,  137,  119,  107,  138,  143,  139,  104,  105,  108,
       97,   97,  108,   99,   97,  100,   97,  112,  111,   97,
      101,  102,  108,  870,  109,  110,  106,  109,  110,  108,
      106,  106,  243,  103,  870,  870,  870,  109,  110,  108,

      120,  870,  123,  121,  109,  110,  122,  244,  245,  165,
      124,  125,  108,  126,  109,  110,  127,  108,  186,  108,
      128,  870,  104,  105,  108,   97,  187,  109,  110,  870,
      129,  870,  109,  110,  109,  110,  130,  107,  140,  109,
      110,  144,  189,  131,  870,  132,  133,  142,  108,  190,
      870,  112,  134,  141,  188,  145,  108,  191,  192,  146,
      108,  870,  870,  109,  110,  147,  148,  108,  194,  149,
      870,  109,  110,  150,  155,  109,  110,  152,  156,  151,
      108,  870,  109,  110,  160,  157,  158,  108,  159,  478,
      529,  153,  108,  613,  655,  109,  110,  154,  161,  108,

      870,  162,  109,  110,  163,  870,  164,  109,  110,  166,
      180,  177,  178,  167,  109,  110,  108,  870,  870,  189,
      168,  179,  195,  184,  185,  188,  190,  870,  243,  169,
      108,  109,  110,  181,  191,  192,  242,  182,  870,  194,
      189,  183,  189,  244,  245,  109,  110,  190,  870,  190,
      247,  170,  198,  870,  171,  191,  192,  191,  192,  172,
      870,  173,  189,  870,  174,  870,  175,  176,  196,  190,
      870,  870,  189,  870,  197,  189,  870,  191,  192,  190,
      243,  870,  190,  248,  199,  191,  191,  191,  192,  191,
      191,  200,  189,  870,  189,  244,  245,  191,  189,  190,

      870,  190,  242,  870,  189,  190,  243,  191,  192,  191,
      192,  190,  249,  191,  192,  215,  247,  209,  189,  191,
      192,  244,  245,  870,  870,  190,  260,  191,  191,  201,
      189,  870,  189,  191,  192,  213,  221,  190,  214,  190,
      395,  243,  870,  870,  870,  191,  192,  191,  192,  252,
      252,  202,  870,  189,  870,  870,  244,  245,  203,  204,
      190,  205,  210,  206,  207,  211,  208,  344,  191,  192,
      222,  189,  212,  189,  223,  870,  189,  870,  190,  870,
      190,  477,  870,  190,  870,  243,  191,  192,  191,  192,
      388,  191,  192,  216,  224,  217,  231,  225,  189,  232,

      244,  253,  870,  218,  528,  190,  870,  260,  219,  220,
      189,  226,  870,  191,  192,  870,  227,  190,  243,  870,
      189,  395,  189,  870,  189,  191,  192,  190,  344,  190,
      228,  190,  388,  244,  245,  191,  192,  191,  192,  191,
      192,  229,  477,  237,  230,  108,  528,  189,  254,  870,
      870,  233,  234,  238,  190,  870,  235,  236,  189,  239,
      109,  110,  191,  192,  240,  190,  396,  870,  111,  396,
      241,  870,  111,  191,  192,  250,  251,  250,  250,  250,
      250,  870,  243,  244,  244,  108,  870,  244,  870,  261,
      109,  109,  870,  108,  109,  244,  262,  244,  245,  108,

      109,  116,  109,  108,  870,  263,  108,  870,  109,  110,
      870,  115,  115,  870,  109,  110,  109,  109,  109,  110,
      109,  109,  110,  108,  870,  244,  244,  108,  109,  108,
      870,  870,  109,  109,  870,  108,  870,  264,  109,  110,
      870,  870,  109,  110,  109,  110,  870,  108,  870,  268,
      109,  110,  266,  108,  870,  267,  269,  870,  109,  109,
      108,  265,  109,  110,  108,  870,  870,  108,  109,  110,
      108,  870,  270,  870,  108,  109,  110,  870,  108,  109,
      110,  271,  109,  110,  272,  109,  110,  108,  870,  109,
      110,  277,  278,  109,  110,  273,  274,  275,  108,  870,

      870,  870,  109,  110,  276,  870,  108,  870,  108,  279,
      870,  108,  870,  109,  110,  870,  280,  108,  870,  870,
      281,  109,  110,  109,  110,  870,  109,  110,  108,  283,
      284,  870,  109,  110,  286,  108,  870,  108,  870,  108,
      870,  282,  870,  109,  110,  108,  870,  285,  870,  108,
      109,  110,  109,  110,  109,  110,  108,  870,  289,  287,
      109,  110,  108,  177,  109,  110,  290,  108,  870,  288,
      870,  109,  110,  108,  870,  291,  870,  109,  110,  108,
      870,  108,  109,  110,  108,  293,  108,  870,  109,  110,
      294,  108,  292,  108,  109,  110,  109,  110,  870,  109,

      110,  109,  110,  870,  295,  108,  109,  110,  109,  110,
      108,  870,  108,  300,  108,  298,  870,  296,  108,  297,
      109,  110,  108,  870,  870,  109,  110,  109,  110,  109,
      110,  299,  108,  109,  110,  108,  870,  109,  110,  301,
      177,  303,  108,  870,  302,  108,  870,  109,  110,  305,
      109,  110,  870,  108,  304,  870,  108,  109,  110,  108,
      109,  110,  870,  870,  870,  870,  870,  108,  109,  110,
      306,  109,  110,  870,  109,  110,  307,  309,  308,  313,
      108,  310,  109,  110,  108,  870,  108,  311,  312,  870,
      108,  870,  314,  108,  870,  109,  110,  108,  870,  109,

      110,  109,  110,  870,  316,  109,  110,  870,  109,  110,
      870,  108,  109,  110,  322,  108,  315,  870,  321,  317,
      108,  320,  318,  319,  325,  323,  109,  110,  870,  108,
      109,  110,  108,  324,  870,  109,  110,  108,  870,  870,
      870,  328,  326,  108,  109,  110,  329,  109,  110,  327,
      330,  870,  109,  110,  108,  331,  870,  870,  109,  110,
      108,  870,  108,  870,  108,  870,  332,  108,  870,  109,
      110,  334,  333,  870,  108,  109,  110,  109,  110,  109,
      110,  870,  109,  110,  108,  335,  108,  870,  338,  109,
      110,  108,  870,  870,  870,  339,  336,  189,  337,  109,

      110,  109,  110,  342,  190,  340,  109,  110,  189,  870,
      189,  870,  191,  192,  870,  190,  396,  190,  193,  396,
      341,  343,  193,  191,  192,  191,  200,  345,  191,  191,
      189,  870,  191,  346,  870,  189,  870,  190,  870,  870,
      191,  347,  190,  870,  870,  191,  192,  189,  870,  189,
      191,  192,  189,  870,  190,  870,  190,  191,  191,  190,
      870,  191,  191,  192,  191,  192,  189,  191,  192,  191,
      191,  191,  189,  190,  243,  870,  189,  870,  870,  190,
      870,  191,  192,  190,  870,  870,  870,  191,  192,  244,
      245,  191,  192,  349,  870,  189,  870,  870,  870,  191,

      191,  348,  190,  870,  870,  206,  870,  189,  870,  189,
      191,  192,  189,  350,  190,  396,  190,  246,  396,  190,
      870,  246,  191,  192,  191,  192,  189,  191,  192,  870,
      870,  189,  870,  190,  870,  870,  351,  352,  190,  870,
      353,  191,  192,  189,  870,  189,  191,  192,  870,  189,
      190,  870,  190,  870,  870,  189,  190,  354,  191,  192,
      191,  192,  190,  356,  191,  192,  189,  355,  189,  870,
      191,  192,  870,  190,  870,  190,  870,  870,  870,  870,
      189,  191,  192,  191,  192,  357,  361,  190,  870,  358,
      362,  189,  870,  189,  870,  191,  192,  359,  190,  870,

      190,  363,  870,  189,  360,  870,  191,  192,  191,  192,
      190,  243,  364,  189,  870,  189,  870,  189,  191,  192,
      190,  870,  190,  243,  190,  870,  244,  253,  191,  192,
      191,  192,  191,  192,  365,  367,  189,  870,  244,  245,
      189,  870,  538,  190,  111,  538,  366,  190,  111,  870,
      870,  191,  192,  368,  189,  191,  192,  188,  369,  188,
      870,  190,  870,  870,  189,  870,  370,  188,  189,  191,
      192,  190,  371,  372,  375,  190,  870,  373,  189,  191,
      192,  189,  870,  191,  192,  190,  870,  870,  190,  870,
      374,  870,  189,  191,  192,  870,  191,  192,  189,  190,

      870,  870,  378,  376,  189,  190,  377,  191,  192,  189,
      870,  190,  379,  191,  192,  380,  190,  870,  870,  191,
      192,  189,  870,  870,  191,  192,  189,  870,  190,  870,
      382,  870,  189,  190,  870,  870,  191,  192,  381,  190,
      870,  191,  192,  189,  384,  189,  870,  191,  192,  189,
      190,  396,  190,  394,  396,  383,  190,  394,  191,  192,
      191,  192,  189,  870,  191,  192,  385,  870,  870,  190,
      386,  389,  244,  244,  243,  870,  244,  191,  192,  243,
      391,  870,  390,  387,  244,  538,  870,  193,  538,  244,
      245,  193,  870,  870,  244,  245,  250,  251,  250,  250,

      250,  250,  243,  870,  244,  244,  392,  108,  244,  393,
      252,  252,  108,  870,  244,  244,  244,  244,  245,  108,
      870,  870,  109,  110,  108,  870,  870,  109,  110,  108,
      396,  870,  870,  396,  109,  110,  111,  403,  397,  109,
      110,  404,  870,  870,  109,  110,  244,  244,  396,  108,
      870,  396,  537,  402,  870,  870,  398,  396,  396,  108,
      870,  396,  870,  108,  109,  110,  108,  870,  399,  396,
      108,  400,  401,  108,  109,  110,  406,  108,  109,  110,
      108,  109,  110,  408,  870,  109,  110,  870,  109,  110,
      405,  407,  109,  110,  870,  109,  110,  108,  870,  396,

      396,  396,  410,  108,  396,  411,  870,  870,  409,  398,
      396,  396,  109,  110,  396,  108,  412,  413,  109,  110,
      108,  399,  396,  416,  400,  401,  108,  870,  108,  870,
      109,  110,  870,  414,  108,  109,  110,  870,  870,  108,
      870,  109,  110,  109,  110,  415,  108,  418,  108,  109,
      110,  108,  396,  396,  109,  110,  108,  417,  870,  870,
      419,  109,  110,  109,  110,  108,  109,  110,  108,  422,
      108,  109,  110,  108,  421,  108,  177,  108,  420,  870,
      109,  110,  870,  109,  110,  109,  110,  423,  109,  110,
      109,  110,  109,  110,  424,  428,  108,  870,  429,  108,

      870,  427,  426,  108,  870,  108,  870,  425,  108,  870,
      108,  109,  110,  108,  109,  110,  430,  870,  109,  110,
      109,  110,  432,  109,  110,  109,  110,  108,  109,  110,
      108,  431,  434,  108,  870,  870,  870,  108,  870,  433,
      108,  870,  109,  110,  870,  109,  110,  108,  109,  110,
      435,  438,  109,  110,  108,  109,  110,  108,  870,  437,
      439,  436,  109,  110,  108,  870,  870,  108,  870,  109,
      110,  108,  109,  110,  870,  440,  108,  870,  870,  109,
      110,  442,  109,  110,  443,  870,  109,  110,  108,  441,
      108,  109,  110,  445,  108,  870,  108,  444,  108,  870,

      447,  108,  870,  109,  110,  109,  110,  446,  108,  109,
      110,  109,  110,  109,  110,  108,  109,  110,  870,  449,
      870,  108,  452,  109,  110,  108,  448,  870,  108,  870,
      109,  110,  108,  450,  870,  451,  109,  110,  108,  870,
      109,  110,  453,  109,  110,  108,  454,  109,  110,  456,
      870,  108,  870,  109,  110,  455,  108,  870,  108,  870,
      109,  110,  870,  870,  108,  177,  109,  110,  108,  870,
      108,  109,  110,  109,  110,  870,  108,  457,  870,  109,
      110,  870,  870,  109,  110,  109,  110,  458,  870,  108,
      870,  109,  110,  870,  460,  459,  461,  464,  108,  463,

      108,  465,  108,  462,  109,  110,  108,  870,  466,  870,
      108,  870,  108,  109,  110,  109,  110,  109,  110,  870,
      467,  109,  110,  108,  469,  109,  110,  109,  110,  870,
      108,  870,  870,  108,  870,  468,  189,  870,  109,  110,
      472,  470,  870,  190,  471,  109,  110,  473,  109,  110,
      870,  191,  192,  189,  870,  870,  870,  189,  475,  396,
      190,  476,  396,  870,  190,  476,  474,  396,  191,  192,
      396,  870,  191,  192,  870,  479,  396,  396,  189,  870,
      396,  870,  480,  870,  484,  190,  870,  481,  396,  189,
      482,  483,  485,  191,  192,  189,  190,  188,  870,  487,

      870,  189,  190,  870,  191,  192,  243,  188,  190,  870,
      191,  192,  488,  188,  870,  870,  191,  192,  396,  396,
      396,  244,  245,  396,  486,  870,  870,  870,  479,  396,
      396,  189,  870,  396,  870,  480,  108,  490,  190,  108,
      481,  396,  870,  482,  483,  870,  191,  192,  188,  870,
      491,  109,  110,  189,  109,  110,  870,  366,  188,  492,
      190,  870,  870,  493,  494,  489,  495,  870,  191,  192,
      189,  396,  396,  189,  496,  546,  189,  190,  870,  870,
      190,  870,  870,  190,  870,  191,  192,  870,  191,  192,
      189,  191,  192,  870,  189,  870,  189,  190,  870,  497,

      500,  190,  498,  190,  870,  191,  192,  870,  870,  191,
      192,  191,  192,  189,  501,  499,  189,  870,  870,  870,
      190,  870,  870,  190,  870,  502,  503,  189,  191,  192,
      189,  191,  192,  189,  190,  870,  870,  190,  870,  870,
      190,  504,  191,  192,  870,  191,  192,  870,  191,  192,
      505,  506,  189,  870,  507,  189,  870,  189,  870,  190,
      870,  870,  190,  108,  190,  870,  870,  191,  192,  189,
      191,  192,  191,  192,  189,  870,  190,  870,  109,  110,
      189,  190,  870,  870,  191,  192,  509,  190,  508,  191,
      192,  511,  510,  189,  870,  191,  192,  870,  189,  550,

      190,  513,  870,  189,  512,  190,  870,  870,  191,  192,
      190,  870,  870,  191,  192,  189,  870,  514,  191,  192,
      189,  870,  190,  870,  870,  189,  870,  190,  870,  870,
      191,  192,  190,  870,  516,  191,  192,  870,  189,  870,
      191,  192,  870,  189,  515,  190,  870,  870,  189,  518,
      190,  870,  870,  191,  192,  190,  517,  870,  191,  192,
      189,  870,  520,  191,  192,  521,  189,  190,  108,  870,
      189,  870,  870,  190,  519,  191,  192,  190,  870,  522,
      870,  191,  192,  109,  110,  191,  192,  189,  870,  108,
      870,  870,  108,  557,  190,  523,  525,  870,  108,  524,

      108,  870,  191,  192,  109,  110,  870,  109,  110,  870,
      870,  870,  870,  109,  110,  109,  110,  870,  870,  870,
      870,  870,  526,  396,  547,  549,  396,  548,  870,  870,
      870,  530,  396,  396,  551,  108,  396,  108,  870,  870,
      108,  870,  108,  531,  396,  108,  532,  533,  870,  870,
      109,  110,  109,  110,  553,  109,  110,  109,  110,  870,
      109,  110,  108,  556,  870,  554,  108,  870,  870,  552,
      558,  555,  108,  870,  396,  396,  396,  109,  110,  396,
      870,  109,  110,  870,  530,  396,  396,  109,  110,  396,
      108,  870,  108,  870,  108,  561,  531,  396,  559,  532,

      533,  108,  870,  560,  108,  109,  110,  109,  110,  109,
      110,  870,  870,  870,  870,  870,  109,  110,  562,  109,
      110,  870,  870,  870,  870,  108,  870,  396,  396,  538,
      108,  564,  538,  108,  565,  563,  870,  540,  538,  538,
      109,  110,  538,  870,  108,  109,  110,  567,  109,  110,
      538,  870,  541,  542,  108,  870,  108,  870,  108,  109,
      110,  566,  108,  870,  870,  870,  870,  568,  569,  109,
      110,  109,  110,  109,  110,  870,  870,  109,  110,  870,
      538,  538,  396,  108,  870,  396,  572,  870,  870,  571,
      545,  400,  400,  570,  108,  400,  108,  870,  109,  110,

      108,  870,  870,  400,  108,  396,  396,  108,  870,  109,
      110,  109,  110,  108,  870,  109,  110,  870,  573,  109,
      110,  108,  109,  110,  108,  574,  870,  870,  109,  110,
      577,  108,  575,  400,  400,  108,  109,  110,  576,  109,
      110,  870,  578,  108,  870,  870,  109,  110,  108,  870,
      109,  110,  108,  870,  108,  870,  580,  108,  109,  110,
      108,  579,  870,  109,  110,  870,  108,  109,  110,  109,
      110,  108,  109,  110,  108,  109,  110,  870,  583,  582,
      584,  109,  110,  108,  870,  108,  109,  110,  581,  109,
      110,  108,  870,  586,  870,  870,  870,  870,  109,  110,

      109,  110,  585,  108,  870,  108,  109,  110,  588,  870,
      589,  108,  587,  108,  870,  870,  108,  870,  109,  110,
      109,  110,  870,  870,  590,  108,  109,  110,  109,  110,
      591,  109,  110,  108,  870,  870,  870,  108,  320,  108,
      109,  110,  108,  870,  870,  108,  870,  870,  109,  110,
      108,  592,  109,  110,  109,  110,  108,  109,  110,  593,
      109,  110,  596,  108,  870,  109,  110,  108,  594,  108,
      870,  109,  110,  108,  870,  595,  108,  598,  109,  110,
      597,  870,  109,  110,  109,  110,  108,  870,  109,  110,
      108,  109,  110,  870,  108,  870,  108,  602,  870,  870,

      600,  109,  110,  870,  599,  109,  110,  603,  601,  109,
      110,  109,  110,  604,  396,  870,  189,  396,  605,  870,
      193,  870,  478,  190,  870,  870,  870,  189,  870,  870,
      870,  191,  192,  870,  190,  616,  607,  538,  108,  870,
      538,  189,  191,  192,  870,  609,  538,  538,  190,  870,
      538,  870,  610,  109,  110,  870,  191,  192,  538,  189,
      611,  612,  617,  870,  870,  189,  190,  870,  870,  870,
      189,  870,  190,  870,  191,  192,  189,  190,  618,  108,
      191,  192,  870,  190,  619,  191,  192,  870,  538,  538,
      396,  191,  192,  396,  109,  110,  870,  870,  615,  482,

      482,  620,  189,  482,  669,  189,  870,  621,  189,  190,
      108,  482,  190,  396,  396,  190,  870,  191,  192,  870,
      191,  192,  870,  191,  192,  109,  110,  870,  189,  870,
      668,  366,  189,  870,  366,  190,  870,  366,  622,  190,
      870,  482,  482,  191,  192,  870,  189,  191,  192,  189,
      870,  396,  366,  190,  396,  870,  190,  246,  870,  529,
      870,  191,  192,  189,  191,  192,  624,  189,  870,  538,
      190,  246,  538,  650,  190,  246,  623,  189,  191,  192,
      189,  870,  191,  192,  190,  870,  870,  190,  625,  870,
      189,  870,  191,  192,  189,  191,  192,  190,  626,  870,

      189,  190,  870,  870,  870,  191,  192,  190,  870,  191,
      192,  627,  189,  870,  870,  191,  192,  189,  870,  190,
      870,  870,  628,  870,  190,  870,  870,  191,  192,  631,
      629,  189,  191,  192,  189,  870,  189,  630,  190,  870,
      870,  190,  108,  190,  870,  632,  191,  192,  189,  191,
      192,  191,  192,  189,  870,  190,  870,  109,  110,  189,
      190,  870,  870,  191,  192,  634,  190,  870,  191,  192,
      189,  633,  189,  635,  191,  192,  189,  190,  396,  190,
      527,  396,  870,  190,  527,  191,  192,  191,  192,  636,
      870,  191,  192,  189,  870,  189,  870,  189,  870,  870,

      190,  870,  190,  637,  190,  638,  870,  870,  191,  192,
      191,  192,  191,  192,  639,  189,  640,  870,  870,  189,
      870,  189,  190,  870,  870,  189,  190,  108,  190,  870,
      191,  192,  190,  641,  191,  192,  191,  192,  870,  189,
      191,  192,  109,  110,  643,  189,  190,  108,  665,  189,
      642,  647,  190,  645,  191,  192,  190,  644,  666,  189,
      191,  192,  109,  110,  191,  192,  190,  108,  667,  870,
      646,  870,  648,  870,  191,  192,  538,  870,  870,  538,
      870,  870,  109,  110,  652,  538,  538,  396,  538,  538,
      396,  538,  870,  111,  111,  397,  539,  538,  870,  653,

      654,  400,  400,  108,  870,  400,  108,  870,  396,  537,
      659,  396,  870,  400,  394,  870,  544,  870,  109,  110,
      108,  109,  110,  870,  870,  108,  870,  538,  538,  396,
      664,  108,  396,  670,  671,  109,  110,  657,  532,  532,
      109,  110,  532,  400,  400,  108,  109,  110,  673,  108,
      532,  108,  396,  396,  870,  672,  674,  108,  870,  870,
      109,  110,  108,  870,  109,  110,  109,  110,  870,  870,
      676,  108,  109,  110,  870,  675,  870,  109,  110,  870,
      532,  532,  538,  677,  108,  538,  109,  110,  870,  870,
      540,  538,  538,  108,  870,  538,  678,  870,  870,  109,

      110,  108,  870,  538,  679,  541,  542,  870,  109,  110,
      108,  870,  108,  680,  108,  870,  109,  110,  870,  870,
      870,  870,  681,  870,  108,  109,  110,  109,  110,  109,
      110,  870,  870,  538,  538,  538,  108,  683,  538,  109,
      110,  870,  870,  662,  541,  541,  682,  108,  541,  108,
      870,  109,  110,  108,  870,  870,  541,  108,  538,  538,
      108,  870,  109,  110,  109,  110,  108,  684,  109,  110,
      870,  685,  109,  110,  108,  109,  110,  870,  687,  870,
      108,  109,  110,  870,  870,  108,  541,  541,  108,  109,
      110,  108,  870,  686,  689,  109,  110,  870,  108,  688,

      109,  110,  870,  109,  110,  108,  109,  110,  690,  108,
      870,  108,  870,  109,  110,  691,  692,  694,  108,  693,
      109,  110,  108,  870,  109,  110,  109,  110,  870,  108,
      870,  870,  696,  109,  110,  108,  870,  109,  110,  695,
      108,  870,  108,  697,  109,  110,  698,  108,  870,  870,
      109,  110,  108,  870,  108,  109,  110,  109,  110,  700,
      870,  870,  109,  110,  870,  699,  108,  109,  110,  109,
      110,  108,  702,  108,  870,  108,  701,  108,  870,  703,
      108,  109,  110,  108,  870,  870,  109,  110,  109,  110,
      109,  110,  109,  110,  705,  109,  110,  870,  109,  110,

      704,  108,  870,  108,  870,  108,  870,  396,  108,  870,
      396,  870,  706,  193,  870,  478,  109,  110,  109,  110,
      109,  110,  538,  109,  110,  538,  189,  707,  193,  607,
      608,  482,  482,  190,  538,  482,  394,  538,  870,  870,
      394,  191,  192,  482,  710,  396,  708,  538,  396,  870,
      538,  476,  870,  614,  870,  609,  538,  538,  870,  870,
      538,  870,  610,  870,  870,  189,  870,  715,  538,  189,
      611,  612,  190,  482,  482,  870,  190,  108,  870,  189,
      191,  192,  870,  870,  191,  192,  190,  870,  870,  870,
      716,  108,  109,  110,  191,  192,  870,  870,  538,  538,

      538,  108,  718,  538,  189,  717,  109,  110,  713,  611,
      611,  190,  751,  611,  870,  189,  109,  110,  189,  191,
      192,  611,  190,  538,  538,  190,  870,  761,  189,  870,
      191,  192,  752,  191,  192,  190,  870,  870,  719,  189,
      870,  870,  366,  191,  192,  870,  190,  108,  720,  189,
      870,  611,  611,  189,  191,  192,  190,  870,  870,  870,
      190,  870,  109,  110,  191,  192,  189,  272,  191,  192,
      189,  870,  870,  190,  870,  721,  108,  190,  108,  722,
      870,  191,  192,  189,  870,  191,  192,  723,  870,  189,
      190,  109,  110,  109,  110,  189,  190,  724,  191,  192,

      189,  725,  190,  757,  191,  192,  189,  190,  726,  727,
      191,  192,  189,  190,  870,  191,  192,  189,  870,  190,
      870,  191,  192,  189,  190,  870,  870,  191,  192,  189,
      190,  728,  191,  192,  730,  729,  190,  108,  191,  192,
      189,  870,  189,  870,  191,  192,  870,  190,  108,  190,
      870,  870,  109,  110,  189,  191,  192,  191,  192,  731,
      732,  190,  734,  109,  110,  189,  870,  189,  870,  191,
      192,  733,  190,  735,  190,  870,  870,  189,  753,  870,
      191,  192,  191,  192,  190,  870,  870,  870,  189,  870,
      189,  870,  191,  192,  736,  190,  538,  190,  476,  538,

      870,  189,  476,  191,  192,  191,  192,  738,  190,  737,
      108,  870,  189,  870,  189,  870,  191,  192,  870,  190,
      870,  190,  870,  870,  870,  109,  110,  191,  192,  191,
      192,  396,  870,  870,  396,  739,  740,  246,  538,  529,
      108,  538,  870,  870,  246,  870,  651,  532,  532,  870,
      870,  532,  870,  650,  538,  109,  110,  538,  870,  532,
      742,  754,  652,  538,  538,  396,  538,  538,  396,  538,
      108,  527,  111,  656,  539,  538,  870,  653,  654,  541,
      541,  870,  870,  541,  870,  109,  110,  747,  659,  532,
      532,  541,  538,  108,  870,  538,  396,  108,  394,  396,

      661,  870,  394,  870,  544,  538,  538,  538,  109,  110,
      538,  870,  109,  110,  749,  745,  653,  653,  664,  108,
      653,  541,  541,  108,  870,  756,  108,  750,  653,  108,
      538,  538,  870,  870,  109,  110,  108,  870,  109,  110,
      755,  109,  110,  870,  109,  110,  108,  759,  760,  108,
      870,  109,  110,  108,  870,  108,  870,  762,  653,  653,
      758,  109,  110,  108,  109,  110,  108,  870,  109,  110,
      109,  110,  108,  870,  765,  870,  763,  108,  109,  110,
      108,  109,  110,  870,  108,  764,  108,  109,  110,  870,
      766,  767,  109,  110,  108,  109,  110,  108,  870,  109,

      110,  109,  110,  108,  768,  769,  870,  870,  108,  109,
      110,  771,  109,  110,  108,  870,  108,  870,  109,  110,
      870,  108,  770,  109,  110,  108,  870,  108,  870,  109,
      110,  109,  110,  108,  870,  772,  109,  110,  108,  870,
      109,  110,  109,  110,  108,  870,  611,  611,  109,  110,
      611,  108,  870,  109,  110,  108,  870,  870,  611,  109,
      110,  773,  870,  774,  870,  776,  109,  110,  870,  538,
      109,  110,  538,  538,  775,  193,  538,  608,  870,  476,
      870,  712,  870,  108,  396,  870,  189,  396,  611,  611,
      476,  710,  614,  190,  870,  778,  870,  189,  109,  110,

      189,  191,  192,  779,  190,  870,  715,  190,  802,  870,
      189,  870,  191,  192,  780,  191,  192,  190,  870,  870,
      189,  870,  870,  189,  665,  191,  192,  190,  870,  870,
      190,  870,  870,  189,  870,  191,  192,  781,  191,  192,
      190,  870,  870,  189,  870,  783,  189,  782,  191,  192,
      190,  870,  870,  190,  870,  870,  189,  870,  191,  192,
      189,  191,  192,  190,  108,  870,  870,  190,  870,  870,
      189,  191,  192,  784,  870,  191,  192,  190,  870,  109,
      110,  870,  189,  870,  189,  191,  192,  870,  870,  190,
      870,  190,  785,  870,  189,  787,  786,  191,  192,  191,

      192,  190,  108,  788,  189,  789,  189,  870,  189,  191,
      192,  190,  870,  190,  870,  190,  870,  109,  110,  191,
      192,  191,  192,  191,  192,  189,  870,  870,  189,  870,
      790,  870,  190,  791,  108,  190,  870,  870,  189,  870,
      191,  192,  792,  191,  192,  190,  793,  870,  870,  109,
      110,  870,  189,  191,  192,  189,  870,  870,  189,  190,
      870,  870,  190,  870,  794,  190,  795,  191,  192,  189,
      191,  192,  870,  191,  192,  796,  190,  653,  653,  870,
      538,  653,  108,  538,  191,  192,  246,  870,  651,  653,
      797,  870,  870,  538,  798,  870,  538,  109,  110,  527,

      799,  744,  742,  396,  538,  870,  396,  538,  108,  527,
      394,  656,  661,  108,  870,  801,  108,  870,  108,  653,
      653,  803,  108,  109,  110,  747,  749,  870,  109,  110,
      108,  109,  110,  109,  110,  108,  870,  109,  110,  807,
      870,  870,  804,  805,  108,  109,  110,  806,  108,  870,
      109,  110,  108,  870,  870,  108,  809,  870,  870,  109,
      110,  108,  870,  109,  110,  108,  808,  109,  110,  810,
      109,  110,  108,  811,  108,  870,  109,  110,  870,  108,
      109,  110,  108,  870,  108,  870,  108,  109,  110,  109,
      110,  870,  870,  813,  109,  110,  108,  109,  110,  109,

      110,  109,  110,  108,  870,  108,  870,  812,  870,  870,
      814,  109,  110,  870,  870,  870,  870,  815,  109,  110,
      109,  110,  538,  816,  189,  538,  189,  870,  476,  870,
      712,  190,  870,  190,  108,  870,  189,  870,  189,  191,
      192,  191,  192,  190,  778,  190,  870,  870,  189,  109,
      110,  191,  192,  191,  192,  190,  870,  820,  189,  870,
      817,  189,  818,  191,  192,  190,  870,  870,  190,  870,
      819,  870,  189,  191,  192,  870,  191,  192,  821,  190,
      870,  870,  822,  870,  189,  870,  189,  191,  192,  189,
      870,  190,  538,  190,  527,  538,  190,  870,  527,  191,

      192,  191,  192,  189,  191,  192,  825,  870,  189,  870,
      190,  870,  870,  823,  824,  190,  870,  870,  191,  192,
      826,  189,  870,  191,  192,  189,  870,  189,  190,  870,
      870,  189,  190,  870,  190,  870,  191,  192,  190,  870,
      191,  192,  191,  192,  189,  870,  191,  192,  870,  189,
      870,  190,  829,  827,  189,  828,  190,  870,  870,  191,
      192,  190,  108,  870,  191,  192,  189,  870,  538,  191,
      192,  538,  108,  190,  527,  870,  744,  109,  110,  108,
      870,  191,  192,  834,  831,  830,  870,  109,  110,  832,
      801,  108,  870,  108,  109,  110,  108,  833,  108,  870,

      870,  108,  835,  108,  870,  870,  109,  110,  109,  110,
      108,  109,  110,  109,  110,  836,  109,  110,  109,  110,
      108,  837,  108,  838,  108,  109,  110,  108,  870,  870,
      870,  839,  108,  870,  189,  109,  110,  109,  110,  109,
      110,  190,  109,  110,  870,  189,  870,  109,  110,  191,
      192,  189,  190,  870,  870,  840,  870,  189,  190,  842,
      191,  192,  189,  841,  190,  870,  191,  192,  844,  190,
      843,  870,  191,  192,  189,  870,  189,  191,  192,  870,
      189,  190,  870,  190,  870,  648,  362,  190,  870,  191,
      192,  191,  192,  845,  189,  191,  192,  870,  189,  870,

      189,  190,  870,  648,  846,  190,  870,  190,  870,  191,
      192,  189,  870,  191,  192,  191,  192,  870,  190,  108,
      870,  189,  870,  870,  847,  189,  191,  192,  190,  870,
      848,  189,  190,  870,  109,  110,  191,  192,  190,  870,
      191,  192,  189,  870,  108,  870,  191,  192,  189,  190,
      108,  849,  850,  108,  665,  190,  108,  191,  192,  109,
      110,  108,  870,  191,  192,  109,  110,  870,  109,  110,
      108,  109,  110,  189,  870,  851,  109,  110,  870,  571,
      190,  870,  852,  189,  870,  109,  110,  189,  191,  192,
      190,  108,  870,  189,  190,  853,  870,  189,  191,  192,

      190,  870,  191,  192,  190,  870,  109,  110,  191,  192,
      189,  854,  191,  192,  870,  189,  870,  190,  870,  870,
      870,  855,  190,  856,  857,  191,  192,  189,  870,  870,
      191,  192,  189,  858,  190,  859,  860,  189,  870,  190,
      108,  870,  191,  192,  190,  108,  870,  191,  192,  870,
      648,  870,  191,  192,  870,  109,  110,  189,  870,  870,
      109,  110,  870,  870,  190,  870,  870,  861,  108,  870,
      189,  870,  191,  192,  189,  691,  862,  190,  863,  870,
      189,  190,  870,  109,  110,  191,  192,  190,  870,  191,
      192,  864,  870,  189,  870,  191,  192,  189,  867,  865,

      190,  870,  870,  189,  190,  870,  870,  870,  191,  192,
      190,  870,  191,  192,  489,  189,  866,  189,  191,  192,
      189,  870,  190,  870,  190,  870,  870,  190,  870,  870,
      191,  192,  191,  192,  189,  191,  192,  189,  870,  189,
      870,  190,  870,  870,  190,  870,  190,  870,  870,  191,
      192,  189,  191,  192,  191,  192,  870,  870,  190,  870,
      870,  870,  870,  870,  870,  868,  191,  192,  870,  869,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   98,   98,   98,

       98,   98,   98,   98,   98,   98,  107,  107,  870,  870,
      107,  111,  111,  111,  111,  111,  111,  188,  188,  870,
      870,  188,  193,  193,  193,  193,  193,  193,  242,  242,
      870,  870,  242,  246,  246,  246,  246,  246,  246,  255,
      870,  870,  870,  255,  255,  255,  255,  255,  257,  257,
      870,  257,  257,  257,  257,  257,  257,  258,  870,  258,
      258,  870,  870,  258,  258,  260,  260,  260,  260,  344,
      344,  344,  344,  388,  388,  388,  388,  394,  394,  394,
      394,  394,  394,  397,  870,  870,  870,  397,  397,  397,
      397,  397,  476,  476,  476,  476,  476,  476,  478,  870,

      870,  870,  478,  478,  478,  478,  478,  527,  527,  527,
      527,  527,  527,  529,  870,  870,  870,  529,  529,  529,
      529,  529,  396,  870,  870,  870,  396,  396,  396,  396,
      396,  536,  870,  870,  536,  536,  536,  536,  536,  536,
      539,  870,  870,  870,  539,  539,  539,  539,  539,  544,
      870,  870,  870,  544,  544,  544,  544,  544,  606,  870,
      870,  606,  606,  606,  606,  606,  606,  608,  870,  870,
      870,  608,  608,  608,  608,  608,  614,  870,  870,  870,
      614,  614,  614,  614,  614,  649,  870,  870,  649,  649,
      649,  649,  649,  649,  651,  870,  870,  870,  651,  651,

      651,  651,  651,  656,  870,  870,  870,  656,  656,  656,
      656,  656,  538,  870,  870,  870,  538,  538,  538,  538,
      538,  658,  870,  870,  658,  658,  658,  658,  658,  658,
      661,  870,  870,  870,  661,  661,  661,  661,  661,  663,
      870,  870,  663,  663,  663,  663,  663,  663,  709,  870,
      870,  709,  709,  709,  709,  709,  709,  712,  870,  870,
      870,  712,  712,  712,  712,  712,  714,  870,  870,  714,
      714,  714,  714,  714,  714,  741,  870,  870,  741,  741,
      741,  741,  741,  741,  744,  870,  870,  870,  744,  744,
      744,  744,  744,  746,  870,  870,  746,  746,  746,  746,

      746,  746,  748,  870,  870,  748,  748,  748,  748,  748,
      748,  777,  870,  870,  777,  777,  777,  777,  777,  777,
      800,  870,  870,  800,  800,  800,  800,  800,  800,   13,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870
    } ;

static yyconst short int yy_chk[5286] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,   93,    5,    5,
        5,    5,   93,    5,    5,    5,  400,    5,    5,  656,
      400,    5,  256,    5,    5,    7,    7,  256,    7,    7,
        7,    8,    8,    5,    8,    8,    8,    9,  653,    9,
        9,   10,   15,   10,   10,  614,   15,   15,  103,  103,
      611,    5,    5,    6,    6,    6,    6,    6,    6,    6,
      544,    6,    6,    6,    6,   18,    6,    6,    6,   19,
        6,    6,   21,  541,    6,   21,    6,    6,   23,  535,
       18,   18,   24,   19,   23,   25,    6,   21,   21,  534,

      103,  103,  529,   23,   23,   28,   28,   24,   24,   28,
       25,   25,  528,   27,    6,    6,   11,   28,   11,   11,
       11,   11,  480,   52,   11,   11,   11,   26,   27,   27,
       34,  478,  477,  397,   29,   26,   26,   52,   11,   80,
       37,  395,   26,   26,  393,   34,   34,   28,   28,   29,
       29,  392,   29,   80,   29,   37,   37,  247,   34,   34,
      194,   34,   29,  108,   34,   37,   34,   11,   11,   30,
       11,   12,   43,   12,   12,   12,   12,  108,  112,   12,
       12,   12,   31,   13,   30,   30,  106,   43,   43,   50,
      106,  106,   79,   12,    0,    0,    0,   31,   31,   32,

       30,    0,   31,   30,   50,   50,   30,   79,   79,   43,
       31,   31,   33,   31,   32,   32,   31,   36,   50,   35,
       32,    0,   12,   12,   38,   12,   50,   33,   33,    0,
       32,    0,   36,   36,   35,   35,   32,  111,   35,   38,
       38,   38,   51,   33,    0,   33,   33,   36,   39,   51,
        0,  111,   33,   35,  189,   38,   41,   51,   51,   38,
       40,    0,    0,   39,   39,   39,   39,   42,  189,   39,
        0,   41,   41,   39,   41,   40,   40,   40,   41,   39,
       47,    0,   42,   42,   42,   41,   41,   46,   41,  482,
      532,   40,   44,  482,  532,   47,   47,   40,   42,   49,

        0,   42,   46,   46,   42,    0,   42,   44,   44,   44,
       47,   46,   46,   44,   49,   49,   48,    0,    0,   54,
       44,   46,   54,   49,   49,  193,   54,    0,   87,   44,
       45,   48,   48,   48,   54,   54,  243,   48,    0,  193,
       55,   48,   57,   87,   87,   45,   45,   55,    0,   57,
      243,   45,   57,    0,   45,   55,   55,   57,   57,   45,
        0,   45,   56,    0,   45,    0,   45,   45,   56,   56,
        0,    0,   58,    0,   56,   59,    0,   56,   56,   58,
       82,    0,   59,   82,   58,   60,   60,   58,   58,   60,
       59,   59,   63,    0,   61,   82,   82,   60,   66,   63,

        0,   61,  246,    0,   65,   66,   84,   63,   63,   61,
       61,   65,   84,   66,   66,   66,  246,   63,   68,   65,
       65,   84,   84,    0,    0,   68,  261,   60,   60,   61,
       62,    0,   64,   68,   68,   65,   68,   62,   65,   64,
      261,   86,    0,    0,    0,   62,   62,   64,   64,   86,
       86,   62,    0,   69,    0,    0,   86,   86,   62,   62,
       69,   62,   64,   62,   62,   64,   62,  345,   69,   69,
       69,   73,   64,   67,   69,    0,   70,    0,   73,    0,
       67,  345,    0,   70,    0,   88,   73,   73,   67,   67,
      389,   70,   70,   67,   70,   67,   73,   70,   71,   73,

       88,   88,    0,   67,  389,   71,    0,  394,   67,   67,
       72,   70,    0,   71,   71,    0,   71,   72,   90,    0,
       74,  394,   75,    0,   76,   72,   72,   74,  476,   75,
       71,   76,  527,   90,   90,   74,   74,   75,   75,   76,
       76,   72,  476,   75,   72,  107,  527,   77,   90,    0,
        0,   74,   74,   75,   77,    0,   74,   74,   78,   76,
      107,  107,   77,   77,   77,   78,  537,    0,  537,  537,
       78,    0,  537,   78,   78,   85,   85,   85,   85,   85,
       85,    0,   85,   89,   89,  109,    0,   89,    0,  110,
      110,  110,    0,  113,  110,   89,  113,   85,   85,  114,

      109,  109,  110,  115,    0,  114,  117,    0,  113,  113,
        0,  115,  115,    0,  114,  114,  116,  116,  115,  115,
      116,  117,  117,  118,    0,   89,   89,  119,  116,  120,
        0,    0,  110,  110,    0,  121,    0,  117,  118,  118,
        0,    0,  119,  119,  120,  120,    0,  122,    0,  120,
      121,  121,  119,  123,    0,  119,  121,    0,  116,  116,
      124,  118,  122,  122,  125,    0,    0,  126,  123,  123,
      127,    0,  122,    0,  128,  124,  124,    0,  129,  125,
      125,  124,  126,  126,  125,  127,  127,  130,    0,  128,
      128,  127,  128,  129,  129,  126,  126,  126,  131,    0,

        0,    0,  130,  130,  126,    0,  132,    0,  133,  128,
        0,  134,    0,  131,  131,    0,  130,  135,    0,    0,
      131,  132,  132,  133,  133,    0,  134,  134,  136,  133,
      134,    0,  135,  135,  135,  137,    0,  138,    0,  139,
        0,  132,    0,  136,  136,  140,    0,  134,    0,  141,
      137,  137,  138,  138,  139,  139,  142,    0,  138,  136,
      140,  140,  143,  139,  141,  141,  141,  144,    0,  137,
        0,  142,  142,  145,    0,  142,    0,  143,  143,  146,
        0,  147,  144,  144,  148,  144,  149,    0,  145,  145,
      145,  150,  143,  151,  146,  146,  147,  147,    0,  148,

      148,  149,  149,    0,  145,  152,  150,  150,  151,  151,
      153,    0,  154,  151,  155,  149,    0,  147,  157,  148,
      152,  152,  158,    0,    0,  153,  153,  154,  154,  155,
      155,  150,  156,  157,  157,  159,    0,  158,  158,  152,
      155,  154,  160,    0,  153,  161,    0,  156,  156,  157,
      159,  159,    0,  163,  156,    0,  162,  160,  160,  164,
      161,  161,    0,    0,    0,    0,    0,  165,  163,  163,
      159,  162,  162,    0,  164,  164,  160,  161,  160,  164,
      166,  162,  165,  165,  167,    0,  168,  162,  163,    0,
      169,    0,  165,  171,    0,  166,  166,  170,    0,  167,

      167,  168,  168,    0,  167,  169,  169,    0,  171,  171,
        0,  172,  170,  170,  170,  173,  166,    0,  169,  167,
      174,  168,  167,  167,  171,  170,  172,  172,    0,  175,
      173,  173,  177,  170,    0,  174,  174,  176,    0,    0,
        0,  174,  172,  178,  175,  175,  175,  177,  177,  173,
      175,    0,  176,  176,  179,  176,    0,    0,  178,  178,
      180,    0,  181,    0,  182,    0,  176,  183,    0,  179,
      179,  179,  178,    0,  184,  180,  180,  181,  181,  182,
      182,    0,  183,  183,  185,  180,  186,    0,  183,  184,
      184,  187,    0,    0,    0,  184,  181,  188,  182,  185,

      185,  186,  186,  186,  188,  184,  187,  187,  190,    0,
      191,    0,  188,  188,    0,  190,  607,  191,  607,  607,
      185,  187,  607,  190,  190,  191,  191,  192,  192,  192,
      195,    0,  192,  195,    0,  196,    0,  195,    0,    0,
      192,  196,  196,    0,    0,  195,  195,  197,    0,  198,
      196,  196,  199,    0,  197,    0,  198,  200,  200,  199,
        0,  200,  197,  197,  198,  198,  201,  199,  199,  200,
      192,  192,  202,  201,  242,    0,  203,    0,    0,  202,
        0,  201,  201,  203,    0,    0,    0,  202,  202,  242,
      242,  203,  203,  203,    0,  204,    0,    0,    0,  200,

      200,  201,  204,    0,    0,  202,    0,  205,    0,  206,
      204,  204,  207,  204,  205,  650,  206,  650,  650,  207,
        0,  650,  205,  205,  206,  206,  208,  207,  207,    0,
        0,  209,    0,  208,    0,    0,  205,  205,  209,    0,
      207,  208,  208,  210,    0,  211,  209,  209,    0,  212,
      210,    0,  211,    0,    0,  213,  212,  208,  210,  210,
      211,  211,  213,  210,  212,  212,  214,  209,  215,    0,
      213,  213,    0,  214,    0,  215,    0,    0,    0,    0,
      216,  214,  214,  215,  215,  212,  216,  216,    0,  213,
      216,  217,    0,  218,    0,  216,  216,  214,  217,    0,

      218,  216,    0,  219,  215,    0,  217,  217,  218,  218,
      219,  244,  218,  220,    0,  221,    0,  222,  219,  219,
      220,    0,  221,  254,  222,    0,  244,  244,  220,  220,
      221,  221,  222,  222,  220,  222,  223,    0,  254,  254,
      224,    0,  659,  223,  659,  659,  221,  224,  659,    0,
        0,  223,  223,  222,  226,  224,  224,  225,  223,  225,
        0,  226,    0,    0,  227,    0,  225,  225,  228,  226,
      226,  227,  225,  225,  228,  228,    0,  226,  229,  227,
      227,  230,    0,  228,  228,  229,    0,    0,  230,    0,
      227,    0,  231,  229,  229,    0,  230,  230,  232,  231,

        0,    0,  230,  228,  233,  232,  229,  231,  231,  234,
        0,  233,  230,  232,  232,  231,  234,    0,    0,  233,
      233,  235,    0,    0,  234,  234,  236,    0,  235,    0,
      234,    0,  237,  236,    0,    0,  235,  235,  233,  237,
        0,  236,  236,  238,  236,  239,    0,  237,  237,  240,
      238,  664,  239,  664,  664,  235,  240,  664,  238,  238,
      239,  239,  241,    0,  240,  240,  237,    0,    0,  241,
      239,  245,  245,  245,  249,    0,  245,  241,  241,  248,
      249,    0,  248,  240,  245,  710,    0,  710,  710,  249,
      249,  710,    0,    0,  248,  248,  250,  250,  250,  250,

      250,  250,  252,    0,  253,  253,  250,  260,  253,  250,
      252,  252,  265,    0,  245,  245,  253,  252,  252,  264,
        0,    0,  260,  260,  266,    0,    0,  265,  265,  267,
      398,    0,    0,  398,  264,  264,  398,  265,  398,  266,
      266,  266,    0,    0,  267,  267,  253,  253,  262,  268,
        0,  262,  398,  264,    0,    0,  262,  262,  262,  269,
        0,  262,    0,  270,  268,  268,  271,    0,  262,  262,
      272,  262,  262,  274,  269,  269,  269,  273,  270,  270,
      281,  271,  271,  271,    0,  272,  272,    0,  274,  274,
      268,  270,  273,  273,    0,  281,  281,  275,    0,  262,

      262,  263,  274,  277,  263,  274,    0,    0,  273,  263,
      263,  263,  275,  275,  263,  276,  275,  275,  277,  277,
      278,  263,  263,  277,  263,  263,  279,    0,  280,    0,
      276,  276,    0,  275,  282,  278,  278,    0,    0,  283,
        0,  279,  279,  280,  280,  276,  284,  279,  285,  282,
      282,  286,  263,  263,  283,  283,  287,  278,    0,    0,
      280,  284,  284,  285,  285,  288,  286,  286,  289,  285,
      290,  287,  287,  291,  284,  292,  287,  293,  283,    0,
      288,  288,    0,  289,  289,  290,  290,  286,  291,  291,
      292,  292,  293,  293,  288,  292,  294,    0,  293,  295,

        0,  291,  290,  296,    0,  297,    0,  289,  298,    0,
      299,  294,  294,  300,  295,  295,  294,    0,  296,  296,
      297,  297,  296,  298,  298,  299,  299,  301,  300,  300,
      302,  295,  299,  303,    0,    0,    0,  304,    0,  298,
      305,    0,  301,  301,    0,  302,  302,  306,  303,  303,
      300,  303,  304,  304,  307,  305,  305,  308,    0,  302,
      305,  301,  306,  306,  309,    0,    0,  310,    0,  307,
      307,  311,  308,  308,    0,  307,  312,    0,    0,  309,
      309,  308,  310,  310,  309,    0,  311,  311,  313,  307,
      314,  312,  312,  311,  315,    0,  316,  310,  317,    0,

      312,  318,    0,  313,  313,  314,  314,  311,  319,  315,
      315,  316,  316,  317,  317,  320,  318,  318,    0,  315,
        0,  322,  318,  319,  319,  321,  314,    0,  323,    0,
      320,  320,  324,  316,    0,  317,  322,  322,  325,    0,
      321,  321,  319,  323,  323,  326,  321,  324,  324,  323,
        0,  327,    0,  325,  325,  322,  328,    0,  329,    0,
      326,  326,    0,    0,  330,  326,  327,  327,  331,    0,
      332,  328,  328,  329,  329,    0,  333,  325,    0,  330,
      330,    0,    0,  331,  331,  332,  332,  327,    0,  334,
        0,  333,  333,    0,  329,  328,  330,  333,  335,  332,

      336,  333,  338,  331,  334,  334,  337,    0,  334,    0,
      339,    0,  340,  335,  335,  336,  336,  338,  338,    0,
      335,  337,  337,  341,  337,  339,  339,  340,  340,    0,
      342,    0,    0,  343,    0,  336,  344,    0,  341,  341,
      340,  338,    0,  344,  339,  342,  342,  341,  343,  343,
        0,  344,  344,  348,    0,    0,    0,  349,  343,  715,
      348,  715,  715,    0,  349,  715,  342,  346,  348,  348,
      346,    0,  349,  349,    0,  346,  346,  346,  350,    0,
      346,    0,  346,    0,  348,  350,    0,  346,  346,  353,
      346,  346,  349,  350,  350,  351,  353,  352,    0,  352,

        0,  355,  351,    0,  353,  353,  388,  352,  355,    0,
      351,  351,  352,  352,    0,    0,  355,  355,  346,  346,
      347,  388,  388,  347,  351,    0,    0,    0,  347,  347,
      347,  354,    0,  347,    0,  347,  405,  355,  354,  402,
      347,  347,    0,  347,  347,    0,  354,  354,  356,    0,
      356,  405,  405,  357,  402,  402,    0,  356,  356,  356,
      357,    0,    0,  356,  356,  354,  356,    0,  357,  357,
      358,  347,  347,  359,  357,  402,  360,  358,    0,    0,
      359,    0,    0,  360,    0,  358,  358,    0,  359,  359,
      361,  360,  360,    0,  362,    0,  363,  361,    0,  358,

      360,  362,  359,  363,    0,  361,  361,    0,    0,  362,
      362,  363,  363,  364,  361,  359,  365,    0,    0,    0,
      364,    0,    0,  365,    0,  363,  363,  366,  364,  364,
      367,  365,  365,  368,  366,    0,    0,  367,    0,    0,
      368,  364,  366,  366,    0,  367,  367,    0,  368,  368,
      365,  367,  369,    0,  368,  370,    0,  371,    0,  369,
        0,    0,  370,  407,  371,    0,    0,  369,  369,  373,
      370,  370,  371,  371,  372,    0,  373,    0,  407,  407,
      374,  372,    0,    0,  373,  373,  370,  374,  369,  372,
      372,  372,  371,  375,    0,  374,  374,    0,  376,  407,

      375,  374,    0,  377,  373,  376,    0,    0,  375,  375,
      377,    0,    0,  376,  376,  378,    0,  375,  377,  377,
      379,    0,  378,    0,    0,  380,    0,  379,    0,    0,
      378,  378,  380,    0,  378,  379,  379,    0,  381,    0,
      380,  380,    0,  382,  377,  381,    0,    0,  383,  380,
      382,    0,    0,  381,  381,  383,  379,    0,  382,  382,
      384,    0,  382,  383,  383,  383,  386,  384,  413,    0,
      385,    0,    0,  386,  381,  384,  384,  385,    0,  384,
        0,  386,  386,  413,  413,  385,  385,  387,    0,  403,
        0,    0,  404,  413,  387,  384,  386,    0,  406,  385,

      408,    0,  387,  387,  403,  403,    0,  404,  404,    0,
        0,    0,    0,  406,  406,  408,  408,    0,    0,    0,
        0,    0,  387,  390,  403,  406,  390,  404,    0,    0,
        0,  390,  390,  390,  408,  409,  390,  410,    0,    0,
      411,    0,  412,  390,  390,  414,  390,  390,    0,    0,
      409,  409,  410,  410,  410,  411,  411,  412,  412,    0,
      414,  414,  415,  412,    0,  411,  416,    0,    0,  409,
      414,  411,  417,    0,  390,  390,  391,  415,  415,  391,
        0,  416,  416,    0,  391,  391,  391,  417,  417,  391,
      418,    0,  419,    0,  421,  417,  391,  391,  415,  391,

      391,  420,    0,  416,  422,  418,  418,  419,  419,  421,
      421,    0,    0,    0,    0,    0,  420,  420,  418,  422,
      422,    0,    0,    0,    0,  423,    0,  391,  391,  399,
      424,  421,  399,  425,  422,  420,    0,  399,  399,  399,
      423,  423,  399,    0,  426,  424,  424,  424,  425,  425,
      399,    0,  399,  399,  428,    0,  427,    0,  429,  426,
      426,  423,  430,    0,    0,    0,    0,  425,  426,  428,
      428,  427,  427,  429,  429,    0,    0,  430,  430,    0,
      399,  399,  401,  431,    0,  401,  429,    0,    0,  428,
      401,  401,  401,  427,  432,  401,  433,    0,  431,  431,

      434,    0,    0,  401,  435,  401,  401,  436,    0,  432,
      432,  433,  433,  437,    0,  434,  434,    0,  432,  435,
      435,  438,  436,  436,  439,  434,    0,    0,  437,  437,
      437,  440,  435,  401,  401,  441,  438,  438,  436,  439,
      439,    0,  438,  442,    0,    0,  440,  440,  443,    0,
      441,  441,  444,    0,  445,    0,  441,  446,  442,  442,
      447,  440,    0,  443,  443,    0,  448,  444,  444,  445,
      445,  449,  446,  446,  450,  447,  447,    0,  446,  445,
      447,  448,  448,  451,    0,  453,  449,  449,  444,  450,
      450,  452,    0,  450,    0,    0,    0,    0,  451,  451,

      453,  453,  449,  454,    0,  455,  452,  452,  452,    0,
      453,  456,  451,  457,    0,    0,  458,    0,  454,  454,
      455,  455,    0,    0,  455,  459,  456,  456,  457,  457,
      456,  458,  458,  460,    0,    0,    0,  461,  454,  462,
      459,  459,  464,    0,    0,  463,    0,    0,  460,  460,
      465,  458,  461,  461,  462,  462,  466,  464,  464,  459,
      463,  463,  463,  467,    0,  465,  465,  468,  460,  469,
        0,  466,  466,  470,    0,  462,  471,  466,  467,  467,
      465,    0,  468,  468,  469,  469,  472,    0,  470,  470,
      473,  471,  471,    0,  474,    0,  475,  471,    0,    0,

      469,  472,  472,    0,  467,  473,  473,  472,  470,  474,
      474,  475,  475,  474,  479,    0,  484,  479,  475,    0,
      479,    0,  479,  484,    0,    0,    0,  485,    0,    0,
        0,  484,  484,    0,  485,  484,  479,  481,  546,    0,
      481,  486,  485,  485,    0,  481,  481,  481,  486,    0,
      481,    0,  481,  546,  546,    0,  486,  486,  481,  487,
      481,  481,  485,    0,    0,  488,  487,    0,    0,    0,
      489,    0,  488,    0,  487,  487,  490,  489,  486,  550,
      488,  488,    0,  490,  487,  489,  489,    0,  481,  481,
      483,  490,  490,  483,  550,  550,    0,    0,  483,  483,

      483,  488,  491,  483,  550,  492,    0,  490,  493,  491,
      549,  483,  492,  483,  483,  493,    0,  491,  491,    0,
      492,  492,    0,  493,  493,  549,  549,    0,  494,    0,
      549,  491,  495,    0,  492,  494,    0,  493,  491,  495,
        0,  483,  483,  494,  494,    0,  496,  495,  495,  497,
        0,  530,  494,  496,  530,    0,  497,  530,    0,  530,
        0,  496,  496,  498,  497,  497,  497,  499,    0,  742,
      498,  742,  742,  530,  499,  742,  496,  500,  498,  498,
      501,    0,  499,  499,  500,    0,    0,  501,  499,    0,
      502,    0,  500,  500,  503,  501,  501,  502,  500,    0,

      504,  503,    0,    0,    0,  502,  502,  504,    0,  503,
      503,  501,  505,    0,    0,  504,  504,  506,    0,  505,
        0,    0,  502,    0,  506,    0,    0,  505,  505,  505,
      503,  507,  506,  506,  508,    0,  509,  504,  507,    0,
        0,  508,  551,  509,    0,  506,  507,  507,  510,  508,
      508,  509,  509,  511,    0,  510,    0,  551,  551,  512,
      511,    0,    0,  510,  510,  510,  512,    0,  511,  511,
      513,  507,  514,  511,  512,  512,  515,  513,  747,  514,
      747,  747,    0,  515,  747,  513,  513,  514,  514,  513,
        0,  515,  515,  516,    0,  517,    0,  518,    0,    0,

      516,    0,  517,  514,  518,  515,    0,    0,  516,  516,
      517,  517,  518,  518,  516,  519,  517,    0,    0,  520,
        0,  521,  519,    0,    0,  522,  520,  547,  521,    0,
      519,  519,  522,  518,  520,  520,  521,  521,    0,  523,
      522,  522,  547,  547,  520,  524,  523,  548,  547,  525,
      519,  524,  524,  522,  523,  523,  525,  521,  547,  526,
      524,  524,  548,  548,  525,  525,  526,  552,  548,    0,
      523,    0,  525,    0,  526,  526,  531,    0,    0,  531,
        0,    0,  552,  552,  531,  531,  531,  536,  540,  531,
      536,  540,    0,  536,  540,  536,  540,  531,    0,  531,

      531,  543,  543,  553,    0,  543,  554,    0,  545,  536,
      540,  545,    0,  543,  545,    0,  545,    0,  553,  553,
      557,  554,  554,    0,    0,  555,    0,  531,  531,  533,
      545,  556,  533,  553,  554,  557,  557,  533,  533,  533,
      555,  555,  533,  543,  543,  558,  556,  556,  556,  559,
      533,  560,  533,  533,    0,  555,  557,  561,    0,    0,
      558,  558,  562,    0,  559,  559,  560,  560,    0,    0,
      560,  563,  561,  561,    0,  558,    0,  562,  562,    0,
      533,  533,  539,  562,  564,  539,  563,  563,    0,    0,
      539,  539,  539,  565,    0,  539,  563,    0,    0,  564,

      564,  566,    0,  539,  564,  539,  539,    0,  565,  565,
      567,    0,  568,  565,  569,    0,  566,  566,    0,    0,
        0,    0,  566,    0,  571,  567,  567,  568,  568,  569,
      569,    0,    0,  539,  539,  542,  572,  568,  542,  571,
      571,    0,    0,  542,  542,  542,  567,  570,  542,  573,
        0,  572,  572,  574,    0,    0,  542,  575,  542,  542,
      576,    0,  570,  570,  573,  573,  577,  570,  574,  574,
        0,  572,  575,  575,  578,  576,  576,    0,  575,    0,
      579,  577,  577,    0,    0,  580,  542,  542,  581,  578,
      578,  582,    0,  574,  577,  579,  579,    0,  583,  576,

      580,  580,    0,  581,  581,  584,  582,  582,  578,  585,
        0,  586,    0,  583,  583,  579,  579,  583,  588,  582,
      584,  584,  587,    0,  585,  585,  586,  586,    0,  589,
        0,    0,  586,  588,  588,  590,    0,  587,  587,  585,
      591,    0,  592,  587,  589,  589,  588,  593,    0,    0,
      590,  590,  594,    0,  595,  591,  591,  592,  592,  590,
        0,    0,  593,  593,    0,  589,  596,  594,  594,  595,
      595,  597,  593,  598,    0,  599,  591,  600,    0,  595,
      601,  596,  596,  602,    0,    0,  597,  597,  598,  598,
      599,  599,  600,  600,  597,  601,  601,    0,  602,  602,

      596,  603,    0,  604,    0,  605,    0,  606,  665,    0,
      606,    0,  600,  606,    0,  606,  603,  603,  604,  604,
      605,  605,  609,  665,  665,  609,  617,  604,  609,  606,
      609,  613,  613,  617,  749,  613,  749,  749,    0,    0,
      749,  617,  617,  613,  609,  615,  605,  608,  615,    0,
      608,  615,    0,  615,    0,  608,  608,  608,    0,    0,
      608,    0,  608,    0,    0,  616,    0,  615,  608,  618,
      608,  608,  616,  613,  613,    0,  618,  667,    0,  619,
      616,  616,    0,    0,  618,  618,  619,    0,    0,    0,
      616,  678,  667,  667,  619,  619,    0,    0,  608,  608,

      612,  668,  619,  612,  620,  618,  678,  678,  612,  612,
      612,  620,  667,  612,    0,  621,  668,  668,  622,  620,
      620,  612,  621,  612,  612,  622,    0,  678,  623,    0,
      621,  621,  668,  622,  622,  623,    0,    0,  620,  624,
        0,    0,  622,  623,  623,    0,  624,  670,  623,  625,
        0,  612,  612,  626,  624,  624,  625,    0,    0,    0,
      626,    0,  670,  670,  625,  625,  627,  670,  626,  626,
      628,    0,    0,  627,    0,  624,  680,  628,  674,  625,
        0,  627,  627,  629,    0,  628,  628,  626,    0,  630,
      629,  680,  680,  674,  674,  631,  630,  627,  629,  629,

      632,  628,  631,  674,  630,  630,  633,  632,  629,  630,
      631,  631,  634,  633,    0,  632,  632,  635,    0,  634,
        0,  633,  633,  636,  635,    0,    0,  634,  634,  637,
      636,  631,  635,  635,  635,  634,  637,  682,  636,  636,
      638,    0,  639,    0,  637,  637,    0,  638,  669,  639,
        0,    0,  682,  682,  640,  638,  638,  639,  639,  636,
      637,  640,  639,  669,  669,  641,    0,  642,    0,  640,
      640,  638,  641,  640,  642,    0,    0,  643,  669,    0,
      641,  641,  642,  642,  643,    0,    0,    0,  644,    0,
      645,    0,  643,  643,  643,  644,  778,  645,  778,  778,

        0,  646,  778,  644,  644,  645,  645,  645,  646,  644,
      685,    0,  647,    0,  648,    0,  646,  646,    0,  647,
        0,  648,    0,    0,    0,  685,  685,  647,  647,  648,
      648,  649,    0,    0,  649,  646,  647,  649,  652,  649,
      671,  652,    0,    0,  652,    0,  652,  655,  655,    0,
        0,  655,    0,  649,  651,  671,  671,  651,    0,  655,
      652,  671,  651,  651,  651,  657,  658,  651,  657,  658,
      686,  657,  658,  657,  658,  651,    0,  651,  651,  660,
      660,    0,    0,  660,    0,  686,  686,  657,  658,  655,
      655,  660,  662,  666,    0,  662,  663,  673,  662,  663,

      662,    0,  663,    0,  663,  651,  651,  654,  666,  666,
      654,    0,  673,  673,  662,  654,  654,  654,  663,  672,
      654,  660,  660,  675,    0,  673,  676,  666,  654,  677,
      654,  654,    0,    0,  672,  672,  679,    0,  675,  675,
      672,  676,  676,    0,  677,  677,  681,  676,  677,  683,
        0,  679,  679,  684,    0,  687,    0,  679,  654,  654,
      675,  681,  681,  688,  683,  683,  689,    0,  684,  684,
      687,  687,  690,    0,  684,    0,  681,  691,  688,  688,
      692,  689,  689,    0,  693,  683,  694,  690,  690,    0,
      687,  689,  691,  691,  695,  692,  692,  696,    0,  693,

      693,  694,  694,  697,  692,  693,    0,    0,  698,  695,
      695,  695,  696,  696,  699,    0,  700,    0,  697,  697,
        0,  701,  694,  698,  698,  702,    0,  703,    0,  699,
      699,  700,  700,  704,    0,  699,  701,  701,  705,    0,
      702,  702,  703,  703,  706,    0,  711,  711,  704,  704,
      711,  707,    0,  705,  705,  708,    0,    0,  711,  706,
      706,  702,    0,  703,    0,  706,  707,  707,    0,  709,
      708,  708,  709,  713,  704,  709,  713,  709,    0,  713,
        0,  713,    0,  750,  714,    0,  716,  714,  711,  711,
      714,  709,  714,  716,    0,  713,    0,  717,  750,  750,

      718,  716,  716,  716,  717,    0,  714,  718,  750,    0,
      719,    0,  717,  717,  717,  718,  718,  719,    0,    0,
      720,    0,    0,  721,  750,  719,  719,  720,    0,    0,
      721,    0,    0,  722,    0,  720,  720,  718,  721,  721,
      722,    0,    0,  723,    0,  720,  724,  719,  722,  722,
      723,    0,    0,  724,    0,    0,  725,    0,  723,  723,
      726,  724,  724,  725,  751,    0,    0,  726,    0,    0,
      727,  725,  725,  724,    0,  726,  726,  727,    0,  751,
      751,    0,  728,    0,  729,  727,  727,    0,    0,  728,
        0,  729,  725,    0,  730,  727,  726,  728,  728,  729,

      729,  730,  753,  728,  731,  729,  732,    0,  733,  730,
      730,  731,    0,  732,    0,  733,    0,  753,  753,  731,
      731,  732,  732,  733,  733,  734,    0,    0,  735,    0,
      730,    0,  734,  732,  756,  735,    0,    0,  736,    0,
      734,  734,  733,  735,  735,  736,  734,    0,    0,  756,
      756,    0,  737,  736,  736,  738,    0,    0,  739,  737,
        0,    0,  738,    0,  735,  739,  736,  737,  737,  740,
      738,  738,    0,  739,  739,  737,  740,  743,  743,    0,
      741,  743,  752,  741,  740,  740,  741,    0,  741,  743,
      738,    0,    0,  745,  739,    0,  745,  752,  752,  745,

      740,  745,  741,  746,  748,    0,  746,  748,  754,  746,
      748,  746,  748,  755,    0,  745,  757,    0,  758,  743,
      743,  752,  759,  754,  754,  746,  748,    0,  755,  755,
      760,  757,  757,  758,  758,  761,    0,  759,  759,  758,
        0,    0,  754,  755,  762,  760,  760,  757,  763,    0,
      761,  761,  764,    0,    0,  765,  761,    0,    0,  762,
      762,  766,    0,  763,  763,  767,  760,  764,  764,  763,
      765,  765,  768,  764,  769,    0,  766,  766,    0,  770,
      767,  767,  771,    0,  772,    0,  774,  768,  768,  769,
      769,    0,    0,  768,  770,  770,  773,  771,  771,  772,

      772,  774,  774,  775,    0,  776,    0,  767,    0,    0,
      771,  773,  773,    0,    0,    0,    0,  773,  775,  775,
      776,  776,  777,  774,  779,  777,  780,    0,  777,    0,
      777,  779,    0,  780,  804,    0,  781,    0,  782,  779,
      779,  780,  780,  781,  777,  782,    0,    0,  783,  804,
      804,  781,  781,  782,  782,  783,    0,  782,  784,    0,
      779,  785,  780,  783,  783,  784,    0,    0,  785,    0,
      781,    0,  786,  784,  784,    0,  785,  785,  783,  786,
        0,    0,  785,    0,  787,    0,  788,  786,  786,  789,
        0,  787,  801,  788,  801,  801,  789,    0,  801,  787,

      787,  788,  788,  790,  789,  789,  788,    0,  791,    0,
      790,    0,    0,  786,  787,  791,    0,    0,  790,  790,
      790,  792,    0,  791,  791,  793,    0,  794,  792,    0,
        0,  795,  793,    0,  794,    0,  792,  792,  795,    0,
      793,  793,  794,  794,  796,    0,  795,  795,    0,  797,
        0,  796,  794,  792,  798,  793,  797,    0,    0,  796,
      796,  798,  802,    0,  797,  797,  799,    0,  800,  798,
      798,  800,  803,  799,  800,    0,  800,  802,  802,  805,
        0,  799,  799,  802,  797,  796,    0,  803,  803,  798,
      800,  806,    0,  807,  805,  805,  808,  799,  809,    0,

        0,  811,  803,  810,    0,    0,  806,  806,  807,  807,
      812,  808,  808,  809,  809,  805,  811,  811,  810,  810,
      813,  806,  814,  810,  815,  812,  812,  816,    0,    0,
        0,  812,  835,    0,  817,  813,  813,  814,  814,  815,
      815,  817,  816,  816,    0,  818,    0,  835,  835,  817,
      817,  819,  818,    0,    0,  813,    0,  820,  819,  817,
      818,  818,  821,  816,  820,    0,  819,  819,  819,  821,
      818,    0,  820,  820,  822,    0,  823,  821,  821,    0,
      824,  822,    0,  823,    0,  821,  823,  824,    0,  822,
      822,  823,  823,  820,  825,  824,  824,    0,  826,    0,

      827,  825,    0,  824,  822,  826,    0,  827,    0,  825,
      825,  828,    0,  826,  826,  827,  827,    0,  828,  834,
        0,  829,    0,    0,  827,  830,  828,  828,  829,    0,
      828,  831,  830,    0,  834,  834,  829,  829,  831,    0,
      830,  830,  832,    0,  836,    0,  831,  831,  833,  832,
      837,  829,  831,  838,  834,  833,  839,  832,  832,  836,
      836,  840,    0,  833,  833,  837,  837,    0,  838,  838,
      841,  839,  839,  842,    0,  833,  840,  840,    0,  836,
      842,    0,  840,  843,    0,  841,  841,  844,  842,  842,
      843,  867,    0,  845,  844,  841,    0,  846,  843,  843,

      845,    0,  844,  844,  846,    0,  867,  867,  845,  845,
      847,  842,  846,  846,    0,  848,    0,  847,    0,    0,
        0,  843,  848,  844,  845,  847,  847,  849,    0,    0,
      848,  848,  850,  846,  849,  847,  848,  851,    0,  850,
      852,    0,  849,  849,  851,  853,    0,  850,  850,    0,
      849,    0,  851,  851,    0,  852,  852,  854,    0,    0,
      853,  853,    0,    0,  854,    0,    0,  850,  862,    0,
      855,    0,  854,  854,  856,  852,  853,  855,  854,    0,
      857,  856,    0,  862,  862,  855,  855,  857,    0,  856,
      856,  855,    0,  858,    0,  857,  857,  859,  862,  856,

      858,    0,    0,  860,  859,    0,    0,    0,  858,  858,
      860,    0,  859,  859,  857,  861,  859,  863,  860,  860,
      864,    0,  861,    0,  863,    0,    0,  864,    0,    0,
      861,  861,  863,  863,  865,  864,  864,  866,    0,  868,
        0,  865,    0,    0,  866,    0,  868,    0,    0,  865,
      865,  869,  866,  866,  868,  868,    0,    0,  869,    0,
        0,    0,    0,    0,    0,  865,  869,  869,    0,  868,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  874,  874,  874,

      874,  874,  874,  874,  874,  874,  875,  875,    0,    0,
      875,  876,  876,  876,  876,  876,  876,  877,  877,    0,
        0,  877,  878,  878,  878,  878,  878,  878,  879,  879,
        0,    0,  879,  880,  880,  880,  880,  880,  880,  881,
        0,    0,    0,  881,  881,  881,  881,  881,  882,  882,
        0,  882,  882,  882,  882,  882,  882,  883,    0,  883,
      883,    0,    0,  883,  883,  884,  884,  884,  884,  885,
      885,  885,  885,  886,  886,  886,  886,  887,  887,  887,
      887,  887,  887,  888,    0,    0,    0,  888,  888,  888,
      888,  888,  889,  889,  889,  889,  889,  889,  890,    0,

        0,    0,  890,  890,  890,  890,  890,  891,  891,  891,
      891,  891,  891,  892,    0,    0,    0,  892,  892,  892,
      892,  892,  893,    0,    0,    0,  893,  893,  893,  893,
      893,  894,    0,    0,  894,  894,  894,  894,  894,  894,
      895,    0,    0,    0,  895,  895,  895,  895,  895,  896,
        0,    0,    0,  896,  896,  896,  896,  896,  897,    0,
        0,  897,  897,  897,  897,  897,  897,  898,    0,    0,
        0,  898,  898,  898,  898,  898,  899,    0,    0,    0,
      899,  899,  899,  899,  899,  900,    0,    0,  900,  900,
      900,  900,  900,  900,  901,    0,    0,    0,  901,  901,

      901,  901,  901,  902,    0,    0,    0,  902,  902,  902,
      902,  902,  903,    0,    0,    0,  903,  903,  903,  903,
      903,  904,    0,    0,  904,  904,  904,  904,  904,  904,
      905,    0,    0,    0,  905,  905,  905,  905,  905,  906,
        0,    0,  906,  906,  906,  906,  906,  906,  907,    0,
        0,  907,  907,  907,  907,  907,  907,  908,    0,    0,
        0,  908,  908,  908,  908,  908,  909,    0,    0,  909,
      909,  909,  909,  909,  909,  910,    0,    0,  910,  910,
      910,  910,  910,  910,  911,    0,    0,    0,  911,  911,
      911,  911,  911,  912,    0,    0,  912,  912,  912,  912,

      912,  912,  913,    0,    0,  913,  913,  913,  913,  913,
      913,  914,    0,    0,  914,  914,  914,  914,  914,  914,
      915,    0,    0,  915,  915,  915,  915,  915,  915,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
#define INITIAL 0
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2003 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "strategyLanguage.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
#include "preModule.hh"
#include "lexerAux.hh"
#include "global.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

#define YY_INPUT(buf, result, max_size)		getInput(buf, result, max_size)

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

int braceCount;
int parenCount;
string latexCode;
#define ID_MODE 1

#define CMD_MODE 2

#define FILE_NAME_MODE 3

#define STRING_MODE 4

#define LATEX_MODE 5

#define YY_STACK_USED 1

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 84 "../../../src/Mixfix/lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 871 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5230 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 88 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 92 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 98 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 99 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 103 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 107 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 108 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 109 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VIEW);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 110 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 111 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 112 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 113 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 114 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 115 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 116 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 117 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 118 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 119 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 120 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 121 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 122 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 123 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 124 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 125 "../../../src/Mixfix/lexer.ll"
return KW_SREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 126 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 127 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 128 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 129 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 130 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 131 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 132 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 133 "../../../src/Mixfix/lexer.ll"
return KW_XUNIFY;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 134 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 135 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 136 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 137 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 138 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 139 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 140 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 141 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 142 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 143 "../../../src/Mixfix/lexer.ll"
return KW_BODY;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
return KW_BUILTIN;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_OPS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
return KW_LABEL;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 193 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 194 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 195 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 196 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 197 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 202 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 98:
YY_RULE_SETUP
#line 216 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 220 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 221 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 222 "../../../src/Mixfix/lexer.ll"
FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 102:
YY_RULE_SETUP
#line 230 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 231 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 232 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 233 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 234 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 235 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 236 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 237 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 238 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 239 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 240 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 241 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 242 "../../../src/Mixfix/lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 243 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 244 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 245 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 246 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 247 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 248 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 249 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 250 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 251 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 252 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 253 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 254 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 255 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 256 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 257 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 258 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 259 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 260 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 261 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 262 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 263 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 264 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 265 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 266 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 267 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 268 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 269 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 270 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 271 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 272 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 273 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 274 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 275 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 276 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 277 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 278 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 279 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 280 "../../../src/Mixfix/lexer.ll"
FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 281 "../../../src/Mixfix/lexer.ll"
FIX_UP(IDENTIFIER)
	YY_BREAK


case 154:
YY_RULE_SETUP
#line 285 "../../../src/Mixfix/lexer.ll"
// eat white space
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 286 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 156:
YY_RULE_SETUP
#line 294 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 299 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 158:
YY_RULE_SETUP
#line 308 "../../../src/Mixfix/lexer.ll"
latexCode += yytext;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 309 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 314 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = latexCode.c_str();
						  return LATEX_STRING;
						}
					    }
					  latexCode += yytext;
					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 328 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 332 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 336 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  latexCode += yytext;
					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 340 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 343 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 349 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 350 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 351 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 356 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 871 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 871 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 870);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 356 "../../../src/Mixfix/lexer.ll"


#include "lexerAux.cc"
