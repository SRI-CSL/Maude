
#line 2 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 226
#define YY_END_OF_BUFFER 227
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1355] =
    {   0,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,    0,    0,    0,    0,  214,  214,
        0,    0,  227,  225,  223,  224,  224,  116,  225,  114,
      116,  116,  116,  114,  115,  115,  116,  225,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,   17,  116,  116,  116,  116,  116,  116,  116,
      181,  225,  179,  179,  179,  181,  179,  179,  181,  225,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  122,  225,
      118,  122,  122,  120,  119,  118,  122,  225,  122,  120,

      124,  124,  123,  124,  124,  124,  124,  197,  225,  192,
      193,  197,  183,  197,  195,  182,  186,  184,  185,  197,
      225,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  194,  202,  202,  202,  202,  202,
      200,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  223,  199,  225,  224,  208,  209,
      210,  203,  207,  212,  211,  213,  214,  215,  222,  216,
      221,  221,  217,  218,  216,  219,  220,  223,  116,    0,
      116,    0,    0,    0,  116,  116,  115,    0,  116,  116,
      116,  116,  116,  116,  116,   12,  116,  116,  116,  116,

      116,  116,   48,  116,  116,  116,   83,  116,  116,  116,
      116,  116,  116,  116,  116,  116,   70,  116,  116,    5,
      116,  116,  116,   16,  116,   15,  116,   82,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,   43,   80,
      116,  116,  116,  116,  116,  116,  116,  116,   84,  116,
       86,  116,  116,  116,  116,  116,  116,  116,  116,  116,
        6,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  181,    0,  180,  181,    0,    0,    0,  181,
      181,  174,  177,  178,  175,    0,  181,  181,  181,  181,
      181,  167,  181,  181,  181,  181,  181,  166,  155,  181,

      181,  181,  181,  154,  181,  153,  181,  181,  181,  181,
      164,  181,  181,  181,  160,  181,  155,  181,  168,  170,
      181,  181,  181,  181,  181,  125,  155,  181,  176,  122,
        0,  121,  122,    0,    0,    0,  122,  122,    0,  117,
      119,    0,    5,  223,  123,    0,    0,    0,    0,    0,
      197,    0,  196,  197,    0,    0,    0,  197,  197,  188,
      187,    0,  197,  197,  197,  197,  197,  197,  197,  197,
      190,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  189,  202,    0,  201,  202,    0,    0,    0,
      202,  202,    0,  202,  202,  202,  198,  202,  202,  202,

      198,  202,  202,  202,  198,  198,  202,  202,  202,  198,
      202,  223,  199,    0,    0,    0,  208,  204,  205,  206,
      212,  214,  216,  216,  116,    0,    2,    2,  116,  116,
      116,   75,  116,  116,  116,  116,  116,  116,   74,  116,
      116,  116,  116,  116,  116,  116,  116,  116,   18,   83,
      116,  116,  116,  116,  116,  116,  116,  116,  116,   34,
      116,  116,  116,  116,  116,  116,  116,  116,   82,  116,
      116,    6,   32,  116,  116,  116,   44,  116,   80,  116,
      116,  116,  116,  116,  116,   11,  116,  109,   21,  116,
      116,   24,   84,  116,   86,  116,  116,   41,  116,  116,

      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,   81,  116,  116,  116,  116,  116,  116,
      116,  116,  181,    0,    2,    2,  181,  181,  165,  181,
      181,  169,  171,  181,  181,  181,  181,  181,  181,  181,
      181,  130,  181,  155,  181,  172,  181,  181,  181,  181,
      181,  181,  148,  147,  181,  161,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  163,  122,    0,    2,
        2,    0,    0,    0,    0,    2,    2,  197,    0,    2,
        2,  197,  197,  197,  197,  197,  197,  197,  197,  191,
      197,  197,  197,  197,  197,  197,  197,  191,  197,  197,

      197,  197,  197,  202,    0,    2,    2,  202,  202,  202,
      198,  198,  202,  202,  202,  202,  202,  198,    0,    0,
        0,    0,    2,    2,    2,    1,    2,    2,  116,  116,
      116,   60,   50,  116,  116,  116,  116,  116,  116,  116,
      116,   57,  116,   31,  116,   22,  116,  116,  116,  102,
       25,  116,  116,  116,   65,  116,   26,  116,  116,  116,
      116,  116,  116,    9,   30,  116,    3,  116,  116,  116,
      116,   20,  116,    7,  116,  116,  105,   14,  116,  116,
      116,  116,   17,  116,  116,  116,  116,  116,   84,  116,
      116,   42,  116,  116,   79,   23,   27,  116,  100,  116,

      116,  116,  110,   71,  116,  116,  116,  116,   81,  116,
        8,  116,  116,  116,   66,  116,  116,    0,    0,    2,
        2,    2,    1,    2,    2,  181,  181,  129,  181,  181,
      143,  181,  181,  172,  181,  181,  173,  181,  181,  126,
      181,  181,  181,  131,  181,  181,  132,  181,  181,  133,
        3,  181,  181,  162,  181,  181,  142,  135,  181,  181,
      156,  181,  181,  181,  181,  181,  181,  163,    0,    0,
        2,    2,    2,    1,    2,    2,    0,    0,    1,    0,
        0,    2,    2,    2,    1,    2,    2,  197,  191,  197,
      197,  197,  197,  197,  197,  191,  197,  191,  197,  197,

      197,  197,  191,  191,  197,  197,  197,    0,    0,    2,
        2,    2,    1,    2,    2,  202,  202,  198,  198,  202,
      202,  202,  202,  202,  198,  202,  202,  202,  202,    2,
        2,    1,    1,    1,    1,    1,    2,    2,    2,   99,
      116,   68,  116,  103,  116,   29,   49,   62,  116,  116,
      116,  116,  116,   69,  116,   90,  116,   95,  116,   28,
      116,  116,  116,  116,  116,  116,  116,  116,   63,  116,
       96,   88,  106,   37,  116,  116,  116,  116,  116,  116,
       67,   19,   59,  116,  116,   13,  116,  116,  116,  116,
      116,  116,  116,   10,  116,   79,  116,  116,   72,   85,

       58,  116,  116,   45,   40,  116,  116,   78,  116,  101,
       52,  116,  116,    2,    2,    1,    1,    1,    1,    1,
        2,    2,    2,  128,  158,  181,  181,  181,  149,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      127,  144,  181,  181,  181,  181,  181,  181,  181,  134,
      156,  181,  138,  181,  181,  181,  155,    2,    2,    1,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    1,
        1,    1,    1,    1,    2,    2,    2,  191,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  191,    2,    2,    1,    1,    1,    1,

        1,    2,    2,    2,  198,  202,  202,  202,  202,  202,
      198,  202,  202,    1,    1,    1,    1,    1,    2,    2,
       46,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,   92,  116,
      116,    4,  116,  116,  116,  116,  106,   64,   77,   32,
      116,  116,  108,   67,  116,  116,  116,  116,   21,   98,
       56,  116,   39,   53,  116,  116,  116,   85,  116,  116,
       73,  116,  116,  116,  116,   38,    1,    1,    1,    1,
        1,    2,    2,  181,  181,  146,  181,  181,    4,  141,
      136,  181,  181,  181,  181,  181,  181,  181,  147,  181,

      181,  181,  181,  181,  181,  140,  181,  181,  181,    1,
        1,    1,    1,    1,    2,    2,    1,    1,    1,    1,
        1,    2,    2,  197,  197,  191,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,    1,    1,    1,    1,
        1,    2,    2,  202,  202,  202,  202,  202,  202,    1,
        1,  116,   68,  116,  116,   51,   89,  116,   55,  116,
      116,  116,   22,  116,  116,  116,   94,  116,  116,  116,
      116,   93,  116,   76,   61,  116,  116,  107,   91,  116,
       24,  116,   23,  116,  116,   87,   36,   47,  116,  116,
        1,    1,  181,  181,  181,  181,  181,  150,  181,  181,

      181,  181,  148,  181,  151,  181,  181,  181,  145,  181,
      181,  157,  181,    1,    1,    1,    1,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,    1,    1,
      202,  202,  202,  202,  198,  116,  116,  116,   89,  116,
      116,   69,   31,   54,  116,   25,   97,  116,   26,  116,
      116,  116,  116,  109,  116,   27,  116,   35,  116,  116,
      181,  181,  181,  181,  181,  181,  181,  181,  132,  137,
      181,  181,  181,  139,  159,  157,  181,  197,  197,  197,
      197,  197,  197,  197,  197,  202,  202,  202,  198,  116,
       60,  104,  116,   57,   69,   28,   65,  116,  116,   20,

      116,  116,  116,  112,   33,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  152,  197,  197,  197,  197,  197,
      197,  197,  202,  202,  113,  116,  116,  111,  116,  181,
      181,  181,  181,  131,  181,  135,  159,  197,  197,  197,
      197,  197,   96,  116,  128,  129,  181,  142,  197,   58,
      181,  197,  146,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,   13,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   24,    8,   25,   26,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   13,   54,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56
    } ;

static const YY_CHAR yy_meta[57] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    9,    8,   10,   10,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    7,    5,   11
    } ;

static const flex_int16_t yy_base[1442] =
    {   0,
        0,    0,   56,    0,  112,    0,  167,  181,  196,    0,
      252,    0,  307,    0,  314,  322,  354,  359,  172,  186,
      368,  424,  753, 8903,  174, 8903, 8903,  309,  317, 8903,
      341, 8903,  361,  371,  373,  375,  379,  392,  385,  411,
      472,  423,  441,  487,  431,  463,  470,  474,  511,  518,
      532,  541,  467,  553,  571,  572,  568,  595,  561,  602,
      620,  321, 8903,  622,  624,  642,  645,  653,  650,  670,
      673,  716,  677,  679,  705,  681,  754,  711,  742,  762,
      776,  780,  794,  793,  821,  719,  756,  832,  834,  324,
     8903,  852,  840,  877,  879,  882,  885,  902,  905, 8903,

     8903,  931, 8903,  945,  959,  738,  698,  916,  366, 8903,
     8903,  960, 8903,  964,  966,  968,  986, 8903, 8903,  988,
      995,  999, 1011, 1007, 1025, 1013, 1038, 1046, 1049, 1067,
     1072, 1080, 1092, 1094, 8903, 8903, 1098,  372, 1116, 1121,
     1124, 1135, 1142, 1188, 1149, 1146, 1154, 1175, 1196, 1199,
     1214, 1219, 1225, 1237, 1269, 8903, 1283, 1297,    0, 8903,
     8903, 8903,  464,    0, 8903, 8903,    0, 8903, 8903,    0,
     8903, 8903, 8903, 8903,  662, 8903, 8903,  188,  417,  430,
      630, 1269,  442,  405,  786,  914, 1288, 1297, 1168,  708,
     1301, 1306,  845, 1309,  864,  788, 1316, 1328, 1181, 1335,

     1337, 1339,  819,  974, 1346, 1361, 1034, 1369, 1372, 1379,
     1381, 1387, 1233, 1390, 1400, 1394, 1405, 1413, 1418, 1423,
     1428, 1431, 1437, 1441, 1449, 1452, 1455, 1459, 1461, 1470,
     1473, 1480, 1482, 1484, 1488, 1493, 1507, 1512, 1516, 1521,
     1525, 1531, 1535, 1539, 1549, 1563, 1568, 1571, 1577, 1574,
     1581, 1583, 1602, 1606, 1608, 1614, 1626, 1635, 1639, 1646,
     1616, 1650, 1659, 1668, 1671, 1673, 1679, 1686, 1683, 1681,
     1704, 1707, 1712,  481, 1726, 1730, 1739,  485,  415, 1748,
     1750, 1753, 1761, 1772, 1774, 1791, 1794, 1798, 1800, 1812,
     1826, 1834, 1837, 1848, 1845, 1863, 1867, 1875, 1878, 1886,

     1890, 1901, 1913, 1909, 1924, 1932, 1936, 1947, 1950, 1955,
     1968, 1959, 1976, 1981, 1999, 1994, 2002, 2013, 2025, 2031,
     2033, 2036, 2039, 2044, 2059, 2062, 2064, 2070, 2082, 2084,
      500, 2095, 2097, 2115,  509,  527, 2118, 2126, 2143, 8903,
     2145, 2162, 2165, 2190, 8903, 2205,  699,  694,  688,  670,
     2173,  525, 2197, 2205, 2215,  531,  553, 2224, 2219, 2232,
     2237, 2250, 2250, 2261, 2264, 2272, 2283, 2297, 2303, 2305,
     2316, 2328, 2330, 2336, 2341, 2349, 2363, 2368, 2376, 2387,
     2399, 2401, 2407, 2412,  538, 2425, 2427, 2445,  560,  573,
     2448, 2456, 2465, 2452, 2475, 2481, 2487, 2495, 2499, 2501,

     2514, 2519, 2525, 2537, 2533, 2548, 2556, 2559, 2567, 2571,
     2582, 2607, 8903, 2625,  671,  645,    0, 8903, 8903, 8903,
        0,    0,    0, 8903, 1759,  590, 2640, 2694, 1786, 1823,
     2092, 1808, 1911, 2106, 2229, 2258, 2437, 2308, 2178, 2285,
     2372, 2627, 2338, 2590, 2592, 2649, 2651, 2529, 2422, 2579,
     2658, 2661, 2697, 2687, 2700, 2705, 2712, 2715, 2676, 2718,
     2727, 2730, 2736, 2733, 2740, 2748, 2751, 2761, 2763, 2766,
     2770, 2772, 2774, 2785, 2795, 2799, 2803, 2805, 2807, 2813,
     2817, 2827, 2836, 2838, 2840, 2846, 2860, 2864, 2866, 2868,
     2870, 2872, 2878, 2893, 2896, 2900, 2902, 2905, 2911, 2914,

     2920, 2923, 2926, 2933, 2944, 2952, 2948, 2955, 2958, 2962,
     2967, 2970, 2980, 2992, 2994, 2998, 3000, 3004, 3006, 3024,
     3026, 3029, 3037,  614, 3075, 3129, 3052, 3078, 3048, 3056,
     1522, 3089, 3093, 3116, 3101, 3126, 3153, 3161, 3164, 3172,
     3176, 3195, 3198, 3203, 3206, 3209, 3217, 3230, 3238, 3242,
     3244, 3250, 3256, 3262, 3270, 3281, 3283, 3289, 3294, 3307,
     3312, 3320, 3326, 3334, 3339, 3345, 3357, 3365,  668, 3402,
     3456,  620,  577,  577,  558,  542,  532, 3368,  678, 3510,
     3564, 3379, 3371, 3405, 3420, 3416, 3383, 3443, 3467, 3478,
     3490, 3528, 3482, 3524, 3530, 3532, 3567, 3536, 3575, 3586,

     3588, 3594, 3612, 3615,  687, 3641, 3695, 3644, 3741, 3618,
     3652, 3655, 3666, 3677, 3699, 3713, 3719, 3727,  539,  509,
      717,  622,    0,  465, 3761, 3789,  364, 3843, 3034, 3150,
     3408, 3081, 3111, 3248, 3688, 3449, 3751, 3766, 3621, 3792,
     3795, 3534, 3799, 3573, 3803, 3607, 3464, 3647, 3797, 3721,
     3830, 3825, 3850, 3810, 3852, 3854, 3857, 3862, 3880, 3882,
     3885, 3891, 3894, 3900, 3909, 3912, 3914, 3918, 3922, 3924,
     3932, 3936, 3943, 3945, 3947, 3950, 3957, 3968, 3970, 3975,
     3977, 3979, 3981, 3988, 4002, 4008, 4010, 4013, 4015, 4017,
     4036, 4041, 4043, 4045, 4049, 4054, 4063, 4067, 4072, 4074,

     4077, 4099, 4096, 4102, 4104, 4106, 4108, 4126, 4129, 4131,
     4136, 4138, 4149, 4151, 4141, 4159, 4162,  729,  641,  442,
     4188,  440, 4211,  448, 4265, 4184, 4198, 4192, 4222, 4225,
     4233, 4236, 4247, 4269, 4287, 4272, 4291, 4295, 4313, 4316,
     4318, 4321, 4339, 4341, 4344, 4347, 4352, 4366, 4372, 4377,
     4380, 4391, 4399, 4405, 4410, 4418, 4424, 4429, 4442, 4453,
     4455, 4461, 4466, 4479, 4481, 4493, 4504, 4485,  768,  650,
      438, 4524,  423, 4547,  593, 4601,  429,  423,    0,  799,
      772,  398, 4537,  391, 4655,  722, 4709, 4550, 4527, 4561,
     4572, 4583, 4604, 4612, 4626, 4658, 4624, 4666, 4569, 4669,

     4681, 4696, 4637, 4720, 4723, 4731, 4728,  808,  813,  388,
     4763,  362, 4786,  846, 4840, 4734,  874, 4752, 4766, 1699,
     4790, 4805, 4809, 4811, 4843, 4851, 4854, 4865, 4886, 4906,
     2176,    0, 4929, 4919,  332, 4983, 4935,  320, 4962, 4258,
     4873, 4558, 4689, 4875, 4489, 4386, 4581, 4635, 4663, 4909,
     4846, 4935, 4949, 4977, 4987, 4947, 4989, 4991, 4997, 5015,
     5017, 5020, 5023, 5029, 5035, 5038, 5042, 5049, 5053, 5056,
     5062, 5071, 5074, 5076, 5080, 5082, 5085, 5089, 5095, 5113,
     5115, 5117, 5119, 5126, 5137, 5122, 5128, 5146, 5149, 5156,
     5158, 5161, 5164, 5167, 5176, 5187, 5189, 5191, 5194, 5196,

     5199, 5202, 5214, 5223, 5226, 5228, 5233, 5235, 5241, 5246,
     5248, 5254, 5256, 5282, 3323, 5305, 5295,    0,  313, 5359,
     5312, 5413, 5331, 5285, 5330, 5336, 5362, 5377, 5380, 5382,
     5385, 5416, 5424, 5435, 5427, 5438, 5456, 5460, 5464, 5475,
     5483, 5487, 5489, 5501, 5507, 5509, 5515, 5521, 5529, 5543,
     5548, 5551, 5554, 5556, 5575, 5577, 5579, 5605, 5340, 5628,
     5639,    0,  306, 5682, 5611, 5736, 5654, 5665, 5373, 5790,
     5693, 5844,  296, 5898, 5665, 5952, 5708, 5601, 5713, 5716,
     5739, 5747, 5762, 5759, 5770, 5718, 5801, 5804, 5809, 5815,
     5847, 5855, 5866, 5858, 5909, 5455, 6006, 5924, 6060,  289,

     6114, 5926, 6168, 5937, 5870, 5933, 5956, 5978, 5993, 6017,
     6028, 5878, 6031, 5991, 5982, 6041, 6222, 6089, 6098, 6076,
     5267, 5659, 5783, 5772, 5824, 5987, 5945, 6041, 6078, 5299,
     6107, 6101, 6126, 6122, 5813, 6120, 6134, 6140, 6149, 6172,
     6161, 6174, 6179, 6186, 6182, 6209, 6215, 6228, 6233, 6230,
     6236, 6248, 6243, 6254, 6256, 6261, 6263, 6268, 6275, 6282,
     6287, 6289, 6293, 6296, 6301, 6307, 6314, 6316, 6320, 6322,
     6325, 6328, 6346, 6343, 6350, 6353, 6379, 6213, 6379,    0,
     6403, 6407, 6416, 6412, 6415, 6418, 6420, 6438, 6443, 6446,
     6461, 6465, 6467, 6469, 6473, 6491, 6494, 6502, 6505, 6517,

     6520, 6525, 6543, 6546, 6549, 6551, 6554, 6569, 6572, 6599,
     6589, 6606,    0, 6603, 6630, 6639, 6643, 6654, 6653,    0,
     6667, 6677, 6690, 6686, 6689, 6692, 6694, 6712, 6717, 6593,
     6720, 6731, 6739, 6743, 6762, 6764, 6792, 6801, 6796,    0,
     6810, 6820, 6833, 6800, 6822, 6830, 6835, 6843, 6854, 6882,
     6870, 6735, 6373, 6663, 6867, 6471, 6479, 6741, 6766, 6869,
     6873, 6876, 6878, 6887, 6897, 6899, 6902, 6906, 6909, 6920,
     6912, 6932, 6935, 6938, 6941, 6943, 6945, 6953, 6963, 6965,
     6968, 6971, 6973, 6975, 6983, 6993, 6995, 6998, 7001, 7003,
     7030, 7044, 7034, 7040, 7045, 7048, 7053, 7059, 7072, 7074,

     7086, 7092, 7098, 7104, 7112, 7118, 7123, 7126, 7131, 7146,
     7149, 7157, 7160, 7186, 7177, 7203, 7212, 7202, 7208, 7213,
     7216, 7221, 7234, 7240, 7242, 7246, 7264, 7266, 7277, 7292,
     7289, 7293, 7297, 7311, 7315, 7317, 7319, 7321, 7326, 7329,
     7340, 7344, 7348, 7353, 7359, 7362, 7367, 7372, 7374, 7382,
     7385, 7394, 7392, 7396, 7404, 7406, 7415, 7417, 7419, 7425,
     7430, 7438, 7444, 7450, 7468, 7463, 7481, 7483, 7486, 7489,
     7501, 7504, 7512, 7515, 7523, 7534, 7537, 7542, 7555, 7557,
     7560, 7563, 7582, 7584, 7586, 7588, 7607, 7610, 7613, 7616,
     7621, 7628, 7634, 7639, 7642, 7646, 7648, 7657, 7660, 7666,

     7668, 7671, 7678, 7686, 7689, 7692, 7700, 7711, 7713, 7719,
     7725, 7733, 7737, 7752, 7757, 7760, 7763, 7775, 7778, 7789,
     7797, 7800, 7808, 7811, 7698, 7803, 7821, 7829, 7833, 7836,
     7844, 7855, 7863, 7867, 7869, 7875, 7887, 7890, 7893, 7901,
     7913, 7916, 7905, 7924, 7928, 7942, 7946, 7950, 7954, 7952,
     7965, 7973, 7976, 8903, 8013, 8024, 8035, 8046, 8057, 8064,
     8074, 8081, 8091, 8098, 8108, 8115, 8125, 8132, 8142, 8153,
     8164, 8175, 8185, 8191, 8198, 8205, 8212, 8219, 8229, 8240,
     8250, 8261, 8271, 8282, 8293, 8303, 8314, 8324, 8335, 8346,
     8357, 8368, 8379, 8390, 8401, 8412, 8423, 8434, 8445, 8456,

     8467, 8478, 8489, 8500, 8511, 8522, 8533, 8544, 8555, 8566,
     8577, 8588, 8595, 8606, 8617, 8628, 8639, 8650, 8661, 8672,
     8683, 8694, 8705, 8712, 8723, 8734, 8745, 8756, 8767, 8778,
     8785, 8796, 8807, 8818, 8829, 8840, 8847, 8858, 8869, 8880,
     8891
    } ;

static const flex_int16_t yy_def[1442] =
    {   0,
     1354,    1, 1354,    3, 1354,    5, 1355, 1355, 1354,    9,
     1354,   11,   11,   13, 1356, 1356, 1357, 1357, 1358, 1358,
     1359, 1359, 1354, 1354, 1354, 1354, 1354, 1360, 1361, 1354,
     1360, 1354, 1360, 1360, 1360, 1360, 1360, 1354, 1360, 1360,
     1360, 1360, 1360,   41, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360,   41, 1360, 1360, 1360, 1360, 1360,
     1362, 1363, 1354, 1362, 1362, 1362, 1362, 1362, 1362, 1354,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362,   77, 1362, 1362, 1362, 1362, 1364, 1365,
     1354, 1364, 1364, 1364, 1364, 1364, 1364, 1354, 1364, 1354,

     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1366, 1367, 1354,
     1354, 1366, 1354, 1366, 1366, 1366, 1366, 1354, 1354, 1366,
     1354, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1354, 1354, 1368, 1369, 1368, 1368,
     1368, 1368, 1354, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1354, 1354, 1354, 1354, 1370, 1354,
     1354, 1354, 1354, 1371, 1354, 1354, 1372, 1354, 1354, 1373,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1360, 1361,
     1360, 1374, 1361, 1361, 1360, 1360, 1360, 1354, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,

     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1362, 1363, 1362, 1362, 1375, 1363, 1363, 1362,
     1362, 1362, 1362, 1362, 1362, 1354, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,

     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362,   77, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1364,
     1365, 1364, 1364, 1376, 1365, 1365, 1364, 1364, 1354, 1354,
     1364, 1354, 1364, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1366, 1367, 1366, 1366, 1377, 1367, 1367, 1366, 1366, 1366,
     1366, 1354, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1368, 1369, 1368, 1368, 1378, 1369, 1369,
     1368, 1368, 1354, 1368, 1368, 1368, 1368, 1368, 1368, 1368,

     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1354, 1354, 1354, 1354, 1354, 1370, 1354, 1354, 1354,
     1371, 1372, 1373, 1354, 1360, 1379, 1380, 1380, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,

     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1362, 1381, 1382, 1382, 1362, 1362, 1362, 1362,
       77, 1362, 1362, 1362, 1362,   77, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1364, 1383, 1384,
     1384, 1354, 1354, 1354, 1354, 1385, 1385, 1366, 1386, 1387,
     1387, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1368, 1388, 1389, 1389, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1354, 1354,
     1379, 1379, 1385,  428, 1390, 1391,  428, 1392, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,

     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1381, 1381,  526,
     1393,  526, 1394,  526, 1395, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1383, 1383,
      571, 1396,  571, 1397,  571, 1398, 1354, 1354, 1399, 1386,
     1386,  581, 1400,  581, 1401,  581, 1402, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1388, 1388,  607,
     1403,  607, 1404,  607, 1405, 1368,  609, 1368, 1368,  609,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1390,
     1390, 1399, 1391, 1406,  833, 1407, 1385,  428, 1408, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,

     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1393, 1393, 1394, 1409,  916,  916, 1410,
     1385, 1411, 1412, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1396, 1396, 1397,
     1414,  960,  960, 1415, 1385, 1416, 1417, 1418, 1418, 1419,
     1420, 1419,  972, 1421, 1385, 1422, 1423, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1425, 1425, 1426, 1427, 1426,  999,

     1428, 1385, 1429, 1430, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1432, 1432, 1433, 1434, 1435, 1436, 1436,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1409, 1409, 1433,  916,
     1438, 1412, 1412, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,

     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1414,
     1414, 1433,  960, 1439, 1417, 1417, 1420, 1420, 1433,  972,
     1440, 1423, 1423, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1427, 1427, 1433,  999,
     1441, 1430, 1430, 1431, 1431, 1431, 1431, 1431, 1431, 1435,
     1435, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1438, 1438, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,

     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1439, 1439, 1440, 1440, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1441, 1441,
     1431, 1431, 1431, 1431, 1431, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1431, 1431, 1431, 1431, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,

     1437, 1437, 1437, 1437, 1437, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1431, 1431, 1437, 1437, 1437, 1437, 1437, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1424, 1424, 1424,
     1424, 1424, 1437, 1437, 1413, 1413, 1413, 1413, 1424, 1437,
     1413, 1424, 1413,    0, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,

     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354
    } ;

static const flex_int16_t yy_nxt[8960] =
    {   0,
       24,   25,   26,   24,   27,   25,   25,   28,   29,   30,
       30,   31,   28,   32,   33,   34,   35,   36,   28,   28,
       28,   30,   28,   30,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   28,   46,   28,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       28,   28,   32,   32,   28,   28,   24,   25,   26,   24,
       27,   25,   25,   61,   62,   63,   63,   64,   65,   63,
       66,   65,   61,   61,   67,   68,   61,   63,   61,   63,
       69,   70,   71,   61,   72,   73,   74,   75,   76,   61,
       77,   78,   61,   79,   80,   61,   81,   82,   61,   83,

       84,   85,   86,   87,   61,   61,   61,   61,   63,   63,
       88,   61,   24,   25,   26,   24,   27,   25,   25,   89,
       90,   91,   91,   92,   89,   91,   93,   94,   89,   95,
       96,   89,   89,   91,   89,   91,   97,   98,   89,   89,
       89,   89,   89,   89,   89,   89,   99,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,  100,  100,   89,   89,  102,  103,
      104,  105,  102,  102,  168,  178,  168,  168,  106,  178,
      178,  107,  102,  103,  104,  105,  102,  102,  168,  178,
      168,  168,  106,  178,  178,  107,   24,   25,   26,   24,

       27,   25,   25,  108,  109,  110,  111,  112,  108,  113,
      114,  115,  108,  108,  116,  117,  108,  118,  108,  119,
      120,  121,  122,  108,  123,  124,  108,  125,  126,  108,
      127,  108,  108,  128,  129,  108,  130,  131,  108,  132,
      133,  134,  108,  108,  108,  108,  108,  108,  135,  135,
      108,  108,  136,   25,   26,   24,   27,   25,   25,  137,
      138,  136,  136,  139,  137,  136,  140,  141,  137,  137,
      137,  137,  137,  136,  137,  136,  142,  143,  137,  137,
      144,  137,  145,  137,  137,  137,  146,  147,  137,  137,
      148,  137,  149,  150,  137,  151,  152,  137,  153,  154,

      137,  137,  137,  137,  136,  136,  137,  137,  155,  156,
      157,  158,  155,  155, 1139,  160,  161,  180,  161,  160,
      160, 1119,  162,  160,  161,  179,  161,  160,  160,  273,
      162, 1112,  330,  181,  182,  137,  163,  137, 1079,  184,
      624,  137,  137,  279,  163,  137,  336,  137,  137,  180,
      137,  137,  185,  137,  137,  165,  166, 1016,  166,  165,
      165,  166,  165,  166,  165,  181,  182,  165,  169,  180,
      171,  169,  172,  169,  351,  186,  169,  173,  174,  180,
      384,  180,  810,  180,  624,  181,  182,  180,  357,  837,
      175,  187,  187,  180,  390,  181,  182,  181,  182,  181,

      182,  181,  181,  181,  188,  181, 1354,  183,  810,  181,
      182,  782,  189,  181,  190,  181, 1354,  278,  782,  180,
      176,  177,  191,  169,  169,  180,  171,  169,  172,  169,
      192,  180,  169,  173,  174,  181,  182,  340,  179,  180,
      340,  181,  182,  771,  181,  181,  175,  181,  182,  180,
      179,  193,  184,  202,  194,  181,  182,  195,  771,  217,
      720,  218,  720,  203,  184,  181,  182,  204,  720,  205,
      418,  180,  419,  921,  219,  180,  176,  177,  180,  169,
      180,  206,  180,  207,  208,  624,  420,  181,  182,  273,
      209,  181,  182,  273,  181,  182,  181,  182,  181,  182,

      223,  196,  220,  279,  222,  197,  221,  279,  330,  198,
      199,  224,  200,  246,  225,  201,  179,  330,  226,  180,
      179,  210,  336,  413,  211,  212,  180,  213, 1354,  335,
      214,  336,  215,  351,  216,  181,  182,  227,  228,  351,
      180,  229,  181,  182,  232,  230,  384,  357,  233,  180,
      413,  231,  779,  357, 1354,  356,  181,  182,  234,  236,
      390,  180,  779,  237,  235,  181,  182,  241,  384,  180,
      238,  239,  345,  240, 1354,  389,  180,  181,  182,  247,
      180,  242,  390,  248,  243,  181,  182,  244,  345,  245,
      249,  778,  181,  182,  269,  270,  181,  182,  425,  250,

      251,  252,  260,  180,  253,  261,  262,  264,  254,  255,
      180,  256,  622,  771,  257,  263,  258,  259,  965,  181,
      182,  265,  523, 1354,  621,  266,  181,  182,  274,  267,
      274,  777,  274,  280,  271,  275,  719,  275,  180,  275,
      272,  268, 1354,  718,  276,  277,  276,  277,  276,  277,
      274, 1354,  769,  274,  181,  188,  281,  275,  274,  620,
      275,  274,  282,  283,  284,  275,  276,  277,  275,  276,
      277,  424,  424,  285,  276,  286,  568,  276,  277,  276,
      276,  274,  619,  276,  577,  274,  578,  274,  275,  274,
      770,  276,  275,  276,  275,  604,  275,  276,  277,  576,

      781,  276,  277,  276,  277,  276,  277,  302,  575,  809,
      574,  296,  350,  274,  424,  424,  180,  287,  297,  274,
      275,  298,  276,  276,  274,  425,  275,  274,  299,  276,
      277,  275,  181,  182,  275,  276,  277,  523,  308,  622,
      276,  277,  782,  276,  277,  300,  288,  975,  301,  349,
      274,  719, 1354,  289,  290,  430,  291,  275,  292,  293,
      294,  295,  274,  327,  274, 1354,  276,  277,  309,  275,
      274,  275,  310, 1354,  780, 1354,  568,  275,  276,  277,
      276,  277,  328,  303,  274,  304,  276,  277,  274,  311,
      770,  275,  312,  305,  180,  275,  180,  427,  306,  307,

      276,  277,  274,  314,  276,  277,  313,  578, 1354,  275,
      181,  182,  181,  182, 1354,  808,  604,  315,  276,  277,
      316,  781,  320,  317,  273, 1354, 1354,  180,  318,  274,
      809,  319,  273,  321,  322, 1354,  275,  273,  323,  324,
      274, 1354,  331,  181,  182,  276,  277,  275,  331,  332,
     1354,  325,  329,  180,  338,  332,  276,  277,  333,  334,
      331,  326, 1354,  337,  333,  334,  810,  332, 1354,  181,
      182, 1002,  180, 1354,  434, 1354,  333,  334,  339,  340,
      339,  339,  339,  339, 1354,  331, 1354,  331,  181,  182,
      331, 1354,  332,  331,  332,  341,  341,  332,  436, 1354,

      332,  333,  334,  333,  334,  384,  333,  334, 1354,  333,
      342,  333,  333,  331,  384,  333, 1354, 1354,  384, 1006,
      332,  384,  180,  333,  352,  333, 1354, 1354,  428,  333,
      334,  353,  344,  345,  346,  346,  344,  344,  181,  182,
      354,  355,  347, 1354,  343,  348,  346,  345,  346,  346,
      346,  346, 1354, 1354,  333,  333,  347, 1354, 1354,  348,
      346,  345,  346,  346,  346,  346, 1354, 1354,  352, 1354,
      347,  358,  352,  348,  352,  353,  352, 1354,  359,  353,
     1354,  353,  180,  353,  354,  355, 1354,  360,  354,  355,
      354,  355,  354,  355,  352, 1354,  352, 1354,  181,  182,

     1354,  353, 1354,  353,  354,  354,  361,  352,  354, 1354,
      354,  355,  354,  362,  353,  352,  354,  447,  354,  352,
     1354,  352,  353,  354,  355, 1354,  353, 1354,  353, 1354,
     1354,  354,  355,  352, 1354,  354,  355,  354,  355,  369,
      353,  366,  180,  363, 1354, 1354,  352,  354,  354,  354,
      355,  364, 1354,  353,  352, 1354,  365,  352,  181,  182,
     1354,  353,  354,  355,  353,  367, 1354,  370,  368,  371,
      354,  355,  373,  354,  355,  352,  374, 1354,  450,  375,
      352, 1354,  353,  372, 1354, 1354, 1354,  353,  352, 1354,
     1354,  354,  355,  376,  377,  353,  354,  355, 1354, 1354,

      352, 1354,  352, 1354,  354,  355,  385,  353, 1354,  353,
     1354, 1354,  378,  386,  380,  379,  354,  355,  354,  355,
     1354, 1354,  387,  388,  385, 1354, 1354,  391, 1354,  385,
     1354,  386,  385,  381,  383,  392,  386,  382, 1354,  386,
      387,  388, 1354,  385, 1354,  387,  388, 1354,  387,  388,
      386,  387,  387, 1354,  385,  387, 1354,  385, 1354,  387,
      393,  386,  385,  387,  386,  387, 1354, 1354, 1354,  386,
      387,  388, 1354,  387,  388, 1354,  180, 1354,  387,  388,
     1354,  403, 1354,  385, 1354,  402, 1354, 1354,  400,  180,
      386,  397,  181,  182,  387,  387,  385, 1354,  401,  387,

      388, 1354,  397,  386,  385,  181,  182,  385,  429, 1354,
      439,  386,  387,  388,  386, 1354, 1354, 1354,  394,  404,
      387,  388,  385,  387,  388,  395,  396,  385, 1354,  386,
      397,  398,  399,  385,  386, 1354, 1354,  405,  387,  388,
      386,  180,  406,  387,  388,  385, 1354, 1354,  397,  387,
      388,  397,  386, 1354, 1354, 1354, 1354,  181,  182,  407,
     1354,  387,  388,  411,  408,  409, 1354, 1354, 1354,  410,
      412,  413,  414,  414,  412,  412,  457,  426,  181,  181,
      415, 1354,  181,  416,  414,  413,  414,  414,  414,  414,
      181, 1354,  181, 1354,  415, 1354,  180,  416,  414,  413,

      414,  414,  414,  414,  187,  187,  181,  181,  415,  180,
      181,  416,  181,  182,  180, 1354, 1354,  180,  181, 1354,
      181,  181,  181, 1354,  180,  181,  182, 1354, 1354, 1354,
      181,  182, 1354,  181,  182,  431,  180, 1354,  432,  435,
      181,  182, 1354,  180, 1354,  180,  437,  180, 1354,  181,
      181,  433,  181,  182,  180, 1354, 1354, 1354,  438,  181,
      182,  181,  182,  181,  182, 1354,  445,  444, 1354,  180,
      181,  182,  440,  441,  442, 1354, 1354,  180, 1354, 1354,
      180,  443, 1354,  446,  448,  181,  182,  180, 1354,  180,
     1354, 1354,  449,  181,  182,  180,  181,  182,  180,  451,

      452, 1354,  180,  181,  182,  181,  182,  455,  180, 1354,
     1354,  181,  182,  180,  181,  182,  454,  453,  181,  182,
      458,  180, 1354, 1354,  181,  182,  180,  456, 1354,  181,
      182,  180, 1354,  261, 1354, 1354,  180,  181,  182,  180,
      459, 1354,  181,  182,  461,  180, 1354,  181,  182,  180,
     1354,  462,  181,  182, 1354,  181,  182,  180,  460, 1354,
      180,  181,  182,  180,  465,  181,  182,  180, 1354,  180,
      464,  463, 1354,  181,  182,  466,  181,  182,  180,  181,
      182,  180, 1354,  181,  182,  181,  182, 1354,  180,  467,
      180, 1354,  180, 1354,  181,  182,  180,  181,  182,  470,

      468,  180,  472,  469,  181,  182,  181,  182,  181,  182,
     1354, 1354,  181,  182, 1354,  180, 1354,  181,  182,  471,
      180, 1354, 1354,  473,  180, 1354,  476,  475,  261,  180,
      474,  181,  182,  180, 1354, 1354,  181,  182,  477,  180,
      181,  182, 1354,  180, 1354,  181,  182,  180, 1354,  181,
      182,  273,  478,  729, 1354,  181,  182,  180, 1354,  181,
      182,  273, 1354,  181,  182,  479,  730,  273,  480,  483,
      481,  180,  482,  181,  182,  484,  180, 1354,  486,  180,
     1354, 1354,  180,  485, 1354,  180, 1354,  181,  182,  180,
     1354,  180,  181,  182, 1354,  181,  182,  487,  181,  182,

      489,  181,  182, 1354, 1354,  181,  182,  181,  182,  496,
      180,  494, 1354,  488,  180,  490,  180, 1354,  491,  492,
      497,  493,  180, 1354,  180,  495,  181,  182,  498, 1354,
      181,  182,  181,  182,  180, 1354, 1354, 1354,  181,  182,
      181,  182,  499,  180, 1354, 1354,  500,  180,  501, 1354,
      181,  182, 1354,  502,  180, 1354,  504,  503,  180,  181,
      182,  505, 1354,  181,  182,  506,  508,  180,  261, 1354,
      181,  182, 1354, 1354,  181,  182,  180,  509,  507,  180,
     1354,  180, 1354,  181,  182,  512, 1354,  180,  511,  180,
      510,  180,  181,  182,  180,  181,  182,  181,  182, 1354,

      517, 1354,  513,  181,  182,  181,  182,  181,  182,  516,
      181,  182,  180,  518,  514,  180,  515, 1354,  521, 1354,
      274, 1354, 1354,  519, 1354, 1354,  520,  275,  181,  182,
      384,  181,  182,  522,  274, 1354,  276,  277,  274,  384,
     1354,  275, 1354,  384, 1007,  275, 1354,  524,  276,  276,
      276,  277,  276, 1354,  276,  286,  274, 1354,  274,  525,
      276,  274,  276,  275,  526,  275, 1354,  180,  275,  274,
     1354, 1354,  276,  277,  276,  277,  275,  276,  277, 1354,
      274, 1354,  274,  181,  182,  276,  277,  275, 1354,  275,
     1354,  276,  276, 1354,  180, 1354,  276,  277,  276,  277,

      276,  276,  274, 1354,  276, 1354,  274, 1354,  274,  275,
      181,  182,  276,  275,  276,  275,  180, 1354,  276,  277,
      274, 1354,  276,  277,  276,  277,  528,  275, 1354,  629,
     1354,  180,  181,  182,  274, 1354,  276,  277,  527,  529,
      292,  275,  274,  276,  276,  274, 1354,  181,  182,  275,
      276,  277,  275,  274, 1354, 1354,  274,  630,  276,  277,
      275,  276,  277,  275,  530,  531, 1354, 1354, 1354,  276,
      277,  274,  276,  277,  532,  274, 1354,  533,  275, 1354,
     1354, 1354,  275,  274, 1354,  534,  274,  276,  277, 1354,
      275,  276,  277,  275,  274, 1354,  536, 1354,  274,  276,

      277,  275,  276,  277, 1354,  275, 1354, 1354,  535,  274,
      276,  277, 1354, 1354,  276,  277,  275,  274, 1354,  180,
     1354,  274, 1354,  537,  275,  276,  277,  541,  275,  538,
      539,  542,  274,  276,  277,  181,  182,  276,  277,  275,
      274, 1354, 1354,  543,  274, 1354,  540,  275,  276,  277,
     1354,  275,  544, 1354,  632,  274,  276,  277,  274, 1354,
      276,  277,  275,  274, 1354,  275,  545, 1354, 1354, 1354,
      275,  276,  277, 1354,  276,  277,  274,  547, 1354,  276,
      277, 1354, 1354,  275,  274, 1354,  549,  546,  273,  274,
      273,  275,  276,  277, 1354,  548,  275,  550,  273, 1354,

      276,  277,  274,  551,  552,  276,  277,  274,  553,  275,
      274, 1354, 1354,  555,  275, 1354,  554,  275,  276,  277,
     1354,  274, 1354,  276,  277, 1354,  276,  277,  275, 1354,
     1354,  557,  558,  274, 1354, 1354, 1354,  276,  277,  274,
      275,  274,  559,  556,  274,  560,  275,  274,  275,  276,
      277,  275,  274, 1354,  275,  276,  277,  276,  277,  275,
      276,  277, 1354,  276,  277, 1354,  562,  274,  276,  277,
      274,  564,  274, 1354,  275, 1354,  561,  275,  274,  275,
     1354, 1354,  563,  276,  277,  275,  276,  277,  276,  277,
      274, 1354,  331, 1354,  276,  277, 1354,  275,  566,  332,

      180, 1354,  565,  331, 1354,  331,  276,  277,  333,  334,
      332, 1354,  332,  567,  180, 1354,  181,  182,  631,  333,
      334,  333,  342,  569,  333,  333,  331, 1354,  333,  570,
      181,  182, 1354,  332,  331, 1354,  333, 1354,  333, 1354,
      571,  332,  333,  334,  339,  340,  339,  339,  339,  339,
      333,  334, 1354,  331,  572, 1354,  633,  573, 1354, 1354,
      332,  341,  341, 1354, 1354, 1354, 1354,  333,  333,  333,
      334,  333,  333,  331, 1354,  333,  623, 1354,  183,  623,
      332,  352,  183,  333, 1354,  333,  180, 1354,  353,  333,
      334,  344,  345,  346,  346,  344,  344,  354,  355, 1354,

     1354,  347,  181,  182,  348,  352,  346,  345,  346,  346,
      346,  346,  353,  352,  333,  333,  347, 1354, 1354,  348,
      353,  354,  355,  579,  354,  354, 1354,  352,  354,  354,
      362, 1354,  352,  581,  353,  580,  354,  180,  354,  353,
      352, 1354, 1354,  354,  355,  352, 1354,  353,  354,  355,
     1354, 1354,  353,  181,  182,  634,  354,  355,  352,  354,
      354,  354,  355,  354, 1354,  353,  180,  354,  354,  352,
     1354,  354,  352,  354,  354,  355,  353, 1354, 1354,  353,
      352, 1354,  181,  182, 1354,  354,  355,  353,  354,  355,
     1354,  352, 1354,  180,  582,  635,  354,  355,  353,  583,

      584, 1354,  354,  354,  585,  352, 1354,  354,  355,  181,
      182,  352,  353,  352, 1354, 1354,  180,  586,  353, 1354,
      353,  354,  355,  590,  352,  638,  587,  354,  355,  354,
      355,  353,  181,  182,  637,  591,  352,  588,  352, 1354,
      354,  355, 1354,  353,  352,  353,  180, 1354,  589,  352,
     1354,  353,  354,  355,  354,  355,  353,  352,  592, 1354,
      354,  355,  181,  182,  353,  354,  355,  594, 1354, 1354,
     1354,  352, 1354,  354,  355,  593,  352,  645,  353,  595,
      180,  590, 1354,  353,  352,  596,  597,  354,  355, 1354,
     1354,  353,  354,  355, 1354,  352,  181,  182,  598, 1354,

      354,  355,  353, 1354, 1354,  599,  600,  352, 1354,  352,
      639,  354,  355,  640,  353,  352,  353, 1354, 1354,  601,
      385, 1354,  353,  354,  355,  354,  355,  386, 1354,  602,
      180,  354,  355,  385, 1354,  385,  387,  388, 1354, 1354,
      386, 1354,  386, 1354,  603,  180,  181,  182, 1354,  387,
      388,  387,  393,  605,  387,  387,  385, 1354,  387,  606,
      385,  181,  182,  386,  385,  636,  387,  386,  387, 1354,
      607,  386,  387,  388,  387,  387,  387,  388,  387, 1354,
      387,  388, 1354,  385, 1354, 1354,  387, 1354,  387,  385,
      386, 1354, 1354, 1354,  397,  385,  386,  387,  387,  387,

      388,  608,  386,  385, 1354,  387,  388,  385,  397,  385,
      386,  387,  388, 1354,  386, 1354,  386,  387,  387,  387,
      388, 1354,  385,  387,  388,  387,  388,  385,  397,  386,
      609, 1354,  397,  385,  386, 1354, 1354,  180,  387,  388,
      386,  385, 1354,  387,  388,  385, 1354,  611,  386,  387,
      388, 1354,  386,  181,  182, 1354,  385,  387,  388,  610,
     1354,  387,  388,  386,  385,  397, 1354,  385, 1354,  612,
      650,  386,  387,  388,  386,  385, 1354,  397, 1354,  385,
      387,  388,  386,  387,  388, 1354,  386,  180,  613, 1354,
      385,  387,  388, 1354,  616,  387,  388,  386,  180,  614,

      180, 1354,  615,  181,  182,  617,  387,  388,  412,  413,
      414,  414,  412,  412,  181,  182,  181,  182,  415,  646,
     1354,  416, 1354, 1354, 1354,  618,  414,  413,  414,  414,
      414,  414, 1354, 1354, 1354,  180,  415, 1354,  647,  416,
      623, 1354, 1354,  623, 1354, 1354, 1354, 1354,  625,  623,
      623,  181,  182,  623, 1354,  641,  642,  180, 1354,  180,
      626,  623, 1354,  623,  627,  628,  180, 1354, 1354,  180,
     1354,  643,  644,  181,  182,  181,  182, 1354, 1354,  648,
     1354,  649,  181,  182,  180,  181,  182, 1354, 1354, 1354,
      658, 1354,  623,  623,  623,  180, 1354,  623,  652, 1354,

      181,  182,  625,  623,  623,  180,  651,  623,  180, 1354,
     1354,  181,  182,  180,  626,  623, 1354,  623,  627,  628,
      180,  181,  182,  180,  181,  182,  180,  653, 1354,  181,
      182, 1354,  654, 1354,  261,  180,  181,  182,  180,  181,
      182,  180,  181,  182,  180,  655,  623,  623,  180, 1354,
      656,  181,  182, 1354,  181,  182,  180,  181,  182,  180,
      181,  182,  662,  657,  181,  182,  661,  660,  659,  180,
      663,  180,  181,  182,  180,  181,  182,  664,  180, 1354,
      180, 1354,  180, 1354, 1354,  181,  182,  181,  182,  666,
      181,  182,  665,  180,  181,  182,  181,  182,  181,  182,

     1354,  668, 1354,  180, 1354, 1354,  667,  180, 1354,  181,
      182,  180, 1354,  180, 1354,  180, 1354,  670,  669,  181,
      182,  180,  671,  181,  182,  180,  673,  181,  182,  181,
      182,  181,  182,  672,  674,  180, 1354,  181,  182, 1354,
     1354,  181,  182,  675,  180, 1354,  180, 1354,  180, 1354,
      677,  181,  182, 1354,  180, 1354,  678,  676, 1354, 1354,
      181,  182,  181,  182,  181,  182, 1354, 1354,  180,  680,
      181,  182,  180,  682,  180,  679,  180, 1354,  180, 1354,
      180, 1354, 1354,  681,  181,  182,  180, 1354,  181,  182,
      181,  182,  181,  182,  181,  182,  181,  182,  684, 1354,

      687,  180,  181,  182,  180,  683, 1354, 1354,  180, 1354,
      180, 1354,  685,  180,  686,  688, 1354,  181,  182,  180,
      181,  182,  180,  689,  181,  182,  181,  182,  180,  181,
      182,  180,  691, 1354,  180,  181,  182,  694,  181,  182,
      693,  180, 1354,  690,  181,  182, 1354,  181,  182,  261,
      181,  182,  180, 1354, 1354, 1354,  180,  181,  182,  692,
      180, 1354,  696,  180, 1354, 1354,  180, 1354,  181,  182,
      180,  695,  181,  182,  700,  180,  181,  182,  180,  181,
      182,  697,  181,  182, 1354, 1354,  181,  182,  180,  698,
     1354,  181,  182,  699,  181,  182,  702,  704,  706,  701,

      180,  705,  180, 1354,  181,  182,  180,  703,  180, 1354,
     1354,  707,  180, 1354,  180, 1354,  181,  182,  181,  182,
     1354,  710,  181,  182,  181,  182,  708, 1354,  181,  182,
      181,  182,  180, 1354,  180, 1354,  709,  180, 1354,  712,
     1354, 1354,  180,  714, 1354,  274,  711,  713,  181,  182,
      181,  182,  275,  181,  182, 1354,  274,  715,  181,  182,
      274,  276,  277,  275,  274,  716, 1354,  275, 1354, 1354,
     1354,  275,  276,  277,  717,  623,  276,  277,  623,  840,
      276,  277, 1354,  721,  623,  623,  274, 1354,  623,  180,
      722, 1354,  726,  275,  728,  723,  623,  274,  623,  724,

      725,  274,  276,  277,  275,  181,  182, 1354,  275,  274,
     1354, 1354, 1354,  276,  277,  843,  275,  276,  277,  180,
     1354, 1354,  727, 1354,  274,  276,  277,  623,  623,  623,
     1354,  275,  623, 1354, 1354,  181,  182,  721,  623,  623,
      276,  277,  623, 1354,  722, 1354,  732, 1354, 1354,  723,
      623, 1354,  623,  724,  725,  273, 1354,  733,  180,  731,
     1354,  274, 1354, 1354,  546,  273,  734, 1354,  275,  274,
      735,  736,  274,  737,  181,  182,  275,  276,  277,  275,
      274,  623,  623,  738,  274,  276,  277,  275,  276,  277,
     1354,  275, 1354, 1354,  841, 1354,  276,  277, 1354,  739,

      276,  277,  740,  274, 1354,  742,  274, 1354, 1354,  743,
      275,  274, 1354,  275,  274,  741, 1354,  274,  275,  276,
      277,  275,  276,  277,  275,  274, 1354,  276,  277, 1354,
      276,  277,  275,  276,  277, 1354,  744,  745,  274, 1354,
      746,  276,  277, 1354, 1354,  275,  274,  748, 1354,  747,
      274, 1354,  274,  275,  276,  277,  180,  275,  274,  275,
      749, 1354,  276,  277,  274,  275,  276,  277,  276,  277,
      274,  275,  181,  182,  276,  277,  753,  275,  274, 1354,
      276,  277,  751,  750,  844,  275,  276,  277,  752,  274,
     1354,  274,  755, 1354,  276,  277,  275,  274,  275, 1354,

      754, 1354,  274,  756,  275,  276,  277,  276,  277,  275,
     1354, 1354, 1354,  276,  277,  274, 1354,  758,  276,  277,
      274, 1354,  275,  623, 1354,  278,  623,  275,  274,  278,
     1354,  276,  277,  757,  274,  275,  276,  277, 1354,  759,
      760,  275,  274, 1354,  276,  277, 1354,  274,  762,  275,
      276,  277,  763,  274,  275, 1354, 1354,  761,  276,  277,
      275, 1354,  764,  276,  277,  274, 1354, 1354, 1354,  276,
      277, 1354,  275,  331, 1354, 1354,  352,  766,  765,  352,
      332,  276,  277,  353,  767, 1354,  353,  352, 1354,  333,
      334,  352,  354,  355,  353,  354,  355, 1354,  353, 1354,

     1354,  768,  623,  354,  355,  623, 1354,  354,  355,  789,
      772,  623,  623,  352, 1354,  623,  180,  773, 1354,  788,
      353,  793,  774,  623,  352,  623,  775,  776,  352,  354,
      355,  353,  181,  182, 1354,  353,  790, 1354, 1354, 1354,
      354,  355, 1354, 1354,  354,  355, 1354, 1354, 1354,  791,
     1354,  352,  842, 1354,  623,  623,  623,  180,  353,  623,
     1354,  792, 1354,  590,  772,  623,  623,  354,  355,  623,
     1354,  773,  180,  181,  182,  352,  774,  623, 1354,  623,
      775,  776,  353, 1354, 1354,  846,  352, 1354,  181,  182,
      352,  354,  355,  353,  794, 1354,  858,  353,  352, 1354,

      795, 1354,  354,  355, 1354,  353,  354,  355,  623,  623,
      623, 1354,  799,  623,  354,  355, 1354, 1354,  783,  623,
      623, 1354, 1354,  623, 1354,  784, 1354, 1354,  796,  797,
      785,  623,  352,  623,  786,  787,  352, 1354,  352,  353,
      352, 1354,  180,  353,  352,  353, 1354,  353,  354,  355,
     1354,  353,  354,  355,  354,  355,  354,  355,  181,  182,
      354,  355,  623,  623,  623, 1354,  802,  623,  853,  590,
      590,  798,  783,  623,  623,  352,  800,  623, 1354,  784,
     1354,  180,  353,  352,  785,  623, 1354,  623,  786,  787,
      353,  354,  355,  801,  352, 1354,  352,  181,  182,  354,

      355,  353,  352,  353, 1354, 1354, 1354,  855, 1354,  353,
      354,  355,  354,  355,  804,  180,  623,  623,  354,  355,
      352,  805,  806,  385, 1354,  803,  385,  353, 1354,  180,
      386,  181,  182,  386, 1354, 1354,  354,  355,  807,  387,
      388,  623,  387,  388,  623,  181,  182,  849,  822,  811,
      623,  623,  385,  857,  623,  180,  812, 1354, 1354,  386,
      385,  813,  623,  385,  623,  814,  815,  386,  387,  388,
      386,  181,  182, 1354,  385, 1354,  387,  388, 1354,  387,
      388,  386, 1354, 1354,  859,  385, 1354, 1354,  816,  823,
      387,  388,  386,  623,  623,  623,  180, 1354,  623,  397,

     1354,  387,  388,  811,  623,  623, 1354,  385,  623, 1354,
      812,  824,  181,  182,  386,  813,  623, 1354,  623,  814,
      815,  385,  825,  387,  388,  826, 1354,  385,  386,  180,
     1354, 1354, 1354,  845,  386,  385, 1354,  387,  388, 1354,
     1354,  827,  386,  387,  388,  181,  182,  623,  623,  385,
     1354,  387,  388, 1354, 1354, 1354,  386,  828,  829,  180,
     1354,  623,  183, 1354,  623,  387,  388,  183, 1354,  624,
     1354,  397,  817, 1354,  180,  181,  182, 1354, 1354,  818,
     1354,  819, 1354,  831, 1354,  820,  821, 1354,  818,  832,
      181,  182,  832, 1354,  847, 1354, 1354,  834,  832,  832,

      180, 1354,  832,  180, 1354,  180, 1354,  180, 1354,  848,
      832,  180,  832,  835,  836, 1354,  181,  182,  180,  181,
      182,  181,  182,  181,  182,  852,  850,  181,  182, 1354,
     1354, 1354,  851,  180,  181,  182, 1354, 1354,  180, 1354,
      864,  832,  832,  623,  854,  860,  623, 1354,  856,  181,
      182,  839,  627,  627,  181,  182,  627, 1354,  180, 1354,
      180, 1354,  180, 1354,  627,  180,  627,  623,  623, 1354,
      180,  862, 1354,  861,  181,  182,  181,  182,  181,  182,
      866,  181,  182, 1354, 1354, 1354,  181,  182,  180,  863,
      180, 1354, 1354,  180, 1354,  627,  627,  865, 1354,  180,

      867,  868,  180, 1354,  181,  182,  181,  182,  180,  181,
      182, 1354, 1354,  869,  871,  181,  182,  180,  181,  182,
      180, 1354,  180, 1354,  181,  182,  180, 1354,  870, 1354,
      180,  873,  180,  181,  182,  872,  181,  182,  181,  182,
      180, 1354,  181,  182,  180,  874,  181,  182,  181,  182,
     1354,  180,  875,  180, 1354,  180,  181,  182,  180,  876,
      181,  182,  879, 1354,  877,  180,  878,  181,  182,  181,
      182,  181,  182,  880,  181,  182,  180, 1354,  180, 1354,
      882,  181,  182,  180, 1354,  180,  881,  180, 1354,  180,
     1354, 1354,  181,  182,  181,  182,  180, 1354, 1354,  181,

      182,  181,  182,  181,  182,  181,  182,  885,  886,  884,
      180, 1354,  181,  182, 1354,  883,  180, 1354,  180, 1354,
     1354,  180, 1354,  180, 1354,  180,  181,  182,  887, 1354,
      888, 1354,  181,  182,  181,  182,  890,  181,  182,  181,
      182,  181,  182, 1354,  180,  892,  889,  891, 1354,  180,
     1354,  180, 1354,  180, 1354, 1354, 1354,  180, 1354,  493,
      181,  182,  180, 1354,  893,  181,  182,  181,  182,  181,
      182,  180,  894,  181,  182,  180, 1354, 1354,  181,  182,
      180, 1354,  180, 1354, 1354,  180, 1354,  181,  182,  895,
     1354,  181,  182,  896, 1354, 1354,  181,  182,  181,  182,

      897,  181,  182, 1354,  180, 1354,  898,  180, 1354, 1354,
      180,  899,  180, 1354,  180, 1354,  180, 1354, 1354,  900,
      181,  182,  901,  181,  182,  902,  181,  182,  181,  182,
      181,  182,  181,  182,  180, 1354,  904,  180, 1354,  180,
     1354, 1354, 1354,  903,  180, 1354,  180, 1354, 1354,  180,
      181,  182,  906,  181,  182,  181,  182,  180,  905,  180,
      181,  182,  181,  182,  909,  181,  182,  180, 1354, 1354,
      180,  907, 1354,  181,  182,  181,  182, 1354, 1354,  910,
      908,  911, 1354,  181,  182,  912,  181,  182,  623,  278,
      913,  623,  274, 1354,  278, 1354,  720, 1354, 1354,  275,

      274, 1354, 1354, 1354, 1354, 1354,  274,  275,  276,  277,
      915,  832,  924,  275,  832, 1354,  276,  277, 1354,  917,
      832,  832,  276,  277,  832, 1354,  918, 1354, 1354, 1354,
      274, 1354,  832,  274,  832,  919,  920,  275,  926, 1354,
      275,  274,  925, 1354,  274, 1354,  276,  277,  275,  276,
      277,  275, 1354, 1354, 1354,  274,  927,  276,  277, 1354,
      276,  277,  275,  832,  832,  623,  180, 1354,  623, 1354,
      928,  276,  277,  923,  724,  724,  929,  274,  724, 1354,
      274, 1354,  181,  182,  275,  546,  724,  275,  724,  623,
      623, 1354,  930,  276,  277,  274,  276,  277, 1354,  274,

     1354, 1354,  275,  274, 1354,  546,  275,  546, 1354, 1354,
      275,  276,  277, 1354, 1354,  276,  277,  724,  724,  276,
      277,  274, 1354, 1354,  274,  546,  274, 1354,  275,  274,
     1354,  275,  931,  275,  932, 1354,  275,  276,  277,  933,
      276,  277,  276,  277, 1354,  276,  277,  274,  934,  274,
     1354,  935,  274, 1354,  275,  274,  275, 1354, 1354,  275,
      274, 1354,  275,  276,  277,  276,  277,  275,  276,  277,
     1354,  276,  277, 1354,  274, 1354,  276,  277,  940,  936,
      274,  275,  937, 1354, 1354,  274, 1354,  275,  274,  938,
      276,  277,  275,  939,  180,  275,  276,  277, 1354,  274,

     1354,  276,  277,  941,  276,  277,  275,  274, 1354, 1354,
      181,  182, 1354,  274,  275,  276,  277,  943,  274, 1354,
      275,  942, 1354,  276,  277,  275,  274, 1354,  944,  276,
      277, 1354,  274,  275,  276,  277, 1354,  274,  945,  275,
     1354, 1354,  276,  277,  275, 1354, 1354, 1354,  276,  277,
      274, 1354, 1354,  276,  277, 1354, 1354,  275,  946,  948,
     1354,  274,  947,  274, 1354, 1354,  276,  277,  275,  274,
      275, 1354,  949, 1354,  274, 1354,  275,  276,  277,  276,
      277,  275, 1354, 1354, 1354,  276,  277,  274, 1354,  274,
      276,  277, 1354,  274,  275,  952,  275,  180,  950,  951,

      275,  274, 1354,  276,  277,  276,  277,  956,  275,  276,
      277,  953,  274,  181,  182, 1354,  954,  276,  277,  275,
     1354,  955, 1354, 1026,  623,  335, 1354,  623,  276,  277,
      335, 1354,  771, 1354, 1354,  352,  957,  623,  356, 1354,
      623, 1354,  353,  356, 1354,  782,  959,  832, 1354, 1354,
      832,  354,  355, 1354, 1354,  961,  832,  832,  352,  969,
      832, 1354,  962, 1354, 1354,  353,  180, 1354,  832,  352,
      832,  963,  964,  979,  354,  355,  353,  352,  978, 1354,
      352, 1354,  181,  182,  353,  354,  355,  353, 1023,  180,
     1354,  352, 1354,  354,  355,  980,  354,  355,  353,  832,

      832,  623, 1354, 1354,  623,  181,  182,  354,  355,  967,
      775,  775,  352, 1354,  775, 1354, 1354,  981,  590,  353,
      352, 1354,  775,  590,  775,  623,  623,  353,  354,  355,
      982, 1354,  352, 1354,  352, 1354,  354,  355, 1354,  353,
     1354,  353,  983,  180, 1354,  352, 1354, 1354,  354,  355,
      354,  355,  353,  775,  775,  832,  984, 1354,  832,  181,
      182,  354,  355,  971,  832,  832,  352, 1354,  832,  986,
      972,  180, 1354,  353,  352,  991,  832,  352,  832,  973,
      974,  353,  354,  355,  353, 1354, 1354,  181,  182,  352,
      354,  355,  987,  354,  355,  988,  353,  180, 1354,  985,

     1354, 1354, 1027, 1354,  352,  354,  355,  832,  832,  623,
      989,  353,  623,  181,  182, 1354, 1024,  977,  786,  786,
      354,  355,  786, 1354,  990, 1354, 1354, 1354,  352, 1354,
      786,  352,  786,  623,  623,  353,  352, 1354,  353,  352,
     1354, 1354,  385,  353,  354,  355,  353,  354,  355,  386,
      992, 1354,  354,  355, 1354,  354,  355, 1354,  387,  388,
      385,  786,  786,  623,  389,  993,  623,  386,  590,  389,
     1354,  810, 1354,  994,  385, 1354,  387,  388, 1005, 1354,
     1354,  386, 1354, 1354, 1354,  996,  832, 1354, 1354,  832,
      387,  388, 1354, 1354,  998,  832,  832, 1354,  385,  832,

     1354,  999, 1354, 1354,  818,  386, 1354,  832, 1354,  832,
     1000, 1001, 1354,  385,  387,  388, 1354,  385, 1354,  385,
      386, 1354, 1354,  818,  386, 1354,  386, 1354, 1354,  387,
      388, 1354, 1354,  387,  388,  387,  388, 1354,  832,  832,
      623, 1010, 1354,  623, 1008, 1354, 1354, 1354, 1004,  814,
      814,  385, 1354,  814,  180, 1009, 1354, 1354,  386,  385,
     1354,  814,  385,  814,  623,  623,  386,  387,  388,  386,
      181,  182, 1354,  385, 1354,  387,  388, 1354,  387,  388,
      386,  180, 1354,  180, 1354, 1029, 1354,  397, 1354,  387,
      388, 1012,  814,  814,  385, 1354, 1011,  181,  182,  181,

      182,  386, 1354, 1021, 1025, 1013,  623,  183, 1354,  623,
      387,  388,  183, 1022,  624, 1354, 1354,  180,  397,  832,
      183, 1354,  832, 1354, 1354,  183, 1354,  833,  831,  832,
     1354, 1354,  832,  181,  182, 1354, 1354,  834,  832,  832,
     1354, 1015,  832,  180,  627,  627, 1028, 1354,  627, 1354,
      832, 1354,  832,  835,  836,  180,  627,  180,  627,  181,
      182, 1030,  623,  621, 1354,  623, 1354, 1354,  621, 1354,
      838,  181,  182,  181,  182, 1354, 1354, 1354, 1354, 1354,
     1354,  832,  832,  832, 1020,  180,  832,  627,  627, 1354,
     1354, 1018,  835,  835, 1031,  180,  835,  180, 1354,  180,

     1354,  181,  182, 1032,  835,  180,  835,  832,  832, 1354,
     1354,  181,  182,  181,  182,  181,  182, 1034, 1354, 1354,
     1354,  181,  182,  180, 1354,  180, 1033, 1035,  180, 1354,
     1354,  180, 1354, 1354, 1354,  835,  835,  180, 1354,  181,
      182,  181,  182,  180,  181,  182,  180,  181,  182, 1038,
      180, 1037, 1039,  181,  182, 1354, 1354,  180, 1036,  181,
      182,  180,  181,  182,  180, 1041,  181,  182, 1354, 1354,
      180, 1354, 1040,  181,  182, 1044, 1043,  181,  182,  180,
      181,  182,  180, 1042,  180, 1045,  181,  182,  180, 1354,
      180, 1354, 1354,  180, 1354,  181,  182,  180,  181,  182,

      181,  182, 1354,  180,  181,  182,  181,  182, 1046,  181,
      182, 1354, 1049,  181,  182, 1354, 1354, 1354, 1047,  181,
      182,  180, 1354,  180, 1354,  180, 1354,  180, 1051, 1048,
      180, 1354, 1052, 1050,  180, 1354,  180,  181,  182,  181,
      182,  181,  182,  181,  182,  180,  181,  182, 1354, 1354,
      181,  182,  181,  182,  180, 1354, 1053,  180, 1354, 1054,
     1055,  181,  182, 1056,  180, 1057,  180, 1058, 1354,  180,
      181,  182,  180,  181,  182,  180, 1059, 1354, 1354, 1060,
      181,  182,  181,  182,  180,  181,  182, 1354,  181,  182,
     1354,  181,  182, 1061, 1063,  180, 1354,  180, 1354,  180,

      181,  182,  180, 1062,  180, 1354, 1065,  180, 1354, 1064,
      180,  181,  182,  181,  182,  181,  182, 1066,  181,  182,
      181,  182,  180,  181,  182, 1067,  181,  182, 1354, 1354,
     1354,  180, 1354, 1069,  180, 1354,  180, 1354,  181,  182,
     1068,  180, 1354,  180, 1354, 1070, 1071,  181,  182,  180,
      181,  182,  181,  182,  180, 1354,  180,  181,  182,  181,
      182, 1354,  180, 1354,  180,  181,  182, 1072, 1354, 1354,
      181,  182,  181,  182, 1354,  180, 1354, 1073,  181,  182,
      181,  182,  623,  278, 1074,  623, 1354, 1354,  278, 1076,
      720,  181,  182,  274, 1354,  832,  278, 1075,  832, 1354,

      275,  278, 1354,  916,  915,  832, 1354,  180,  832,  276,
      277, 1354, 1354,  917,  832,  832, 1354, 1078,  832, 1084,
      918,  724,  724,  181,  182,  724,  832, 1354,  832,  919,
      920,  623,  718,  724,  623,  724, 1159,  718,  274,  922,
      623, 1354,  335,  623,  274,  275,  335, 1354, 1354, 1354,
     1354,  275, 1354, 1083,  276,  277, 1354,  832,  832,  832,
      276,  277,  832, 1354,  724,  724, 1354, 1081,  919,  919,
      274, 1354,  919,  623, 1354,  356,  623,  275, 1354,  356,
      919, 1085,  919,  832,  832,  274,  276,  277,  274, 1354,
      274, 1354,  275,  274, 1086,  275, 1354,  275, 1354, 1354,

      275,  276,  277, 1354,  276,  277,  276,  277, 1354,  276,
      277,  919,  919,  623, 1354,  546,  623, 1354,  546, 1354,
     1087,  721,  623,  623,  274, 1354,  623, 1354,  722, 1354,
     1354,  275,  274, 1354,  623,  274,  623,  724,  725,  275,
      276,  277,  275,  274, 1354, 1088,  274, 1354,  276,  277,
      275,  276,  277,  275, 1354,  623, 1354,  389,  623,  276,
      277,  389,  276,  277,  274,  623,  623, 1354,  274, 1089,
     1091,  275,  274, 1354, 1090,  275, 1354, 1354, 1092,  275,
      276,  277, 1354,  274,  276,  277, 1354, 1354,  276,  277,
      275,  274, 1354, 1095, 1094,  274, 1093,  274,  275,  276,

      277, 1354,  275, 1354,  275, 1354, 1354,  276,  277,  274,
     1354,  276,  277,  276,  277,  274,  275,  274, 1354, 1354,
     1096, 1097,  275,  274,  275,  276,  277, 1098, 1354,  274,
      275,  276,  277,  276,  277, 1354,  275,  274, 1354,  276,
      277, 1354, 1354, 1354,  275,  276,  277, 1354, 1354, 1100,
     1102,  274, 1099,  276,  277, 1101,  274, 1103,  275,  274,
     1354, 1354,  274,  275,  274, 1354,  275,  276,  277,  275,
     1354,  275,  276,  277, 1354,  276,  277, 1104,  276,  277,
      276,  277, 1107,  274, 1105,  274, 1354,  274, 1354, 1354,
      275, 1354,  275, 1354,  275, 1354, 1354, 1354, 1106,  276,

      277,  276,  277,  276,  277,  623,  335, 1354,  623,  352,
     1109,  335, 1354,  771, 1354, 1354,  353, 1354, 1108, 1354,
      775,  775, 1354, 1354,  775,  354,  355,  959,  832, 1354,
     1354,  832,  775, 1354,  775, 1124,  961,  832,  832,  832,
      335,  832,  832,  962, 1354,  335, 1354,  960, 1354,  832,
     1354,  832,  963,  964,  623,  769, 1354,  623, 1354, 1354,
      769, 1111,  966,  775,  775,  623,  356,  180,  623, 1354,
     1354,  356, 1354,  782,  786,  786, 1116, 1354,  786, 1354,
      832,  832,  832,  181,  182,  832,  786,  969,  786, 1354,
     1114,  963,  963,  832,  356,  963,  832, 1354, 1354,  356,

     1354,  970, 1152,  963, 1354,  963,  832,  832,  623,  780,
     1354,  623, 1354, 1354,  780, 1118,  976,  786,  786, 1354,
     1354,  352, 1354, 1354,  352, 1354,  352, 1354,  353, 1354,
     1123,  353, 1354,  353,  963,  963,  623,  354,  355,  623,
      354,  355,  354,  355,  772,  623,  623,  352, 1126,  623,
     1354,  773, 1129, 1354,  353,  352, 1354,  623, 1125,  623,
      775,  776,  353,  354,  355, 1354, 1354,  352, 1354, 1354,
      352,  354,  355, 1354,  353, 1354, 1354,  353,  352, 1354,
      180, 1354, 1127,  354,  355,  353,  354,  355,  623,  623,
      832,  180,  590,  832,  354,  355,  181,  182,  971,  832,

      832,  590,  590,  832, 1354,  972, 1354,  181,  182,  352,
     1128,  832,  352,  832,  973,  974,  353,  352, 1154,  353,
     1354,  180, 1354,  352,  353,  354,  355, 1153,  354,  355,
      353, 1354,  180,  354,  355, 1132, 1131,  181,  182,  354,
      355, 1164,  832,  832,  832, 1354, 1130,  832,  181,  182,
     1354, 1354,  971,  832,  832,  352, 1354,  832, 1354,  972,
      590, 1354,  353,  352, 1155,  832,  352,  832,  973,  974,
      353,  354,  355,  353,  352, 1354, 1354, 1354,  385,  354,
      355,  353,  354,  355, 1134,  386,  385, 1133, 1136, 1354,
      354,  355, 1135,  386,  387,  388,  832,  832,  832, 1354,

     1144,  832,  387,  388, 1148, 1354, 1121,  973,  973,  623,
      389,  973,  623, 1354, 1354,  389, 1354,  810, 1354,  973,
     1354,  973,  832,  832,  832,  389, 1354,  832, 1354, 1354,
      389,  996,  997, 1354, 1354,  814,  814,  623,  808,  814,
      623,  385, 1354,  808, 1354, 1003, 1138,  814,  386,  814,
      973,  973,  623,  180, 1354,  623, 1354,  387,  388, 1143,
      783,  623,  623, 1354,  385,  623,  818,  784, 1354,  181,
      182,  386, 1354,  623,  439,  623,  786,  787,  814,  814,
      387,  388,  832, 1354,  183,  832,  385, 1354,  183,  818,
     1354,  832,  183,  386,  832,  180, 1354,  183, 1354,  833,

     1354,  385,  387,  388,  623,  623,  832, 1145,  386,  832,
     1354,  181,  182, 1015,  998,  832,  832,  387,  388,  832,
     1354,  999, 1146, 1354, 1354,  385, 1156,  832, 1354,  832,
     1000, 1001,  386, 1354, 1354, 1354,  385, 1354, 1354,  385,
     1354,  387,  388,  386, 1354, 1147,  386, 1354, 1354,  180,
      835,  835,  387,  388,  835,  387,  388, 1354,  832,  832,
      832, 1354,  835,  832,  835,  181,  182, 1354,  998,  832,
      832, 1157,  397,  832, 1149,  999,  623, 1354,  621,  623,
     1354,  832,  621,  832, 1000, 1001,  180, 1354, 1354,  832,
      621, 1354,  832,  835,  835,  621, 1354, 1017,  623,  621,

     1354,  623,  181,  182,  621, 1354,  838, 1354, 1158,  180,
     1354, 1151,  832,  832,  832,  180, 1354,  832, 1354, 1354,
     1020, 1354, 1141, 1000, 1000,  181,  182, 1000,  180, 1354,
      180,  181,  182, 1354,  180, 1000, 1354, 1000,  832,  832,
     1161, 1160,  180, 1354,  181,  182,  181,  182,  180, 1354,
      181,  182, 1163, 1354, 1165, 1354, 1354,  180,  181,  182,
     1354, 1354, 1354, 1354,  181,  182, 1000, 1000,  623,  180,
     1167,  623, 1162,  181,  182, 1354,  811,  623,  623, 1166,
      180,  623,  180,  812, 1354,  181,  182,  180, 1354,  623,
      180,  623,  814,  815,  180, 1354,  181,  182,  181,  182,

     1169, 1354, 1168,  181,  182, 1354,  181,  182, 1354, 1354,
      181,  182, 1172,  832, 1354,  278,  832,  180, 1354,  278,
      623,  623,  832,  180, 1170,  832, 1354, 1354, 1354, 1171,
      834,  832,  832,  181,  182,  832,  180, 1354,  180,  181,
      182,  180, 1354,  832,  180,  832,  835,  836, 1173, 1354,
     1354,  180,  181,  182,  181,  182,  180,  181,  182, 1354,
      181,  182,  180, 1354,  180, 1354, 1175,  181,  182,  180,
     1354,  180,  181,  182,  832,  832,  180, 1174,  181,  182,
      181,  182, 1176,  180, 1354,  181,  182,  181,  182, 1177,
      180, 1178,  181,  182, 1180,  180, 1354,  180, 1354,  181,

      182,  180, 1354, 1354,  180, 1354,  181,  182, 1179,  180,
     1354,  181,  182,  181,  182,  180, 1354,  181,  182, 1181,
      181,  182,  180, 1354,  180,  181,  182, 1182,  180, 1354,
      180,  181,  182,  180, 1354, 1354,  180, 1183,  181,  182,
      181,  182, 1354, 1354,  181,  182,  181,  182, 1354,  181,
      182,  180,  181,  182,  180, 1354, 1354, 1354,  180, 1184,
     1354,  180, 1354, 1354, 1354, 1185, 1354,  181,  182, 1354,
      181,  182, 1186, 1187,  181,  182, 1188,  181,  182,  832,
      278,  180,  832, 1354, 1354,  278, 1189,  916,  919,  919,
     1354, 1354,  919, 1190, 1354, 1354, 1354,  181,  182, 1354,

      919, 1078,  919,  832,  718, 1354,  832,  623,  718,  718,
      623, 1080, 1354,  718, 1354,  922,  623, 1354,  718,  623,
      274, 1354,  718,  274, 1354, 1192,  274,  275,  274, 1083,
      275,  919,  919,  275, 1354,  275,  276,  277, 1193,  276,
      277, 1194,  276,  277,  276,  277,  274, 1354, 1354, 1354,
     1354,  274, 1354,  275,  274, 1354, 1354, 1354,  275, 1354,
     1354,  275,  276,  277, 1195, 1354, 1196,  276,  277,  274,
      276,  277, 1197,  274, 1354,  274,  275,  274, 1354,  180,
      275,  274,  275, 1354,  275,  276,  277,  180,  275,  276,
      277,  276,  277,  276,  277,  181,  182,  276,  277,  274,

     1354, 1198,  274,  181,  182, 1354,  275, 1201, 1354,  275,
      274, 1354, 1199,  274, 1200,  276,  277,  275,  276,  277,
      275, 1202, 1239, 1354, 1203,  274,  276,  277,  274,  276,
      277, 1354,  275,  274, 1354,  275, 1354, 1354, 1354, 1354,
      275,  276,  277, 1354,  276,  277, 1354, 1204, 1354,  276,
      277,  274, 1354, 1205,  274, 1207, 1354,  274,  275,  274,
     1354,  275,  274, 1206,  275, 1354,  275,  276,  277,  275,
      276,  277, 1354,  276,  277,  276,  277,  274,  276,  277,
      274, 1210, 1354, 1209,  275, 1354, 1354,  275, 1208,  832,
     1354,  335,  832,  276,  277,  335,  276,  277, 1211,  832,

      335,  352,  832,  832,  769,  335,  832,  960,  353,  769,
     1354, 1113, 1213, 1354, 1212,  963,  963,  354,  355,  963,
     1354, 1111, 1354, 1224, 1354, 1215, 1354,  963, 1354,  963,
      623,  769, 1354,  623, 1354, 1354,  769, 1354,  966,  623,
     1354,  769,  623,  832,  356,  769,  832, 1354, 1354,  356,
     1354,  970, 1116, 1354,  832, 1354,  356,  832,  963,  963,
      356, 1354,  973,  973, 1354, 1118,  973,  832,  780, 1354,
      832,  180, 1354,  780,  973, 1120,  973,  623,  780, 1354,
      623, 1354, 1354,  780, 1354,  976, 1354,  181,  182, 1217,
      623, 1354,  780,  623,  352, 1354,  780,  352, 1354, 1123,

      352,  353,  352, 1354,  353,  973,  973,  353, 1237,  353,
      354,  355, 1218,  354,  355, 1219,  354,  355,  354,  355,
      352, 1354, 1354, 1354, 1354,  352, 1354,  353,  352, 1354,
     1354, 1354,  353, 1354, 1354,  353,  354,  355, 1220,  352,
     1221,  354,  355,  180,  354,  355,  353,  352, 1354,  180,
      590,  352, 1354, 1354,  353,  354,  355, 1222,  353,  181,
      182, 1354, 1223,  354,  355,  181,  182,  354,  355, 1236,
      352, 1354,  352, 1227,  180, 1354, 1225,  353, 1354,  353,
     1240, 1354, 1226, 1354, 1354, 1021,  354,  355,  354,  355,
      181,  182,  832,  389, 1354,  832, 1228, 1354,  389,  590,

      997,  832, 1354,  389,  832, 1000, 1000,  389,  385, 1000,
      832,  808, 1354,  832, 1138,  386,  808, 1000, 1140, 1000,
      623,  808, 1354,  623,  387,  388,  808, 1354, 1003, 1354,
      385, 1354, 1230,  623, 1354,  808,  623,  386,  385,  808,
     1354, 1354, 1143,  385,  397,  386,  387,  388, 1000, 1000,
      386,  385, 1354, 1354,  387,  388, 1231, 1354,  386,  387,
      388, 1354,  385, 1354, 1232, 1354, 1354,  387,  388,  386,
      832, 1354,  621,  832, 1354,  180,  621,  180,  387,  388,
     1233,  180,  832,  621,  180,  832,  180, 1234,  621, 1354,
     1017,  181,  182,  181,  182,  180, 1354,  181,  182, 1235,

      181,  182,  181,  182, 1151,  180, 1243,  180, 1354, 1241,
      180,  181,  182, 1354,  180, 1238, 1354,  180, 1242, 1354,
      180,  181,  182,  181,  182, 1354,  181,  182,  180, 1246,
      181,  182, 1244,  181,  182, 1247,  181,  182, 1354, 1248,
      180, 1354, 1245,  180,  181,  182,  180, 1354, 1354,  180,
     1249,  180, 1354,  180, 1354, 1250,  181,  182, 1354,  181,
      182,  180,  181,  182, 1251,  181,  182,  181,  182,  181,
      182,  180, 1354,  180, 1354, 1253,  180,  181,  182,  180,
     1354,  180, 1354,  180, 1354, 1354, 1354,  181,  182,  181,
      182,  180,  181,  182, 1252,  181,  182,  181,  182,  181,

      182,  180, 1254,  180, 1354, 1256,  180,  181,  182,  180,
     1354,  180, 1354, 1354, 1255, 1354, 1354,  181,  182,  181,
      182, 1354,  181,  182, 1354,  181,  182,  181,  182, 1257,
      832,  718, 1354,  832, 1354, 1354,  718, 1354, 1080, 1258,
     1354, 1259,  274, 1260,  832, 1354,  718,  832,  274,  275,
      718, 1354, 1192,  274, 1354,  275,  274, 1354,  276,  277,
      275,  274, 1354,  275,  276,  277, 1354,  274,  275,  276,
      277, 1354,  276,  277,  275, 1354, 1264,  276,  277, 1261,
      274, 1354,  274,  276,  277, 1262, 1354,  275, 1263,  275,
     1354, 1354, 1265, 1354,  274, 1354,  276,  277,  276,  277,

      274,  275, 1266, 1354, 1354, 1354,  274,  275, 1354, 1354,
      276,  277,  274,  275, 1354, 1354,  276,  277, 1354,  275,
      274, 1269,  276,  277, 1267, 1268,  274,  275,  276,  277,
     1270,  274, 1354,  275,  274, 1354,  276,  277,  275,  274,
     1354,  275,  276,  277, 1354, 1354,  275,  276,  277, 1354,
      276,  277, 1354, 1354,  274,  276,  277,  274, 1354, 1271,
     1273,  275, 1272, 1354,  275,  274, 1354, 1354,  274, 1354,
      276,  277,  275,  276,  277,  275, 1354,  832, 1354,  769,
      832,  276,  277,  769,  276,  277,  832,  769, 1354,  832,
     1354, 1354,  769, 1275, 1113, 1354, 1274, 1354, 1354, 1354,

     1277, 1276, 1354,  832,  780, 1354,  832, 1354, 1215,  780,
      352, 1120,  832, 1354,  780,  832,  352,  353,  780, 1354,
     1354,  352, 1354,  353,  352, 1217,  354,  355,  353,  352,
     1354,  353,  354,  355, 1354, 1354,  353,  354,  355, 1354,
      354,  355,  352, 1354, 1281,  354,  355, 1278,  352,  353,
      352, 1282, 1354, 1279,  352,  353, 1280,  353,  354,  355,
     1354,  353, 1354, 1354,  354,  355,  354,  355,  590,  590,
      354,  355,  352, 1354,  352, 1354, 1354,  832,  808,  353,
      832,  353, 1354,  808, 1283, 1140, 1354, 1284,  354,  355,
      354,  355,  832, 1354,  808,  832, 1354,  385,  808, 1230,

     1354,  385, 1354, 1285,  386,  385, 1354, 1354,  386, 1354,
     1354, 1354,  386,  387,  388, 1354,  590,  387,  388,  385,
     1354,  387,  388,  385, 1354,  180,  386,  180, 1286,  180,
      386, 1288, 1287, 1354,  180,  387,  388,  180, 1354,  387,
      388,  181,  182,  181,  182,  181,  182, 1290,  180, 1291,
      181,  182,  180,  181,  182, 1289,  180, 1354, 1354,  397,
     1292,  180, 1354, 1354,  181,  182, 1354,  180,  181,  182,
      180, 1354,  181,  182, 1293,  180, 1354,  181,  182, 1294,
      180, 1354,  180,  181,  182, 1354,  181,  182, 1295, 1296,
      180,  181,  182,  180, 1354, 1354,  181,  182,  181,  182,

      180, 1297,  180, 1354,  180, 1354,  181,  182, 1354,  181,
      182, 1299,  180, 1354,  180, 1354,  181,  182,  181,  182,
      181,  182, 1298,  180, 1300,  180, 1354,  180,  181,  182,
      181,  182, 1302,  180, 1354, 1354, 1301, 1354,  274,  181,
      182,  181,  182,  181,  182,  275,  274, 1354, 1354,  181,
      182, 1354,  274,  275,  276,  277, 1354, 1354,  274,  275,
     1303, 1354,  276,  277, 1306,  275, 1354, 1304,  276,  277,
     1308,  274, 1307, 1305,  276,  277,  274, 1354,  275, 1354,
     1354, 1354, 1354,  275, 1354, 1354, 1354,  276,  277,  274,
     1354,  274,  276,  277,  274, 1309,  275,  274,  275,  542,

      957,  275, 1310, 1354,  275,  276,  277,  276,  277,  274,
      276,  277,  274,  276,  277,  957,  275, 1354, 1354,  275,
      274, 1354, 1354,  274, 1354,  276,  277,  275,  276,  277,
      275,  274, 1312, 1354, 1311, 1354,  276,  277,  275,  276,
      277, 1354,  274, 1354, 1354,  274, 1354,  276,  277,  275,
      352, 1313,  275, 1314, 1354, 1354, 1354,  353,  276,  277,
     1354,  276,  277,  352, 1354,  352,  354,  355,  352, 1354,
      353,  352,  353, 1315, 1354,  353, 1316, 1354,  353,  354,
      355,  354,  355, 1318,  354,  355, 1354,  354,  355, 1317,
      352, 1354,  352, 1354,  352, 1354,  385,  353, 1354,  353,

      590,  353, 1320,  386, 1354, 1319,  354,  355,  354,  355,
      354,  355,  387,  388, 1322,  385, 1354, 1321,  385, 1354,
      397,  385,  386, 1354,  180,  386, 1354, 1354,  386,  180,
     1354,  387,  388, 1354,  387,  388,  180,  387,  388,  397,
      181,  182,  180, 1324, 1354,  181,  182,  180, 1354, 1323,
      180, 1354,  181,  182,  180, 1354,  180, 1354,  181,  182,
     1021, 1354, 1354,  181,  182,  180,  181,  182,  180, 1354,
      181,  182,  181,  182,  180, 1354,  180, 1354,  872,  180,
     1354,  181,  182, 1354,  181,  182,  180, 1354, 1354, 1354,
      181,  182,  181,  182,  180,  181,  182,  180, 1327, 1326,

      274, 1354,  181,  182, 1328, 1325,  180,  275,  274, 1354,
      181,  182, 1329,  181,  182,  275,  276,  277, 1354,  274,
     1354,  274,  181,  182,  276,  277,  275,  274,  275, 1354,
     1354, 1354, 1354,  274,  275,  276,  277,  276,  277, 1330,
      275,  274, 1354,  276,  277,  274, 1354, 1331,  275,  276,
      277, 1354,  275, 1333, 1354, 1354, 1332,  276,  277, 1335,
      274,  276,  277, 1336, 1334,  274, 1354,  275,  352,  957,
     1354,  352,  275, 1354, 1354,  353,  276,  277,  353, 1354,
     1354,  276,  277,  352,  354,  355,  352,  354,  355, 1354,
      353, 1354, 1354,  353, 1354, 1354, 1337,  352, 1354,  354,

      355, 1354,  354,  355,  353,  352, 1354, 1338,  352, 1354,
     1339,  180,  353,  354,  355,  353,  385, 1354, 1341,  385,
     1340,  354,  355,  386,  354,  355,  386,  181,  182,  180,
      590, 1342,  387,  388,  590,  387,  388,  180, 1354, 1354,
      397,  180, 1354, 1354,  274,  181,  182, 1354, 1343, 1354,
     1354,  275,  274,  181,  182,  397, 1354,  181,  182,  275,
      276,  277, 1354,  274, 1354, 1054, 1345, 1354,  276,  277,
      275,  274, 1354, 1344, 1346,  274, 1354,  274,  275,  276,
      277, 1354,  275,  274,  275, 1354, 1354,  276,  277, 1347,
      275,  276,  277,  276,  277,  274, 1354, 1348,  352,  276,

      277,  352,  275, 1354, 1354,  353,  731, 1354,  353,  352,
     1354,  276,  277,  180,  354,  355,  353,  354,  355, 1354,
      590,  352, 1354,  590,  352,  354,  355, 1354,  353,  181,
      182,  353,  180, 1354, 1354, 1349,  274,  354,  355, 1354,
      354,  355, 1354,  275,  590, 1354, 1354, 1354,  181,  182,
      274, 1354,  276,  277,  274, 1354,  590,  275,  274, 1354,
      180,  275,  352, 1350, 1354,  275,  276,  277, 1354,  353,
      276,  277, 1354,  274,  276,  277,  181,  182,  354,  355,
      275,  352, 1354, 1354,  274, 1354, 1351, 1354,  353,  276,
      277,  275, 1354, 1354, 1352, 1354, 1354,  354,  355, 1354,

      276,  277, 1354, 1354, 1353, 1354, 1354, 1354, 1354, 1354,
     1354, 1354,  590,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  179,  179,
     1354, 1354,  179,  179,  179,  183, 1354,  183,  183,  183,
      183,  183,  183,  183,  183,  273,  273, 1354, 1354,  273,
      273,  273,  278, 1354,  278,  278,  278,  278,  278,  278,

      278,  278,  330,  330, 1354, 1354,  330,  330,  330,  335,
     1354,  335,  335,  335,  335,  335,  335,  335,  335,  351,
      351, 1354, 1354,  351,  351,  351,  356, 1354,  356,  356,
      356,  356,  356,  356,  356,  356,  384,  384, 1354, 1354,
      384,  384,  384,  389, 1354,  389,  389,  389,  389,  389,
      389,  389,  389,  417, 1354, 1354, 1354,  417, 1354,  417,
      417, 1354,  417,  417,  421, 1354, 1354,  421,  421, 1354,
      421,  421,  421,  421,  421,  422,  422, 1354,  422,  422,
      422,  422,  422,  422,  422,  422,  423, 1354,  423,  423,
     1354, 1354,  423, 1354,  423,  425,  425,  425,  425,  425,

     1354,  425,  523,  523,  523,  523,  523, 1354,  523,  568,
      568,  568,  568,  568, 1354,  568,  578,  578,  578,  578,
      578, 1354,  578,  604,  604,  604,  604,  604, 1354,  604,
      621, 1354,  621,  621,  621,  621,  621,  621,  621,  621,
      624, 1354, 1354, 1354,  624,  624,  624,  624,  624,  624,
      624,  718, 1354,  718,  718,  718,  718,  718,  718,  718,
      718,  720, 1354, 1354, 1354,  720,  720,  720,  720,  720,
      720,  720,  769, 1354,  769,  769,  769,  769,  769,  769,
      769,  769,  771, 1354, 1354, 1354,  771,  771,  771,  771,
      771,  771,  771,  623, 1354, 1354, 1354,  623,  623,  623,

      623,  623,  623,  623,  780, 1354,  780,  780,  780,  780,
      780,  780,  780,  780,  782, 1354, 1354, 1354,  782,  782,
      782,  782,  782,  782,  782,  808, 1354,  808,  808,  808,
      808,  808,  808,  808,  808,  810, 1354, 1354, 1354,  810,
      810,  810,  810,  810,  810,  810,  830,  830, 1354,  830,
      830,  830,  830,  830,  830,  830,  830,  833, 1354, 1354,
     1354,  833,  833,  833,  833,  833,  833,  833,  838, 1354,
     1354, 1354,  838,  838,  838,  838,  838,  838,  838,  914,
      914, 1354,  914,  914,  914,  914,  914,  914,  914,  914,
      916, 1354, 1354, 1354,  916,  916,  916,  916,  916,  916,

      916,  922, 1354, 1354, 1354,  922,  922,  922,  922,  922,
      922,  922,  958,  958, 1354,  958,  958,  958,  958,  958,
      958,  958,  958,  960, 1354, 1354, 1354,  960,  960,  960,
      960,  960,  960,  960,  966, 1354, 1354, 1354,  966,  966,
      966,  966,  966,  966,  966,  832, 1354, 1354, 1354,  832,
      832,  832,  832,  832,  832,  832,  968,  968, 1354,  968,
      968,  968,  968,  968,  968,  968,  968,  970, 1354, 1354,
     1354,  970,  970,  970,  970,  970,  970,  970,  976, 1354,
     1354, 1354,  976,  976,  976,  976,  976,  976,  976,  995,
      995, 1354,  995,  995,  995,  995,  995,  995,  995,  995,

      997, 1354, 1354, 1354,  997,  997,  997,  997,  997,  997,
      997, 1003, 1354, 1354, 1354, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1014, 1014, 1354, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1017, 1354, 1354, 1354, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1019, 1019, 1354, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1077, 1077, 1354, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1080, 1354, 1354, 1354,
     1080, 1080, 1080, 1080, 1080, 1080, 1080,  720, 1354, 1354,
     1354,  720,  720,  720,  720,  720,  720,  720, 1082, 1082,
     1354, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,  273,

      273, 1354, 1354,  273,  273,  273, 1110, 1110, 1354, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1113, 1354, 1354,
     1354, 1113, 1113, 1113, 1113, 1113, 1113, 1113,  771, 1354,
     1354, 1354,  771,  771,  771,  771,  771,  771,  771, 1115,
     1115, 1354, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
      968,  968, 1354,  968,  968,  968,  968,  968,  968,  968,
      968,  970, 1354, 1354, 1354,  970,  970,  970,  970,  970,
      970,  970, 1117, 1117, 1354, 1117, 1117, 1117, 1117, 1117,
     1117, 1117, 1117, 1120, 1354, 1354, 1354, 1120, 1120, 1120,
     1120, 1120, 1120, 1120,  782, 1354, 1354, 1354,  782,  782,

      782,  782,  782,  782,  782, 1122, 1122, 1354, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122,  351,  351, 1354, 1354,
      351,  351,  351,  995,  995, 1354,  995,  995,  995,  995,
      995,  995,  995,  995,  997, 1354, 1354, 1354,  997,  997,
      997,  997,  997,  997,  997, 1137, 1137, 1354, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1140, 1354, 1354, 1354,
     1140, 1140, 1140, 1140, 1140, 1140, 1140,  810, 1354, 1354,
     1354,  810,  810,  810,  810,  810,  810,  810, 1142, 1142,
     1354, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,  384,
      384, 1354, 1354,  384,  384,  384, 1014, 1014, 1354, 1014,

     1014, 1014, 1014, 1014, 1014, 1014, 1014,  832, 1354, 1354,
     1354,  832,  832,  832,  832,  832,  832,  832,  833, 1354,
     1354, 1354,  833,  833,  833,  833,  833,  833,  833, 1150,
     1150, 1354, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1019, 1019, 1354, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019,  179,  179, 1354, 1354,  179,  179,  179, 1191, 1191,
     1354, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1214,
     1214, 1354, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1216, 1216, 1354, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1229, 1229, 1354, 1229, 1229, 1229, 1229, 1229, 1229,

     1229, 1229,   23, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354
    } ;

static const flex_int16_t yy_chk[8960] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,   19,   25,   19,   19,    7,   25,
       25,    7,    8,    8,    8,    8,    8,    8,   20,  178,
       20,   20,    8,  178,  178,    8,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   13,   13,   13, 1000,   15,   15,   28,   15,   15,
       15,  973,   15,   16,   16,   29,   16,   16,   16,   62,
       16,  963,   90,   28,   28,   13,   15,   13,  919,   29,
      838,   13,   13,   62,   16,   13,   90,   13,   13,   31,
       13,   13,   31,   13,   13,   17,   17,  835,   17,   17,
       18,   18,   17,   18,   18,   31,   31,   18,   21,   33,
       21,   21,   21,   21,  109,   33,   21,   21,   21,   34,
      138,   35,  812,   36,  627,   33,   33,   37,  109,  627,
       21,   36,   36,   39,  138,   34,   34,   35,   35,   36,

       36,   38,   38,   37,   37,   38,  184,  184,  810,   39,
       39,  784,   39,   38,   39,   38,  279,  279,  782,   40,
       21,   21,   39,   21,   22,  179,   22,   22,   22,   22,
       39,   42,   22,   22,   22,   40,   40,  778,  180,   45,
      777,  179,  179,  773,   38,   38,   22,   42,   42,   43,
      183,   40,  180,   42,   40,   45,   45,   40,  771,   45,
      722,   45,  720,   42,  183,   43,   43,   42,  724,   42,
      163,   46,  163,  724,   45,   53,   22,   22,   47,   22,
       41,   43,   48,   43,   43,  624,  163,   46,   46,  274,
       43,   53,   53,  278,   47,   47,   41,   41,   48,   48,

       48,   41,   46,  274,   47,   41,   46,  278,  331,   41,
       41,   48,   41,   53,   48,   41,   44,  335,   48,   49,
       44,   44,  331,  620,   44,   44,   50,   44,  336,  336,
       44,  335,   44,  352,   44,   49,   49,   49,   49,  356,
       51,   49,   50,   50,   50,   49,  385,  352,   50,   52,
      619,   49,  577,  356,  357,  357,   51,   51,   50,   51,
      385,   54,  576,   51,   50,   52,   52,   52,  389,   59,
       51,   51,  575,   51,  390,  390,   57,   54,   54,   54,
       56,   52,  389,   54,   52,   59,   59,   52,  574,   52,
       54,  573,   57,   57,   59,   59,   56,   56,  426,   54,

       55,   55,   56,   58,   55,   56,   56,   57,   55,   55,
       60,   55,  426,  775,   55,   56,   55,   55,  775,   58,
       58,   58,  524,  622,  622,   58,   60,   60,   61,   58,
       64,  572,   65,   64,   60,   61,  524,   64,  181,   65,
       60,   58,  719,  719,   61,   61,   64,   64,   65,   65,
       66,  770,  770,   67,  181,  181,   66,   66,   69,  416,
       67,   68,   66,   67,   67,   69,   66,   66,   68,   67,
       67,  175,  175,   68,   69,   69,  569,   68,   68,   70,
       70,   71,  415,   70,  350,   73,  579,   74,   71,   76,
      569,   70,   73,   70,   74,  605,   76,   71,   71,  349,

      579,   73,   73,   74,   74,   76,   76,   76,  348,  605,
      347,   73,  107,   75,  175,  175,  190,   71,   74,   78,
       75,   74,   70,   70,   72,  621,   78,   86,   74,   75,
       75,   72,  190,  190,   86,   78,   78,  718,   78,  621,
       72,   72,  786,   86,   86,   75,   72,  786,   75,  106,
       79,  718,   23,   72,   72,  190,   72,   79,   72,   72,
       72,   72,   77,   86,   87,    0,   79,   79,   79,   77,
       80,   87,   79,  781,  781,    0,  769,   80,   77,   77,
       87,   87,   87,   77,   81,   77,   80,   80,   82,   80,
      769,   81,   80,   77,  185,   82,  196,  185,   77,   77,

       81,   81,   83,   81,   82,   82,   80,  780,    0,   83,
      185,  185,  196,  196,  809,  809,  808,   81,   83,   83,
       82,  780,   84,   82,   84,    0,    0,  203,   83,   85,
      808,   83,   84,   84,   84,    0,   85,   84,   84,   84,
       88,    0,   89,  203,  203,   85,   85,   88,   93,   89,
        0,   85,   88,  193,   93,   93,   88,   88,   89,   89,
       92,   85,    0,   92,   93,   93,  814,   92,    0,  193,
      193,  814,  195,    0,  193,    0,   92,   92,   94,   94,
       94,   94,   94,   94,    0,   94,    0,   95,  195,  195,
       96,    0,   94,   97,   95,   95,   95,   96,  195,    0,

       97,   94,   94,   95,   95,  817,   96,   96,    0,   97,
       97,   98,   98,   99,  817,   98,    0,    0,  817,  817,
       99,  817,  186,   98,  108,   98,    0,    0,  186,   99,
       99,  108,  102,  102,  102,  102,  102,  102,  186,  186,
      108,  108,  102,    0,   99,  102,  104,  104,  104,  104,
      104,  104,    0,    0,   98,   98,  104,    0,    0,  104,
      105,  105,  105,  105,  105,  105,    0,    0,  112,    0,
      105,  112,  114,  105,  115,  112,  116,    0,  114,  114,
        0,  115,  204,  116,  112,  112,    0,  116,  114,  114,
      115,  115,  116,  116,  117,    0,  120,    0,  204,  204,

        0,  117,    0,  120,  121,  121,  117,  122,  121,    0,
      117,  117,  120,  120,  122,  124,  121,  204,  121,  123,
        0,  126,  124,  122,  122,    0,  123,    0,  126,    0,
        0,  124,  124,  125,    0,  123,  123,  126,  126,  126,
      125,  124,  207,  122,    0,    0,  127,  121,  121,  125,
      125,  123,    0,  127,  128,    0,  123,  129,  207,  207,
        0,  128,  127,  127,  129,  125,    0,  127,  125,  127,
      128,  128,  128,  129,  129,  130,  128,    0,  207,  129,
      131,    0,  130,  127,    0,    0,    0,  131,  132,    0,
        0,  130,  130,  129,  130,  132,  131,  131,    0,    0,

      133,    0,  134,    0,  132,  132,  137,  133,    0,  134,
        0,    0,  131,  137,  132,  131,  133,  133,  134,  134,
        0,    0,  137,  137,  139,    0,    0,  139,    0,  140,
        0,  139,  141,  133,  134,  140,  140,  133,    0,  141,
      139,  139,    0,  142,    0,  140,  140,    0,  141,  141,
      142,  143,  143,    0,  146,  143,    0,  145,    0,  142,
      142,  146,  147,  143,  145,  143,    0,    0,    0,  147,
      146,  146,    0,  145,  145,    0,  189,    0,  147,  147,
        0,  147,    0,  148,    0,  146,    0,    0,  145,  199,
      148,  145,  189,  189,  143,  143,  144,    0,  145,  148,

      148,    0,  148,  144,  149,  199,  199,  150,  189,    0,
      199,  149,  144,  144,  150,    0,    0,    0,  144,  148,
      149,  149,  151,  150,  150,  144,  144,  152,    0,  151,
      144,  144,  144,  153,  152,    0,    0,  149,  151,  151,
      153,  213,  150,  152,  152,  154,    0,    0,  152,  153,
      153,  151,  154,    0,    0,    0,    0,  213,  213,  152,
        0,  154,  154,  154,  152,  152,    0,    0,    0,  153,
      155,  155,  155,  155,  155,  155,  213,  182,  182,  182,
      155,    0,  182,  155,  157,  157,  157,  157,  157,  157,
      182,    0,  182,    0,  157,    0,  187,  157,  158,  158,

      158,  158,  158,  158,  187,  187,  188,  188,  158,  191,
      188,  158,  187,  187,  192,    0,    0,  194,  188,    0,
      188,  182,  182,    0,  197,  191,  191,    0,    0,    0,
      192,  192,    0,  194,  194,  191,  198,    0,  191,  194,
      197,  197,    0,  200,    0,  201,  197,  202,    0,  188,
      188,  192,  198,  198,  205,    0,    0,    0,  198,  200,
      200,  201,  201,  202,  202,    0,  202,  201,    0,  206,
      205,  205,  200,  200,  200,    0,    0,  208,    0,    0,
      209,  200,    0,  202,  205,  206,  206,  210,    0,  211,
        0,    0,  206,  208,  208,  212,  209,  209,  214,  208,

      209,    0,  216,  210,  210,  211,  211,  211,  215,    0,
        0,  212,  212,  217,  214,  214,  210,  209,  216,  216,
      214,  218,    0,    0,  215,  215,  219,  212,    0,  217,
      217,  220,    0,  215,    0,    0,  221,  218,  218,  222,
      216,    0,  219,  219,  219,  223,    0,  220,  220,  224,
        0,  220,  221,  221,    0,  222,  222,  225,  218,    0,
      226,  223,  223,  227,  223,  224,  224,  228,    0,  229,
      222,  221,    0,  225,  225,  225,  226,  226,  230,  227,
      227,  231,    0,  228,  228,  229,  229,    0,  232,  225,
      233,    0,  234,    0,  230,  230,  235,  231,  231,  229,

      227,  236,  231,  228,  232,  232,  233,  233,  234,  234,
        0,    0,  235,  235,    0,  237,    0,  236,  236,  230,
      238,    0,    0,  232,  239,    0,  235,  234,  236,  240,
      233,  237,  237,  241,    0,    0,  238,  238,  237,  242,
      239,  239,    0,  243,    0,  240,  240,  244,    0,  241,
      241,  531,  238,  531,    0,  242,  242,  245,    0,  243,
      243,  531,    0,  244,  244,  240,  531,  531,  241,  243,
      241,  246,  242,  245,  245,  243,  247,    0,  245,  248,
        0,    0,  250,  244,    0,  249,    0,  246,  246,  251,
        0,  252,  247,  247,    0,  248,  248,  246,  250,  250,

      248,  249,  249,    0,    0,  251,  251,  252,  252,  252,
      253,  250,    0,  247,  254,  248,  255,    0,  248,  248,
      252,  249,  256,    0,  261,  251,  253,  253,  252,    0,
      254,  254,  255,  255,  257,    0,    0,    0,  256,  256,
      261,  261,  253,  258,    0,    0,  254,  259,  255,    0,
      257,  257,    0,  255,  260,    0,  257,  256,  262,  258,
      258,  258,    0,  259,  259,  258,  259,  263,  258,    0,
      260,  260,    0,    0,  262,  262,  264,  259,  258,  265,
        0,  266,    0,  263,  263,  263,    0,  267,  262,  270,
      260,  269,  264,  264,  268,  265,  265,  266,  266,    0,

      268,    0,  264,  267,  267,  270,  270,  269,  269,  267,
      268,  268,  271,  269,  265,  272,  266,    0,  271,    0,
      273,    0,    0,  269,    0,    0,  270,  273,  271,  271,
      820,  272,  272,  272,  275,    0,  273,  273,  276,  820,
        0,  275,    0,  820,  820,  276,    0,  277,  277,  277,
      275,  275,  277,    0,  276,  276,  280,    0,  281,  280,
      277,  282,  277,  280,  281,  281,    0,  425,  282,  283,
        0,    0,  280,  280,  281,  281,  283,  282,  282,    0,
      284,    0,  285,  425,  425,  283,  283,  284,    0,  285,
        0,  277,  277,    0,  429,    0,  284,  284,  285,  285,

      286,  286,  287,    0,  286,    0,  288,    0,  289,  287,
      429,  429,  286,  288,  286,  289,  432,    0,  287,  287,
      290,    0,  288,  288,  289,  289,  289,  290,    0,  429,
        0,  430,  432,  432,  291,    0,  290,  290,  287,  290,
      288,  291,  292,  286,  286,  293,    0,  430,  430,  292,
      291,  291,  293,  295,    0,    0,  294,  430,  292,  292,
      295,  293,  293,  294,  291,  291,    0,    0,    0,  295,
      295,  296,  294,  294,  293,  297,    0,  294,  296,    0,
        0,    0,  297,  298,    0,  295,  299,  296,  296,    0,
      298,  297,  297,  299,  300,    0,  297,    0,  301,  298,

      298,  300,  299,  299,    0,  301,    0,    0,  296,  302,
      300,  300,    0,    0,  301,  301,  302,  304,    0,  433,
        0,  303,    0,  299,  304,  302,  302,  303,  303,  300,
      301,  303,  305,  304,  304,  433,  433,  303,  303,  305,
      306,    0,    0,  303,  307,    0,  302,  306,  305,  305,
        0,  307,  305,    0,  433,  308,  306,  306,  309,    0,
      307,  307,  308,  310,    0,  309,  307,    0,    0,    0,
      310,  308,  308,    0,  309,  309,  311,  309,    0,  310,
      310,    0,    0,  311,  313,    0,  310,  308,  312,  314,
      312,  313,  311,  311,    0,  309,  314,  312,  312,    0,

      313,  313,  316,  312,  312,  314,  314,  315,  313,  316,
      317,    0,    0,  315,  315,    0,  314,  317,  316,  316,
        0,  318,    0,  315,  315,    0,  317,  317,  318,    0,
        0,  316,  317,  319,    0,    0,    0,  318,  318,  320,
      319,  321,  317,  315,  322,  318,  320,  323,  321,  319,
      319,  322,  324,    0,  323,  320,  320,  321,  321,  324,
      322,  322,    0,  323,  323,    0,  322,  325,  324,  324,
      326,  324,  327,    0,  325,    0,  321,  326,  328,  327,
        0,    0,  323,  325,  325,  328,  326,  326,  327,  327,
      329,    0,  330,    0,  328,  328,    0,  329,  327,  330,

      431,    0,  325,  332,    0,  333,  329,  329,  330,  330,
      332,    0,  333,  328,  434,    0,  431,  431,  431,  332,
      332,  333,  333,  334,  334,  334,  337,    0,  334,  337,
      434,  434,    0,  337,  338,    0,  334,    0,  334,    0,
      338,  338,  337,  337,  339,  339,  339,  339,  339,  339,
      338,  338,    0,  341,  339,    0,  434,  339,    0,    0,
      341,  341,  341,    0,    0,    0,    0,  334,  334,  341,
      341,  342,  342,  343,    0,  342,  831,  831,  831,  831,
      343,  351,  831,  342,    0,  342,  439,    0,  351,  343,
      343,  344,  344,  344,  344,  344,  344,  351,  351,    0,

        0,  344,  439,  439,  344,  353,  346,  346,  346,  346,
      346,  346,  353,  354,  342,  342,  346,    0,    0,  346,
      354,  353,  353,  355,  355,  355,    0,  359,  355,  354,
      354,    0,  358,  359,  359,  358,  355,  435,  355,  358,
      360,    0,    0,  359,  359,  361,    0,  360,  358,  358,
        0,    0,  361,  435,  435,  435,  360,  360,  363,  362,
      362,  361,  361,  362,    0,  363,  436,  355,  355,  364,
        0,  362,  365,  362,  363,  363,  364,    0,    0,  365,
      366,    0,  436,  436,    0,  364,  364,  366,  365,  365,
        0,  367,    0,  440,  363,  436,  366,  366,  367,  364,

      364,    0,  362,  362,  365,  368,    0,  367,  367,  440,
      440,  369,  368,  370,    0,    0,  438,  366,  369,    0,
      370,  368,  368,  370,  371,  440,  367,  369,  369,  370,
      370,  371,  438,  438,  438,  370,  372,  368,  373,    0,
      371,  371,    0,  372,  374,  373,  443,    0,  369,  375,
        0,  374,  372,  372,  373,  373,  375,  376,  372,    0,
      374,  374,  443,  443,  376,  375,  375,  374,    0,    0,
        0,  377,    0,  376,  376,  373,  378,  443,  377,  375,
      441,  376,    0,  378,  379,  375,  375,  377,  377,    0,
        0,  379,  378,  378,    0,  380,  441,  441,  377,    0,

      379,  379,  380,    0,    0,  378,  379,  381,    0,  382,
      441,  380,  380,  441,  381,  383,  382,    0,    0,  380,
      384,    0,  383,  381,  381,  382,  382,  384,    0,  381,
      449,  383,  383,  386,    0,  387,  384,  384,    0,    0,
      386,    0,  387,    0,  382,  437,  449,  449,    0,  386,
      386,  387,  387,  388,  388,  388,  391,    0,  388,  391,
      394,  437,  437,  391,  392,  437,  388,  394,  388,    0,
      392,  392,  391,  391,  393,  393,  394,  394,  393,    0,
      392,  392,    0,  395,    0,    0,  393,    0,  393,  396,
      395,    0,    0,    0,  394,  397,  396,  388,  388,  395,

      395,  395,  397,  398,    0,  396,  396,  399,  396,  400,
      398,  397,  397,    0,  399,    0,  400,  393,  393,  398,
      398,    0,  401,  399,  399,  400,  400,  402,  399,  401,
      400,    0,  398,  403,  402,    0,    0,  448,  401,  401,
      403,  405,    0,  402,  402,  404,    0,  402,  405,  403,
      403,    0,  404,  448,  448,    0,  406,  405,  405,  401,
        0,  404,  404,  406,  407,  403,    0,  408,    0,  404,
      448,  407,  406,  406,  408,  409,    0,  405,    0,  410,
      407,  407,  409,  408,  408,    0,  410,  450,  406,    0,
      411,  409,  409,    0,  409,  410,  410,  411,  444,  407,

      445,    0,  408,  450,  450,  410,  411,  411,  412,  412,
      412,  412,  412,  412,  444,  444,  445,  445,  412,  444,
        0,  412,    0,    0,    0,  411,  414,  414,  414,  414,
      414,  414,    0,    0,    0,  442,  414,    0,  445,  414,
      427,    0,    0,  427,    0,    0,    0,    0,  427,  427,
      427,  442,  442,  427,    0,  442,  442,  446,    0,  447,
      427,  427,    0,  427,  427,  427,  451,    0,    0,  452,
        0,  442,  442,  446,  446,  447,  447,    0,    0,  446,
        0,  447,  451,  451,  459,  452,  452,    0,    0,    0,
      459,    0,  427,  427,  428,  454,    0,  428,  452,    0,

      459,  459,  428,  428,  428,  453,  451,  428,  455,    0,
        0,  454,  454,  456,  428,  428,    0,  428,  428,  428,
      457,  453,  453,  458,  455,  455,  460,  453,    0,  456,
      456,    0,  454,    0,  456,  461,  457,  457,  462,  458,
      458,  464,  460,  460,  463,  455,  428,  428,  465,    0,
      457,  461,  461,    0,  462,  462,  466,  464,  464,  467,
      463,  463,  464,  458,  465,  465,  463,  462,  461,  468,
      465,  469,  466,  466,  470,  467,  467,  466,  471,    0,
      472,    0,  473,    0,    0,  468,  468,  469,  469,  468,
      470,  470,  467,  474,  471,  471,  472,  472,  473,  473,

        0,  471,    0,  475,    0,    0,  470,  476,    0,  474,
      474,  477,    0,  478,    0,  479,    0,  473,  472,  475,
      475,  480,  474,  476,  476,  481,  476,  477,  477,  478,
      478,  479,  479,  475,  478,  482,    0,  480,  480,    0,
        0,  481,  481,  480,  483,    0,  484,    0,  485,    0,
      481,  482,  482,    0,  486,    0,  482,  480,    0,    0,
      483,  483,  484,  484,  485,  485,    0,    0,  487,  484,
      486,  486,  488,  485,  489,  483,  490,    0,  491,    0,
      492,    0,    0,  484,  487,  487,  493,    0,  488,  488,
      489,  489,  490,  490,  491,  491,  492,  492,  488,    0,

      491,  494,  493,  493,  495,  487,    0,    0,  496,    0,
      497,    0,  489,  498,  490,  492,    0,  494,  494,  499,
      495,  495,  500,  494,  496,  496,  497,  497,  501,  498,
      498,  502,  497,    0,  503,  499,  499,  502,  500,  500,
      500,  504,    0,  496,  501,  501,    0,  502,  502,  501,
      503,  503,  505,    0,    0,    0,  507,  504,  504,  499,
      506,    0,  504,  508,    0,    0,  509,    0,  505,  505,
      510,  503,  507,  507,  507,  511,  506,  506,  512,  508,
      508,  504,  509,  509,    0,    0,  510,  510,  513,  505,
        0,  511,  511,  506,  512,  512,  509,  511,  512,  508,

      514,  511,  515,    0,  513,  513,  516,  510,  517,    0,
        0,  513,  518,    0,  519,    0,  514,  514,  515,  515,
        0,  515,  516,  516,  517,  517,  514,    0,  518,  518,
      519,  519,  520,    0,  521,    0,  514,  522,    0,  517,
        0,    0,  629,  519,    0,  523,  516,  518,  520,  520,
      521,  521,  523,  522,  522,    0,  529,  520,  629,  629,
      527,  523,  523,  529,  530,  521,    0,  527,    0,    0,
        0,  530,  529,  529,  522,  525,  527,  527,  525,  629,
      530,  530,    0,  525,  525,  525,  528,    0,  525,  632,
      525,    0,  527,  528,  530,  525,  525,  532,  525,  525,

      525,  533,  528,  528,  532,  632,  632,    0,  533,  535,
        0,    0,    0,  532,  532,  632,  535,  533,  533,  633,
        0,    0,  528,    0,  534,  535,  535,  525,  525,  526,
        0,  534,  526,    0,    0,  633,  633,  526,  526,  526,
      534,  534,  526,    0,  526,    0,  535,    0,    0,  526,
      526,    0,  526,  526,  526,  536,    0,  536,  630,  534,
        0,  537,    0,    0,  536,  536,  536,    0,  537,  538,
      536,  536,  539,  536,  630,  630,  538,  537,  537,  539,
      540,  526,  526,  537,  541,  538,  538,  540,  539,  539,
        0,  541,    0,    0,  630,    0,  540,  540,    0,  538,

      541,  541,  539,  542,    0,  540,  543,    0,    0,  541,
      542,  544,    0,  543,  545,  539,    0,  546,  544,  542,
      542,  545,  543,  543,  546,  547,    0,  544,  544,    0,
      545,  545,  547,  546,  546,    0,  543,  543,  548,    0,
      544,  547,  547,    0,    0,  548,  549,  547,    0,  545,
      550,    0,  551,  549,  548,  548,  634,  550,  552,  551,
      548,    0,  549,  549,  553,  552,  550,  550,  551,  551,
      554,  553,  634,  634,  552,  552,  552,  554,  555,    0,
      553,  553,  550,  549,  634,  555,  554,  554,  551,  556,
        0,  557,  554,    0,  555,  555,  556,  558,  557,    0,

      553,    0,  559,  555,  558,  556,  556,  557,  557,  559,
        0,    0,    0,  558,  558,  560,    0,  558,  559,  559,
      561,    0,  560,  915,  915,  915,  915,  561,  562,  915,
        0,  560,  560,  557,  563,  562,  561,  561,    0,  559,
      560,  563,  564,    0,  562,  562,    0,  565,  562,  564,
      563,  563,  563,  566,  565,    0,    0,  561,  564,  564,
      566,    0,  564,  565,  565,  567,    0,    0,    0,  566,
      566,    0,  567,  568,    0,    0,  578,  565,  564,  583,
      568,  567,  567,  578,  566,    0,  583,  582,    0,  568,
      568,  587,  578,  578,  582,  583,  583,    0,  587,    0,

        0,  567,  570,  582,  582,  570,    0,  587,  587,  583,
      570,  570,  570,  584,    0,  570,  631,  570,    0,  582,
      584,  587,  570,  570,  586,  570,  570,  570,  585,  584,
      584,  586,  631,  631,    0,  585,  584,    0,    0,    0,
      586,  586,    0,    0,  585,  585,    0,    0,    0,  584,
        0,  588,  631,    0,  570,  570,  571,  636,  588,  571,
        0,  586,    0,  585,  571,  571,  571,  588,  588,  571,
        0,  571,  647,  636,  636,  589,  571,  571,    0,  571,
      571,  571,  589,    0,    0,  636,  590,    0,  647,  647,
      593,  589,  589,  590,  588,    0,  647,  593,  591,    0,

      589,    0,  590,  590,    0,  591,  593,  593,  571,  571,
      580,    0,  593,  580,  591,  591,    0,    0,  580,  580,
      580,    0,    0,  580,    0,  580,    0,    0,  591,  591,
      580,  580,  594,  580,  580,  580,  592,    0,  595,  594,
      596,    0,  642,  592,  598,  595,    0,  596,  594,  594,
        0,  598,  592,  592,  595,  595,  596,  596,  642,  642,
      598,  598,  580,  580,  581,    0,  598,  581,  642,  594,
      595,  592,  581,  581,  581,  597,  596,  581,    0,  581,
        0,  644,  597,  599,  581,  581,    0,  581,  581,  581,
      599,  597,  597,  597,  600,    0,  601,  644,  644,  599,

      599,  600,  602,  601,    0,    0,    0,  644,    0,  602,
      600,  600,  601,  601,  600,  646,  581,  581,  602,  602,
      603,  601,  602,  604,    0,  599,  610,  603,    0,  639,
      604,  646,  646,  610,    0,    0,  603,  603,  603,  604,
      604,  606,  610,  610,  606,  639,  639,  639,  610,  606,
      606,  606,  608,  646,  606,  648,  606,    0,    0,  608,
      611,  606,  606,  612,  606,  606,  606,  611,  608,  608,
      612,  648,  648,    0,  613,    0,  611,  611,    0,  612,
      612,  613,    0,    0,  648,  614,    0,    0,  608,  611,
      613,  613,  614,  606,  606,  607,  635,    0,  607,  612,

        0,  614,  614,  607,  607,  607,    0,  615,  607,    0,
      607,  613,  635,  635,  615,  607,  607,    0,  607,  607,
      607,  616,  614,  615,  615,  615,    0,  617,  616,  650,
        0,    0,    0,  635,  617,  618,    0,  616,  616,    0,
        0,  616,  618,  617,  617,  650,  650,  607,  607,  609,
        0,  618,  618,    0,    0,    0,  609,  616,  617,  637,
        0,  625,  625,    0,  625,  609,  609,  625,    0,  625,
        0,  618,  609,    0,  638,  637,  637,    0,    0,  609,
        0,  609,    0,  625,    0,  609,  609,    0,  609,  626,
      638,  638,  626,    0,  637,    0,    0,  626,  626,  626,

      640,    0,  626,  641,    0,  649,    0,  643,    0,  638,
      626,  645,  626,  626,  626,    0,  640,  640,  654,  641,
      641,  649,  649,  643,  643,  641,  640,  645,  645,    0,
        0,    0,  640,  652,  654,  654,    0,    0,  651,    0,
      654,  626,  626,  628,  643,  649,  628,    0,  645,  652,
      652,  628,  628,  628,  651,  651,  628,    0,  653,    0,
      655,    0,  656,    0,  628,  657,  628,  628,  628,    0,
      658,  652,    0,  651,  653,  653,  655,  655,  656,  656,
      656,  657,  657,    0,    0,    0,  658,  658,  659,  653,
      660,    0,    0,  661,    0,  628,  628,  655,    0,  662,

      657,  658,  663,    0,  659,  659,  660,  660,  664,  661,
      661,    0,    0,  659,  661,  662,  662,  665,  663,  663,
      666,    0,  667,    0,  664,  664,  668,    0,  660,    0,
      669,  663,  670,  665,  665,  662,  666,  666,  667,  667,
      671,    0,  668,  668,  672,  666,  669,  669,  670,  670,
        0,  673,  668,  674,    0,  675,  671,  671,  676,  669,
      672,  672,  672,    0,  670,  677,  671,  673,  673,  674,
      674,  675,  675,  673,  676,  676,  678,    0,  679,    0,
      676,  677,  677,  680,    0,  681,  675,  682,    0,  683,
        0,    0,  678,  678,  679,  679,  684,    0,    0,  680,

      680,  681,  681,  682,  682,  683,  683,  681,  682,  680,
      685,    0,  684,  684,    0,  679,  686,    0,  687,    0,
        0,  688,    0,  689,    0,  690,  685,  685,  684,    0,
      685,    0,  686,  686,  687,  687,  687,  688,  688,  689,
      689,  690,  690,    0,  691,  690,  686,  688,    0,  692,
        0,  693,    0,  694,    0,    0,    0,  695,    0,  689,
      691,  691,  696,    0,  691,  692,  692,  693,  693,  694,
      694,  697,  693,  695,  695,  698,    0,    0,  696,  696,
      699,    0,  700,    0,    0,  701,    0,  697,  697,  694,
        0,  698,  698,  695,    0,    0,  699,  699,  700,  700,

      696,  701,  701,    0,  703,    0,  697,  702,    0,    0,
      704,  698,  705,    0,  706,    0,  707,    0,    0,  700,
      703,  703,  701,  702,  702,  702,  704,  704,  705,  705,
      706,  706,  707,  707,  708,    0,  706,  709,    0,  710,
        0,    0,    0,  705,  711,    0,  712,    0,    0,  715,
      708,  708,  708,  709,  709,  710,  710,  713,  707,  714,
      711,  711,  712,  712,  712,  715,  715,  716,    0,    0,
      717,  710,    0,  713,  713,  714,  714,    0,    0,  713,
      711,  714,    0,  716,  716,  716,  717,  717,  721,  721,
      717,  721,  726,    0,  721,    0,  721,    0,    0,  726,

      728,    0,    0,    0,    0,    0,  727,  728,  726,  726,
      721,  723,  726,  727,  723,    0,  728,  728,    0,  723,
      723,  723,  727,  727,  723,    0,  723,    0,    0,    0,
      729,    0,  723,  730,  723,  723,  723,  729,  728,    0,
      730,  731,  727,    0,  732,    0,  729,  729,  731,  730,
      730,  732,    0,    0,    0,  733,  729,  731,  731,    0,
      732,  732,  733,  723,  723,  725,  840,    0,  725,    0,
      730,  733,  733,  725,  725,  725,  732,  734,  725,    0,
      736,    0,  840,  840,  734,  733,  725,  736,  725,  725,
      725,    0,  733,  734,  734,  735,  736,  736,    0,  737,

        0,    0,  735,  738,    0,  736,  737,  734,    0,    0,
      738,  735,  735,    0,    0,  737,  737,  725,  725,  738,
      738,  739,    0,    0,  740,  735,  741,    0,  739,  742,
        0,  740,  735,  741,  738,    0,  742,  739,  739,  739,
      740,  740,  741,  741,    0,  742,  742,  743,  741,  744,
        0,  742,  745,    0,  743,  746,  744,    0,    0,  745,
      747,    0,  746,  743,  743,  744,  744,  747,  745,  745,
        0,  746,  746,    0,  748,    0,  747,  747,  747,  743,
      749,  748,  744,    0,    0,  750,    0,  749,  751,  745,
      748,  748,  750,  746,  846,  751,  749,  749,    0,  752,

        0,  750,  750,  748,  751,  751,  752,  753,    0,    0,
      846,  846,    0,  754,  753,  752,  752,  752,  755,    0,
      754,  749,    0,  753,  753,  755,  756,    0,  753,  754,
      754,    0,  757,  756,  755,  755,    0,  758,  755,  757,
        0,    0,  756,  756,  758,    0,    0,    0,  757,  757,
      759,    0,    0,  758,  758,    0,    0,  759,  756,  758,
        0,  760,  757,  761,    0,    0,  759,  759,  760,  762,
      761,    0,  759,    0,  763,    0,  762,  760,  760,  761,
      761,  763,    0,    0,    0,  762,  762,  764,    0,  765,
      763,  763,    0,  768,  764,  762,  765,  845,  760,  761,

      768,  766,    0,  764,  764,  765,  765,  766,  766,  768,
      768,  763,  767,  845,  845,    0,  764,  766,  766,  767,
        0,  765,    0,  845,  772,  772,    0,  772,  767,  767,
      772,    0,  772,    0,    0,  789,  767,  783,  783,    0,
      783,    0,  789,  783,    0,  783,  772,  774,    0,    0,
      774,  789,  789,    0,    0,  774,  774,  774,  788,  783,
      774,    0,  774,    0,    0,  788,  842,    0,  774,  790,
      774,  774,  774,  789,  788,  788,  790,  799,  788,    0,
      791,    0,  842,  842,  799,  790,  790,  791,  842,  847,
        0,  792,    0,  799,  799,  790,  791,  791,  792,  774,

      774,  776,    0,    0,  776,  847,  847,  792,  792,  776,
      776,  776,  793,    0,  776,    0,    0,  791,  799,  793,
      794,    0,  776,  792,  776,  776,  776,  794,  793,  793,
      793,    0,  797,    0,  795,    0,  794,  794,    0,  797,
        0,  795,  794,  848,    0,  803,    0,    0,  797,  797,
      795,  795,  803,  776,  776,  785,  795,    0,  785,  848,
      848,  803,  803,  785,  785,  785,  796,    0,  785,  797,
      785,  849,    0,  796,  798,  803,  785,  800,  785,  785,
      785,  798,  796,  796,  800,    0,    0,  849,  849,  801,
      798,  798,  798,  800,  800,  800,  801,  843,    0,  796,

        0,    0,  849,    0,  802,  801,  801,  785,  785,  787,
      801,  802,  787,  843,  843,    0,  843,  787,  787,  787,
      802,  802,  787,    0,  802,    0,    0,    0,  804,    0,
      787,  805,  787,  787,  787,  804,  807,    0,  805,  806,
        0,    0,  816,  807,  804,  804,  806,  805,  805,  816,
      804,    0,  807,  807,    0,  806,  806,    0,  816,  816,
      818,  787,  787,  811,  811,  806,  811,  818,  805,  811,
        0,  811,    0,  807,  819,    0,  818,  818,  816,    0,
        0,  819,    0,    0,    0,  811,  813,    0,    0,  813,
      819,  819,    0,    0,  813,  813,  813,    0,  821,  813,

        0,  813,    0,    0,  819,  821,    0,  813,    0,  813,
      813,  813,    0,  822,  821,  821,    0,  823,    0,  824,
      822,    0,    0,  821,  823,    0,  824,    0,    0,  822,
      822,    0,    0,  823,  823,  824,  824,    0,  813,  813,
      815,  824,    0,  815,  822,    0,    0,    0,  815,  815,
      815,  825,    0,  815,  851,  823,    0,    0,  825,  826,
        0,  815,  827,  815,  815,  815,  826,  825,  825,  827,
      851,  851,    0,  828,    0,  826,  826,    0,  827,  827,
      828,  841,    0,  844,    0,  851,    0,  825,    0,  828,
      828,  827,  815,  815,  829,    0,  826,  841,  841,  844,

      844,  829,    0,  841,  844,  828,  830,  830,    0,  830,
      829,  829,  830,  841,  830,    0,    0,  850,  829,  834,
      834,    0,  834,    0,    0,  834,    0,  834,  830,  833,
        0,    0,  833,  850,  850,    0,    0,  833,  833,  833,
        0,  834,  833,  852,  837,  837,  850,    0,  837,    0,
      833,    0,  833,  833,  833,  856,  837,  853,  837,  852,
      852,  852,  839,  839,    0,  839,    0,    0,  839,    0,
      839,  856,  856,  853,  853,    0,    0,    0,    0,    0,
        0,  833,  833,  836,  839,  854,  836,  837,  837,    0,
        0,  836,  836,  836,  853,  855,  836,  857,    0,  858,

        0,  854,  854,  854,  836,  859,  836,  836,  836,    0,
        0,  855,  855,  857,  857,  858,  858,  857,    0,    0,
        0,  859,  859,  860,    0,  861,  855,  859,  862,    0,
        0,  863,    0,    0,    0,  836,  836,  864,    0,  860,
      860,  861,  861,  865,  862,  862,  866,  863,  863,  862,
      867,  861,  863,  864,  864,    0,    0,  868,  860,  865,
      865,  869,  866,  866,  870,  865,  867,  867,    0,    0,
      871,    0,  864,  868,  868,  868,  867,  869,  869,  872,
      870,  870,  873,  866,  874,  870,  871,  871,  875,    0,
      876,    0,    0,  877,    0,  872,  872,  878,  873,  873,

      874,  874,    0,  879,  875,  875,  876,  876,  871,  877,
      877,    0,  876,  878,  878,    0,    0,    0,  873,  879,
      879,  880,    0,  881,    0,  882,    0,  883,  878,  875,
      886,    0,  879,  877,  884,    0,  887,  880,  880,  881,
      881,  882,  882,  883,  883,  885,  886,  886,    0,    0,
      884,  884,  887,  887,  888,    0,  880,  889,    0,  881,
      881,  885,  885,  884,  890,  885,  891,  887,    0,  892,
      888,  888,  893,  889,  889,  894,  888,    0,    0,  889,
      890,  890,  891,  891,  895,  892,  892,    0,  893,  893,
        0,  894,  894,  890,  892,  896,    0,  897,    0,  898,

      895,  895,  899,  891,  900,    0,  895,  901,    0,  893,
      902,  896,  896,  897,  897,  898,  898,  897,  899,  899,
      900,  900,  903,  901,  901,  898,  902,  902,    0,    0,
        0,  904,    0,  901,  905,    0,  906,    0,  903,  903,
      900,  907,    0,  908,    0,  902,  903,  904,  904,  909,
      905,  905,  906,  906,  910,    0,  911,  907,  907,  908,
      908,    0,  912,    0,  913,  909,  909,  906,    0,    0,
      910,  910,  911,  911,    0, 1021,    0,  907,  912,  912,
      913,  913,  914,  914,  909,  914,    0,    0,  914,  913,
      914, 1021, 1021,  924,    0,  917,  917,  912,  917,    0,

      924,  917,    0,  917,  914,  916,    0, 1030,  916,  924,
      924,    0,    0,  916,  916,  916,    0,  917,  916,  924,
      916,  921,  921, 1030, 1030,  921,  916,    0,  916,  916,
      916,  923,  923,  921,  923,  921, 1030,  923,  925,  923,
      959,  959,  959,  959,  926,  925,  959,    0,    0,    0,
        0,  926,    0,  923,  925,  925,    0,  916,  916,  920,
      926,  926,  920,    0,  921,  921,    0,  920,  920,  920,
      927,    0,  920,  969,  969,  969,  969,  927,    0,  969,
      920,  926,  920,  920,  920,  928,  927,  927,  929,    0,
      930,    0,  928,  931,  927,  929,    0,  930,    0,    0,

      931,  928,  928,    0,  929,  929,  930,  930,    0,  931,
      931,  920,  920,  922,    0,  930,  922,    0,  931,    0,
      928,  922,  922,  922,  932,    0,  922,    0,  922,    0,
        0,  932,  933,    0,  922,  935,  922,  922,  922,  933,
      932,  932,  935,  934,    0,  932,  936,    0,  933,  933,
      934,  935,  935,  936,    0,  996,  996,  996,  996,  934,
      934,  996,  936,  936,  937,  922,  922,    0,  938,  933,
      935,  937,  939,    0,  934,  938,    0,    0,  936,  939,
      937,  937,    0,  940,  938,  938,    0,    0,  939,  939,
      940,  941,    0,  939,  938,  942,  937,  943,  941,  940,

      940,    0,  942,    0,  943,    0,    0,  941,  941,  944,
        0,  942,  942,  943,  943,  945,  944,  946,    0,    0,
      940,  943,  945,  947,  946,  944,  944,  944,    0,  948,
      947,  945,  945,  946,  946,    0,  948,  949,    0,  947,
      947,    0,    0,    0,  949,  948,  948,    0,    0,  946,
      948,  950,  945,  949,  949,  947,  951,  949,  950,  952,
        0,    0,  953,  951,  954,    0,  952,  950,  950,  953,
        0,  954,  951,  951,    0,  952,  952,  952,  953,  953,
      954,  954,  954,  955,  953,  956,    0,  957,    0,    0,
      955,    0,  956,    0,  957,    0,    0,    0,  953,  955,

      955,  956,  956,  957,  957,  958,  958,    0,  958,  978,
      956,  958,    0,  958,    0,    0,  978,    0,  955,    0,
      965,  965,    0,    0,  965,  978,  978,  958,  960,    0,
        0,  960,  965,    0,  965,  978,  960,  960,  960,  961,
      961,  960,  961,  960,    0,  961,    0,  961,    0,  960,
        0,  960,  960,  960,  967,  967,    0,  967,    0,    0,
      967,  961,  967,  965,  965,  968,  968, 1022,  968,    0,
        0,  968,    0,  968,  975,  975,  967,    0,  975,    0,
      960,  960,  964, 1022, 1022,  964,  975,  968,  975,    0,
      964,  964,  964,  971,  971,  964,  971,    0,    0,  971,

        0,  971, 1022,  964,    0,  964,  964,  964,  977,  977,
        0,  977,    0,    0,  977,  971,  977,  975,  975,    0,
        0,  979,    0,    0,  980,    0,  986,    0,  979,    0,
      977,  980,    0,  986,  964,  964,  966,  979,  979,  966,
      980,  980,  986,  986,  966,  966,  966,  981,  980,  966,
        0,  966,  986,    0,  981,  982,    0,  966,  979,  966,
      966,  966,  982,  981,  981,    0,    0,  984,    0,    0,
      983,  982,  982,    0,  984,    0,    0,  983,  985,    0,
     1024,    0,  981,  984,  984,  985,  983,  983,  966,  966,
      970, 1023,  982,  970,  985,  985, 1024, 1024,  970,  970,

      970,  983,  984,  970,    0,  970,    0, 1023, 1023,  987,
      985,  970,  988,  970,  970,  970,  987,  989, 1024,  988,
        0, 1035,    0,  990,  989,  987,  987, 1023,  988,  988,
      990,    0, 1025,  989,  989,  989,  988, 1035, 1035,  990,
      990, 1035,  970,  970,  972,    0,  987,  972, 1025, 1025,
        0,    0,  972,  972,  972,  991,    0,  972,    0,  972,
      990,    0,  991,  992, 1025,  972,  994,  972,  972,  972,
      992,  991,  991,  994,  993,    0,    0,    0, 1005,  992,
      992,  993,  994,  994,  992, 1005, 1012,  991,  994,    0,
      993,  993,  993, 1012, 1005, 1005,  972,  972,  974,    0,

     1005,  974, 1012, 1012, 1012,    0,  974,  974,  974,  995,
      995,  974,  995,    0,    0,  995,    0,  995,    0,  974,
        0,  974,  974,  974,  998,  998,    0,  998,    0,    0,
      998,  995,  998,    0,    0, 1002, 1002, 1004, 1004, 1002,
     1004, 1006,    0, 1004,    0, 1004,  998, 1002, 1006, 1002,
      974,  974,  976, 1027,    0,  976,    0, 1006, 1006, 1004,
      976,  976,  976,    0, 1007,  976, 1006,  976,    0, 1027,
     1027, 1007,    0,  976, 1027,  976,  976,  976, 1002, 1002,
     1007, 1007, 1015, 1015, 1015, 1015, 1008,    0, 1015, 1007,
        0, 1014, 1014, 1008, 1014, 1026,    0, 1014,    0, 1014,

        0, 1009, 1008, 1008,  976,  976,  997, 1008, 1009,  997,
        0, 1026, 1026, 1014,  997,  997,  997, 1009, 1009,  997,
        0,  997, 1009,    0,    0, 1010, 1026,  997,    0,  997,
      997,  997, 1010,    0,    0,    0, 1011,    0,    0, 1013,
        0, 1010, 1010, 1011,    0, 1010, 1013,    0,    0, 1028,
     1016, 1016, 1011, 1011, 1016, 1013, 1013,    0,  997,  997,
      999,    0, 1016,  999, 1016, 1028, 1028,    0,  999,  999,
      999, 1028, 1011,  999, 1013,  999, 1020, 1020, 1020, 1020,
        0,  999, 1020,  999,  999,  999, 1029,    0,    0, 1018,
     1018,    0, 1018, 1016, 1016, 1018,    0, 1018, 1019, 1019,

        0, 1019, 1029, 1029, 1019,    0, 1019,    0, 1029, 1032,
        0, 1018,  999,  999, 1001, 1031,    0, 1001,    0,    0,
     1019,    0, 1001, 1001, 1001, 1032, 1032, 1001, 1036,    0,
     1034, 1031, 1031,    0, 1033, 1001,    0, 1001, 1001, 1001,
     1032, 1031, 1037,    0, 1036, 1036, 1034, 1034, 1038,    0,
     1033, 1033, 1034,    0, 1036,    0,    0, 1039, 1037, 1037,
        0,    0,    0,    0, 1038, 1038, 1001, 1001, 1003, 1041,
     1038, 1003, 1033, 1039, 1039,    0, 1003, 1003, 1003, 1037,
     1040, 1003, 1042, 1003,    0, 1041, 1041, 1043,    0, 1003,
     1045, 1003, 1003, 1003, 1044,    0, 1040, 1040, 1042, 1042,

     1041,    0, 1040, 1043, 1043,    0, 1045, 1045,    0,    0,
     1044, 1044, 1045, 1078, 1078, 1078, 1078, 1046,    0, 1078,
     1003, 1003, 1017, 1047, 1043, 1017,    0,    0,    0, 1044,
     1017, 1017, 1017, 1046, 1046, 1017, 1048,    0, 1050, 1047,
     1047, 1049,    0, 1017, 1051, 1017, 1017, 1017, 1046,    0,
        0, 1053, 1048, 1048, 1050, 1050, 1052, 1049, 1049,    0,
     1051, 1051, 1054,    0, 1055,    0, 1051, 1053, 1053, 1056,
        0, 1057, 1052, 1052, 1017, 1017, 1058, 1049, 1054, 1054,
     1055, 1055, 1052, 1059,    0, 1056, 1056, 1057, 1057, 1055,
     1060, 1056, 1058, 1058, 1058, 1061,    0, 1062,    0, 1059,

     1059, 1063,    0,    0, 1064,    0, 1060, 1060, 1057, 1065,
        0, 1061, 1061, 1062, 1062, 1066,    0, 1063, 1063, 1062,
     1064, 1064, 1067,    0, 1068, 1065, 1065, 1065, 1069,    0,
     1070, 1066, 1066, 1071,    0,    0, 1072, 1066, 1067, 1067,
     1068, 1068,    0,    0, 1069, 1069, 1070, 1070,    0, 1071,
     1071, 1074, 1072, 1072, 1073,    0,    0,    0, 1075, 1067,
        0, 1076,    0,    0,    0, 1069,    0, 1074, 1074,    0,
     1073, 1073, 1070, 1072, 1075, 1075, 1073, 1076, 1076, 1077,
     1077, 1153, 1077,    0,    0, 1077, 1074, 1077, 1079, 1079,
        0,    0, 1079, 1075,    0,    0,    0, 1153, 1153,    0,

     1079, 1077, 1079, 1081, 1081,    0, 1081, 1082, 1082, 1081,
     1082, 1081,    0, 1082,    0, 1082, 1083, 1083, 1083, 1083,
     1084,    0, 1083, 1085,    0, 1081, 1086, 1084, 1087, 1082,
     1085, 1079, 1079, 1086,    0, 1087, 1084, 1084, 1084, 1085,
     1085, 1085, 1086, 1086, 1087, 1087, 1088,    0,    0,    0,
        0, 1089,    0, 1088, 1090,    0,    0,    0, 1089,    0,
        0, 1090, 1088, 1088, 1086,    0, 1087, 1089, 1089, 1091,
     1090, 1090, 1088, 1092,    0, 1093, 1091, 1094,    0, 1156,
     1092, 1095, 1093,    0, 1094, 1091, 1091, 1157, 1095, 1092,
     1092, 1093, 1093, 1094, 1094, 1156, 1156, 1095, 1095, 1096,

        0, 1092, 1097, 1157, 1157,    0, 1096, 1095,    0, 1097,
     1098,    0, 1093, 1099, 1094, 1096, 1096, 1098, 1097, 1097,
     1099, 1096, 1157,    0, 1097, 1100, 1098, 1098, 1101, 1099,
     1099,    0, 1100, 1102,    0, 1101,    0,    0,    0,    0,
     1102, 1100, 1100,    0, 1101, 1101,    0, 1098,    0, 1102,
     1102, 1103,    0, 1100, 1104, 1102,    0, 1105, 1103, 1106,
        0, 1104, 1107, 1101, 1105,    0, 1106, 1103, 1103, 1107,
     1104, 1104,    0, 1105, 1105, 1106, 1106, 1108, 1107, 1107,
     1109, 1105,    0, 1104, 1108,    0,    0, 1109, 1103, 1111,
     1111, 1111, 1111, 1108, 1108, 1111, 1109, 1109, 1107, 1110,

     1110, 1130, 1110, 1114, 1114, 1110, 1114, 1110, 1130, 1114,
        0, 1114, 1109,    0, 1108, 1112, 1112, 1130, 1130, 1112,
        0, 1110,    0, 1130,    0, 1114,    0, 1112,    0, 1112,
     1115, 1115,    0, 1115,    0,    0, 1115,    0, 1115, 1116,
     1116, 1116, 1116, 1117, 1117, 1116, 1117,    0,    0, 1117,
        0, 1117, 1115,    0, 1118, 1118, 1118, 1118, 1112, 1112,
     1118,    0, 1119, 1119,    0, 1117, 1119, 1121, 1121,    0,
     1121, 1154,    0, 1121, 1119, 1121, 1119, 1122, 1122,    0,
     1122,    0,    0, 1122,    0, 1122,    0, 1154, 1154, 1121,
     1123, 1123, 1123, 1123, 1124,    0, 1123, 1125,    0, 1122,

     1126, 1124, 1127,    0, 1125, 1119, 1119, 1126, 1154, 1127,
     1124, 1124, 1124, 1125, 1125, 1125, 1126, 1126, 1127, 1127,
     1128,    0,    0,    0,    0, 1129,    0, 1128, 1131,    0,
        0,    0, 1129,    0,    0, 1131, 1128, 1128, 1126, 1132,
     1127, 1129, 1129, 1152, 1131, 1131, 1132, 1133,    0, 1158,
     1131, 1134,    0,    0, 1133, 1132, 1132, 1128, 1134, 1152,
     1152,    0, 1129, 1133, 1133, 1158, 1158, 1134, 1134, 1152,
     1135,    0, 1136, 1134, 1159,    0, 1132, 1135,    0, 1136,
     1158,    0, 1133,    0,    0, 1152, 1135, 1135, 1136, 1136,
     1159, 1159, 1137, 1137,    0, 1137, 1136,    0, 1137, 1135,

     1137, 1138, 1138, 1138, 1138, 1139, 1139, 1138, 1144, 1139,
     1141, 1141,    0, 1141, 1137, 1144, 1141, 1139, 1141, 1139,
     1142, 1142,    0, 1142, 1144, 1144, 1142,    0, 1142,    0,
     1145,    0, 1141, 1143, 1143, 1143, 1143, 1145, 1146, 1143,
        0,    0, 1142, 1147, 1144, 1146, 1145, 1145, 1139, 1139,
     1147, 1148,    0,    0, 1146, 1146, 1145,    0, 1148, 1147,
     1147,    0, 1149,    0, 1146,    0,    0, 1148, 1148, 1149,
     1151, 1151, 1151, 1151,    0, 1155, 1151, 1160, 1149, 1149,
     1147, 1161, 1150, 1150, 1162, 1150, 1163, 1148, 1150,    0,
     1150, 1155, 1155, 1160, 1160, 1164,    0, 1161, 1161, 1149,

     1162, 1162, 1163, 1163, 1150, 1165, 1162, 1166,    0, 1160,
     1167, 1164, 1164,    0, 1168, 1155,    0, 1169, 1161,    0,
     1171, 1165, 1165, 1166, 1166,    0, 1167, 1167, 1170, 1166,
     1168, 1168, 1164, 1169, 1169, 1168, 1171, 1171,    0, 1169,
     1172,    0, 1165, 1173, 1170, 1170, 1174,    0,    0, 1175,
     1170, 1176,    0, 1177,    0, 1171, 1172, 1172,    0, 1173,
     1173, 1178, 1174, 1174, 1173, 1175, 1175, 1176, 1176, 1177,
     1177, 1179,    0, 1180,    0, 1177, 1181, 1178, 1178, 1182,
        0, 1183,    0, 1184,    0,    0,    0, 1179, 1179, 1180,
     1180, 1185, 1181, 1181, 1176, 1182, 1182, 1183, 1183, 1184,

     1184, 1186, 1180, 1187,    0, 1184, 1188, 1185, 1185, 1189,
        0, 1190,    0,    0, 1182,    0,    0, 1186, 1186, 1187,
     1187,    0, 1188, 1188,    0, 1189, 1189, 1190, 1190, 1185,
     1191, 1191,    0, 1191,    0,    0, 1191,    0, 1191, 1187,
        0, 1189, 1193, 1190, 1192, 1192, 1192, 1192, 1194, 1193,
     1192,    0, 1191, 1195,    0, 1194, 1196,    0, 1193, 1193,
     1195, 1197,    0, 1196, 1194, 1194,    0, 1198, 1197, 1195,
     1195,    0, 1196, 1196, 1198,    0, 1196, 1197, 1197, 1193,
     1199,    0, 1200, 1198, 1198, 1194,    0, 1199, 1195, 1200,
        0,    0, 1197,    0, 1201,    0, 1199, 1199, 1200, 1200,

     1202, 1201, 1199,    0,    0,    0, 1203, 1202,    0,    0,
     1201, 1201, 1204, 1203,    0,    0, 1202, 1202,    0, 1204,
     1205, 1202, 1203, 1203, 1200, 1201, 1206, 1205, 1204, 1204,
     1204, 1207,    0, 1206, 1208,    0, 1205, 1205, 1207, 1209,
        0, 1208, 1206, 1206,    0,    0, 1209, 1207, 1207,    0,
     1208, 1208,    0,    0, 1210, 1209, 1209, 1211,    0, 1206,
     1208, 1210, 1207,    0, 1211, 1212,    0,    0, 1213,    0,
     1210, 1210, 1212, 1211, 1211, 1213,    0, 1215, 1215, 1215,
     1215, 1212, 1212, 1215, 1213, 1213, 1214, 1214,    0, 1214,
        0,    0, 1214, 1211, 1214,    0, 1210,    0,    0,    0,

     1213, 1212,    0, 1216, 1216,    0, 1216,    0, 1214, 1216,
     1218, 1216, 1217, 1217, 1217, 1217, 1219, 1218, 1217,    0,
        0, 1220,    0, 1219, 1221, 1216, 1218, 1218, 1220, 1222,
        0, 1221, 1219, 1219,    0,    0, 1222, 1220, 1220,    0,
     1221, 1221, 1223,    0, 1221, 1222, 1222, 1218, 1224, 1223,
     1225, 1222,    0, 1219, 1226, 1224, 1220, 1225, 1223, 1223,
        0, 1226,    0,    0, 1224, 1224, 1225, 1225, 1225, 1224,
     1226, 1226, 1227,    0, 1228,    0,    0, 1229, 1229, 1227,
     1229, 1228,    0, 1229, 1223, 1229,    0, 1226, 1227, 1227,
     1228, 1228, 1230, 1230, 1230, 1230,    0, 1231, 1230, 1229,

        0, 1232,    0, 1227, 1231, 1233,    0,    0, 1232,    0,
        0,    0, 1233, 1231, 1231,    0, 1228, 1232, 1232, 1234,
        0, 1233, 1233, 1235,    0, 1236, 1234, 1237, 1231, 1238,
     1235, 1233, 1232,    0, 1239, 1234, 1234, 1240,    0, 1235,
     1235, 1236, 1236, 1237, 1237, 1238, 1238, 1236, 1241, 1237,
     1239, 1239, 1242, 1240, 1240, 1234, 1243,    0,    0, 1235,
     1238, 1244,    0,    0, 1241, 1241,    0, 1245, 1242, 1242,
     1246,    0, 1243, 1243, 1240, 1247,    0, 1244, 1244, 1241,
     1248,    0, 1249, 1245, 1245,    0, 1246, 1246, 1242, 1245,
     1250, 1247, 1247, 1251,    0,    0, 1248, 1248, 1249, 1249,

     1253, 1248, 1252,    0, 1254,    0, 1250, 1250,    0, 1251,
     1251, 1251, 1255,    0, 1256,    0, 1253, 1253, 1252, 1252,
     1254, 1254, 1250, 1257, 1252, 1258,    0, 1259, 1255, 1255,
     1256, 1256, 1255, 1260,    0,    0, 1253,    0, 1261, 1257,
     1257, 1258, 1258, 1259, 1259, 1261, 1262,    0,    0, 1260,
     1260,    0, 1263, 1262, 1261, 1261,    0,    0, 1264, 1263,
     1257,    0, 1262, 1262, 1261, 1264,    0, 1259, 1263, 1263,
     1263, 1266, 1262, 1260, 1264, 1264, 1265,    0, 1266,    0,
        0,    0,    0, 1265,    0,    0,    0, 1266, 1266, 1267,
        0, 1268, 1265, 1265, 1269, 1264, 1267, 1270, 1268, 1267,

     1265, 1269, 1266,    0, 1270, 1267, 1267, 1268, 1268, 1271,
     1269, 1269, 1272, 1270, 1270, 1268, 1271,    0,    0, 1272,
     1273,    0,    0, 1274,    0, 1271, 1271, 1273, 1272, 1272,
     1274, 1275, 1272,    0, 1271,    0, 1273, 1273, 1275, 1274,
     1274,    0, 1276,    0,    0, 1277,    0, 1275, 1275, 1276,
     1278, 1273, 1277, 1275,    0,    0,    0, 1278, 1276, 1276,
        0, 1277, 1277, 1279,    0, 1280, 1278, 1278, 1281,    0,
     1279, 1282, 1280, 1277,    0, 1281, 1278,    0, 1282, 1279,
     1279, 1280, 1280, 1280, 1281, 1281,    0, 1282, 1282, 1279,
     1283,    0, 1284,    0, 1285,    0, 1286, 1283,    0, 1284,

     1283, 1285, 1282, 1286,    0, 1281, 1283, 1283, 1284, 1284,
     1285, 1285, 1286, 1286, 1285, 1287,    0, 1284, 1288,    0,
     1286, 1289, 1287,    0, 1290, 1288,    0,    0, 1289, 1291,
        0, 1287, 1287,    0, 1288, 1288, 1292, 1289, 1289, 1287,
     1290, 1290, 1293, 1289,    0, 1291, 1291, 1294,    0, 1288,
     1295,    0, 1292, 1292, 1296,    0, 1297,    0, 1293, 1293,
     1290,    0,    0, 1294, 1294, 1298, 1295, 1295, 1299,    0,
     1296, 1296, 1297, 1297, 1300,    0, 1301,    0, 1293, 1302,
        0, 1298, 1298,    0, 1299, 1299, 1303,    0,    0,    0,
     1300, 1300, 1301, 1301, 1304, 1302, 1302, 1305, 1301, 1299,

     1306,    0, 1303, 1303, 1302, 1298, 1325, 1306, 1307,    0,
     1304, 1304, 1303, 1305, 1305, 1307, 1306, 1306,    0, 1308,
        0, 1309, 1325, 1325, 1307, 1307, 1308, 1310, 1309,    0,
        0,    0,    0, 1311, 1310, 1308, 1308, 1309, 1309, 1306,
     1311, 1312,    0, 1310, 1310, 1313,    0, 1307, 1312, 1311,
     1311,    0, 1313, 1309,    0,    0, 1308, 1312, 1312, 1311,
     1314, 1313, 1313, 1312, 1310, 1315,    0, 1314, 1316, 1313,
        0, 1317, 1315,    0,    0, 1316, 1314, 1314, 1317,    0,
        0, 1315, 1315, 1318, 1316, 1316, 1319, 1317, 1317,    0,
     1318,    0,    0, 1319,    0,    0, 1314, 1320,    0, 1318,

     1318,    0, 1319, 1319, 1320, 1321,    0, 1316, 1322,    0,
     1317, 1326, 1321, 1320, 1320, 1322, 1323,    0, 1319, 1324,
     1318, 1321, 1321, 1323, 1322, 1322, 1324, 1326, 1326, 1327,
     1322, 1321, 1323, 1323, 1320, 1324, 1324, 1328,    0,    0,
     1323, 1329,    0,    0, 1330, 1327, 1327,    0, 1326,    0,
        0, 1330, 1331, 1328, 1328, 1324,    0, 1329, 1329, 1331,
     1330, 1330,    0, 1332,    0, 1327, 1330,    0, 1331, 1331,
     1332, 1333,    0, 1329, 1331, 1334,    0, 1335, 1333, 1332,
     1332,    0, 1334, 1336, 1335,    0,    0, 1333, 1333, 1332,
     1336, 1334, 1334, 1335, 1335, 1337,    0, 1335, 1338, 1336,

     1336, 1339, 1337,    0,    0, 1338, 1333,    0, 1339, 1340,
        0, 1337, 1337, 1343, 1338, 1338, 1340, 1339, 1339,    0,
     1338, 1341,    0, 1339, 1342, 1340, 1340,    0, 1341, 1343,
     1343, 1342, 1344,    0,    0, 1340, 1345, 1341, 1341,    0,
     1342, 1342,    0, 1345, 1342,    0,    0,    0, 1344, 1344,
     1346,    0, 1345, 1345, 1347,    0, 1341, 1346, 1348,    0,
     1350, 1347, 1349, 1344,    0, 1348, 1346, 1346,    0, 1349,
     1347, 1347,    0, 1351, 1348, 1348, 1350, 1350, 1349, 1349,
     1351, 1352,    0,    0, 1353,    0, 1347,    0, 1352, 1351,
     1351, 1353,    0,    0, 1349,    0,    0, 1352, 1352,    0,

     1353, 1353,    0,    0, 1351,    0,    0,    0,    0,    0,
        0,    0, 1352, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1360, 1360,
        0,    0, 1360, 1360, 1360, 1361,    0, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1362, 1362,    0,    0, 1362,
     1362, 1362, 1363,    0, 1363, 1363, 1363, 1363, 1363, 1363,

     1363, 1363, 1364, 1364,    0,    0, 1364, 1364, 1364, 1365,
        0, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1366,
     1366,    0,    0, 1366, 1366, 1366, 1367,    0, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1368, 1368,    0,    0,
     1368, 1368, 1368, 1369,    0, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1370,    0,    0,    0, 1370,    0, 1370,
     1370,    0, 1370, 1370, 1371,    0,    0, 1371, 1371,    0,
     1371, 1371, 1371, 1371, 1371, 1372, 1372,    0, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1373,    0, 1373, 1373,
        0,    0, 1373,    0, 1373, 1374, 1374, 1374, 1374, 1374,

        0, 1374, 1375, 1375, 1375, 1375, 1375,    0, 1375, 1376,
     1376, 1376, 1376, 1376,    0, 1376, 1377, 1377, 1377, 1377,
     1377,    0, 1377, 1378, 1378, 1378, 1378, 1378,    0, 1378,
     1379,    0, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1380,    0,    0,    0, 1380, 1380, 1380, 1380, 1380, 1380,
     1380, 1381,    0, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1382,    0,    0,    0, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1383,    0, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1384,    0,    0,    0, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1385,    0,    0,    0, 1385, 1385, 1385,

     1385, 1385, 1385, 1385, 1386,    0, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1387,    0,    0,    0, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1388,    0, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1389,    0,    0,    0, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1390, 1390,    0, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1391,    0,    0,
        0, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1392,    0,
        0,    0, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1393,
     1393,    0, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1394,    0,    0,    0, 1394, 1394, 1394, 1394, 1394, 1394,

     1394, 1395,    0,    0,    0, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1396, 1396,    0, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1397,    0,    0,    0, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1398,    0,    0,    0, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1399,    0,    0,    0, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1400, 1400,    0, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1401,    0,    0,
        0, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1402,    0,
        0,    0, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1403,
     1403,    0, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403,

     1404,    0,    0,    0, 1404, 1404, 1404, 1404, 1404, 1404,
     1404, 1405,    0,    0,    0, 1405, 1405, 1405, 1405, 1405,
     1405, 1405, 1406, 1406,    0, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1407,    0,    0,    0, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1408, 1408,    0, 1408, 1408, 1408,
     1408, 1408, 1408, 1408, 1408, 1409, 1409,    0, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1410,    0,    0,    0,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1411,    0,    0,
        0, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1412, 1412,
        0, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1413,

     1413,    0,    0, 1413, 1413, 1413, 1414, 1414,    0, 1414,
     1414, 1414, 1414, 1414, 1414, 1414, 1414, 1415,    0,    0,
        0, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1416,    0,
        0,    0, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1417,
     1417,    0, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1418, 1418,    0, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1419,    0,    0,    0, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1420, 1420,    0, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1421,    0,    0,    0, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1422,    0,    0,    0, 1422, 1422,

     1422, 1422, 1422, 1422, 1422, 1423, 1423,    0, 1423, 1423,
     1423, 1423, 1423, 1423, 1423, 1423, 1424, 1424,    0,    0,
     1424, 1424, 1424, 1425, 1425,    0, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1426,    0,    0,    0, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1427, 1427,    0, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1428,    0,    0,    0,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1429,    0,    0,
        0, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1430, 1430,
        0, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1431,
     1431,    0,    0, 1431, 1431, 1431, 1432, 1432,    0, 1432,

     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1433,    0,    0,
        0, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1434,    0,
        0,    0, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1435,
     1435,    0, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
     1436, 1436,    0, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1437, 1437,    0,    0, 1437, 1437, 1437, 1438, 1438,
        0, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1439,
     1439,    0, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1440, 1440,    0, 1440, 1440, 1440, 1440, 1440, 1440, 1440,
     1440, 1441, 1441,    0, 1441, 1441, 1441, 1441, 1441, 1441,

     1441, 1441, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
/*

    This file is part of the Maude 3 interpreter.

    Copyright 1997-2020 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 28 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "strategyLanguage.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
//#include "preModule.hh"
#include "lexerAux.hh"
#include "global.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

void getInput(char* buf, yy_size_t& result, yy_size_t max_size);
//
//	result might be an int or a yy_size_t depending on flex version, so we use a temporary.
//
#define YY_INPUT(buf, result, max_size) \
  { yy_size_t safeResult; getInput(buf, safeResult, max_size); result = safeResult; }

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define RETURN_FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

#define SAVE(token) \
  { savedToken.tokenize(yytext, lineNumber); savedReturn = token; }

#define SAVE_FIX_UP(token) \
  { savedToken.fixUp(yytext, lineNumber); savedReturn = token; }

#define RETURN_SAVED(token) \
  { lvalp->yyToken = savedToken; return (token); }

#define STORE \
  { Token t; t.tokenize(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored " << t);*/ }
#define STORE_FIX_UP \
  { Token t; t.fixUp(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored fixUp " << t);*/ }

#define EXIT(token) \
  { yy_pop_state(); RETURN(token) }

Token savedToken;
int savedReturn;
int braceCount;
int parenCount;
int terminationSet;
string accumulator;
string fileName;

//int terminationCondition;
int minLength;
extern Vector<Token> lexerBubble;
#line 2975 "<stdout>"

#line 2977 "<stdout>"

#define INITIAL 0
#define ID_MODE 1
#define CMD_MODE 2
#define SEEN_DOT 3
#define BUBBLE_MODE 4
#define END_STATEMENT_MODE 5
#define END_COMMAND_MODE 6
#define FILE_NAME_MODE 7
#define FILE_NAME_QUOTE_MODE 8
#define STRING_MODE 9
#define LATEX_MODE 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state ( int _new_state );
    
    static void yy_pop_state ( void );
    
    static int yy_top_state ( void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 120 "../../../src/Mixfix/lexer.ll"

#line 122 "../../../src/Mixfix/lexer.ll"
	if (UserLevelRewritingContext::interrupted())
	  yyterminate();

#line 3220 "<stdout>"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1355 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8903 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 125 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 129 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 135 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 136 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 140 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VIEW);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_SLOAD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_LL;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_SREDUCE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_SREWRITE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_DSREWRITE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_CHECK;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_XG_NARROW;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_GET;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_VARIANTS;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_VARIANT;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_BODY;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_BUILTIN;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 193 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 194 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 195 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 196 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 197 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 198 "../../../src/Mixfix/lexer.ll"
return KW_ATTRIBUTE;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 199 "../../../src/Mixfix/lexer.ll"
return KW_NEWLINE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 200 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 201 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 202 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 203 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 204 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 205 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 206 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 207 "../../../src/Mixfix/lexer.ll"
return KW_CONST;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 208 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 209 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 210 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 211 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 212 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 213 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 214 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 215 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 216 "../../../src/Mixfix/lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 217 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 218 "../../../src/Mixfix/lexer.ll"
return KW_OPS2;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 219 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 220 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 221 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 222 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 223 "../../../src/Mixfix/lexer.ll"
return KW_STRATS;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 224 "../../../src/Mixfix/lexer.ll"
return KW_SDS;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 225 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 226 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 227 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 228 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 229 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 230 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 231 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 232 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 233 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 234 "../../../src/Mixfix/lexer.ll"
return KW_IRREDUNDANT;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 235 "../../../src/Mixfix/lexer.ll"
return KW_FILTERED;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 236 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 237 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 238 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 239 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 240 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 241 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 242 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 243 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 244 "../../../src/Mixfix/lexer.ll"
return KW_LABEL;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 245 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 246 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 247 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 248 "../../../src/Mixfix/lexer.ll"
return KW_TEST;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 249 "../../../src/Mixfix/lexer.ll"
return KW_SMT_SEARCH;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 250 "../../../src/Mixfix/lexer.ll"
return KW_VU_NARROW;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 251 "../../../src/Mixfix/lexer.ll"
return KW_FVU_NARROW;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 252 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 253 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 258 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 272 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 276 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 277 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 278 "../../../src/Mixfix/lexer.ll"
RETURN(IDENTIFIER)
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 279 "../../../src/Mixfix/lexer.ll"
{
					  SAVE_FIX_UP(ENDS_IN_DOT)
					  BEGIN(SEEN_DOT);
					}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 283 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK


case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 287 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 292 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(IDENTIFIER)
					}
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 125:
YY_RULE_SETUP
#line 304 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 305 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 306 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 307 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 308 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 309 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 310 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 311 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 312 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 313 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 314 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 315 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 316 "../../../src/Mixfix/lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 317 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)		// both strategy attribute and declaration
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 318 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASTRAT)		// strategy attribute only
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 319 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DSTRAT)		// declaration of a strategy only
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 320 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 321 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 322 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 323 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 324 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 325 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 326 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 327 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 328 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 329 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 330 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 331 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 332 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 333 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 334 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 335 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 336 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 337 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 338 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 339 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 340 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 341 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 342 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 343 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 344 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 345 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 346 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 347 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 348 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 349 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SD)
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 350 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CSD)
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 351 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 352 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 353 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 354 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 355 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 356 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 357 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSIGN)
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 358 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 359 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 360 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Bubble mode squirrels tokens away in lexerBubble until some termination criteria is met.
  */

case 182:
YY_RULE_SETUP
#line 367 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COLON) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 373 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COMMA) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 379 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_LEFT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 385 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_RIGHT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 391 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_EQUALS) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 397 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_ARROW2) && lexerBubble.length() >= minLength)
					    EXIT(KW_ARROW2)
					  else
					    STORE
					}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 403 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_ASSIGN) && lexerBubble.length() >= minLength)
					    EXIT(KW_ASSIGN)
					  else
					    STORE
					}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 409 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_TO) && lexerBubble.length() >= minLength)
					    EXIT(KW_TO)
					  else
					    STORE
					}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 415 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_IF) && lexerBubble.length() >= minLength)
					    EXIT(KW_IF)
					  else
					    STORE
					}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 421 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_OP_ATTRIBUTE) && lexerBubble.length() >= minLength)
					    {
					      yyless(0);  // need to re-lex it to get the correct return value
					      yy_pop_state();
					    }
					  else
					    STORE
					}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 430 "../../../src/Mixfix/lexer.ll"
{
					  ++parenCount;
					  STORE
					}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 434 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0)
					    {
					      if ((terminationSet & BAR_RIGHT_PAREN) && lexerBubble.length() >= minLength)
					        EXIT(*yytext)
					      IssueWarning(LineNumber(lineNumber) << ": mismatched parentheses.");
					    }
					  else
					    --parenCount;
					  STORE
					}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 445 "../../../src/Mixfix/lexer.ll"
STORE
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 446 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() >= minLength &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE(*yytext)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE
					}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 457 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() + 1 >= minLength  &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE_FIX_UP(ENDS_IN_DOT)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE_FIX_UP
					}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 468 "../../../src/Mixfix/lexer.ll"
STORE_FIX_UP
	YY_BREAK

/*
  *	We have saved something that looks like a statement terminating period. We now lex the next
  *	token to see if it ends a module or starts a new statement, and if so push the lexed token back
  *	on to the input stream to be re-lexed in a new mode.
  */

case 198:
YY_RULE_SETUP
#line 477 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // BUG - need to deal with white space and comments after the .
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 485 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 200:
YY_RULE_SETUP
#line 493 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE(*yytext);
					}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 497 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE_FIX_UP(ENDS_IN_DOT)
					}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 501 "../../../src/Mixfix/lexer.ll"
{
	     				  //
					  //	We need {maudeId} here so that an identifier such
					  //	as .foo doesn't get split by the first rule.
					  //
					  lexerBubble.append(savedToken);
					  yyless(0);
					  BEGIN(BUBBLE_MODE);
					}
	YY_BREAK


case 203:
YY_RULE_SETUP
#line 513 "../../../src/Mixfix/lexer.ll"
{
					  if (accumulator.empty())
					    BEGIN(FILE_NAME_QUOTE_MODE);
					  else
					    accumulator += '"';
					}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 519 "../../../src/Mixfix/lexer.ll"
accumulator += ' ';
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 520 "../../../src/Mixfix/lexer.ll"
accumulator += '"';
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 521 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 522 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 523 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 524 "../../../src/Mixfix/lexer.ll"
{
					  if (!accumulator.empty())
					    {
					      yy_pop_state();
					      lvalp->yyString = accumulator.c_str();
					      eatComment(false);
					      return FILE_NAME_STRING;
					    }
					}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 533 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 211:
YY_RULE_SETUP
#line 542 "../../../src/Mixfix/lexer.ll"
{
					   yy_pop_state();
					   lvalp->yyString = accumulator.c_str();
					   eatComment(false);
					   return FILE_NAME_STRING;
					}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 548 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 549 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 214:
YY_RULE_SETUP
#line 558 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 563 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 216:
YY_RULE_SETUP
#line 572 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 573 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 578 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = accumulator.c_str();
						  return LATEX_STRING;
						}
					    }
					  accumulator += yytext;
					}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 592 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 596 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 600 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  accumulator += yytext;
					}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 604 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(SEEN_DOT):
case YY_STATE_EOF(BUBBLE_MODE):
case YY_STATE_EOF(END_STATEMENT_MODE):
case YY_STATE_EOF(END_COMMAND_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(FILE_NAME_QUOTE_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 607 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 613 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 614 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 615 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 620 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK
#line 4690 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1355 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1355 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1354);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree( (yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 620 "../../../src/Mixfix/lexer.ll"


#include "lexerAux.cc"

