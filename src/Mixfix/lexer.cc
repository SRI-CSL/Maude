/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 167
#define YY_END_OF_BUFFER 168
static yyconst short int yy_accept[862] =
    {   0,
      164,  164,  164,  164,  164,  164,  153,  153,  155,  155,
        0,    0,  168,  166,  164,  165,  165,   96,  166,   94,
       96,   96,   96,   94,   95,   95,   96,  166,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   15,   96,   96,   96,   96,   96,   96,   96,
      152,  166,  150,  150,  150,  152,  150,  150,  152,  166,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  100,  166,
       98,  100,   98,  100,  100,   99,   98,  100,  166,  100,
      100,  154,  153,  167,  155,  156,  163,  157,  162,  162,

      158,  159,  157,  160,  161,  164,   96,    0,   96,    0,
        0,    0,   96,   96,   95,    0,   96,   96,   96,   96,
       96,   11,   96,   96,   96,   96,   96,   40,   96,   96,
       71,   96,   96,   96,   96,   96,   96,   96,   58,   96,
        5,   96,   96,   96,   14,   96,   70,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   35,   68,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   72,   96,   96,
       96,   96,   96,   96,    6,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,  152,    0,  151,  152,    0,
        0,    0,  152,  152,  146,  149,  147,    0,  152,  152,

      152,  152,  152,  141,  152,  152,  152,  152,  140,  129,
      152,  152,  152,  152,  128,  152,  127,  152,  152,  152,
      152,  138,  152,  152,  152,  134,  152,  129,  152,  142,
      152,  152,  152,  152,  152,  101,  129,  152,  148,  100,
        0,  100,    0,    0,    0,  100,  100,    0,   97,   99,
        0,    5,  154,  153,  155,  157,  157,   96,    0,    2,
        2,   96,   96,   96,   63,   96,   96,   96,   62,   96,
       96,   96,   96,   96,   96,   96,   96,   16,   71,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   70,   96,   96,    6,   27,   96,   96,

       36,   96,   68,   96,   96,   96,   96,   96,   96,   96,
       10,   96,   93,   19,   96,   96,   21,   72,   96,   96,
       96,   33,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   69,   96,   96,   96,   96,   96,   96,   96,  152,
        0,    2,    2,  152,  152,  139,  152,  152,  143,  152,
      152,  152,  152,  152,  152,  152,  152,  106,  152,  129,
      152,  144,  152,  152,  152,  152,  152,  152,  122,  121,
      152,  135,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  137,  100,    0,    2,    2,    0,    0,    0,
        0,    2,    2,    2,    1,    2,    2,   96,   96,   96,

       42,   96,   96,   96,   96,   96,   96,   48,   26,   96,
       20,   96,   96,   86,   22,   96,   96,   54,   96,   23,
       96,   96,   96,   96,    9,   25,   96,    3,   96,   96,
       96,   18,   96,    7,   24,   96,   96,   89,   13,   96,
       96,   96,   96,   15,   96,   96,   96,   96,   96,   72,
       96,   96,   34,   67,   96,   84,   96,   96,   59,   96,
       96,   96,   69,   96,    8,   96,   96,   55,   96,   96,
        0,    0,    2,    2,    2,    1,    2,    2,  152,  152,
      105,  152,  152,  117,  152,  152,  144,  152,  145,  152,
      152,  102,  152,  152,  152,  107,  152,  152,  108,  152,

      152,  109,    3,  152,  152,  136,  152,  152,  116,  111,
      152,  152,  130,  152,  152,  152,  152,  152,  152,  137,
        0,    0,    2,    2,    1,    2,    2,    0,    0,    2,
        2,    1,    1,    1,    1,    1,    2,    2,    2,   83,
       96,   57,   87,   41,   51,   96,   96,   96,   96,   96,
       96,   76,   96,   81,   96,   96,   96,   96,   96,   96,
       96,   52,   96,   74,   90,   28,   96,   96,   96,   96,
       96,   96,   56,   17,   50,   96,   96,   12,   96,   96,
       96,   96,   96,   96,   96,   67,   60,   49,   96,   96,
       37,   31,   96,   66,   85,   43,   96,   96,    2,    2,

        1,    1,    1,    1,    1,    2,    2,    2,  104,  132,
      152,  152,  152,  123,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  103,  118,  152,  152,  152,  152,
      152,  152,  152,  110,  130,  152,  114,  152,  152,  152,
      129,    2,    2,    1,    1,    1,    1,    2,    2,    2,
        1,    1,    1,    1,    1,    2,    2,   38,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   78,   96,    4,   96,   96,   90,   53,   65,   27,
       96,   92,   96,   56,   96,   96,   96,   96,   19,   82,
       47,   96,   30,   44,   96,   96,   61,   96,   29,   32,

        1,    1,    1,    1,    1,    2,    2,  152,  152,  120,
      152,  152,    4,  115,  112,  152,  152,  152,  152,  152,
      152,  152,  121,  152,  152,  152,  152,  152,  152,  152,
      152,  152,    1,    1,    1,    1,    1,    2,    2,    1,
        1,   96,   57,   96,   75,   96,   46,   96,   96,   20,
       96,   96,   80,   96,   96,   79,   64,   96,   96,   96,
       91,   77,   96,   21,   96,   73,   39,    1,    1,  152,
      152,  152,  152,  152,  124,  152,  152,  152,  152,  122,
      152,  125,  152,  152,  152,  119,  152,  152,  131,  152,
        1,    1,   96,   96,   75,   96,   96,   26,   45,   22,

       96,   23,   96,   24,   96,   93,   96,  152,  152,  152,
      152,  152,  152,  152,  152,  108,  113,  152,  152,  152,
      114,  133,  131,  152,   96,   88,   96,   48,   54,   18,
       96,   96,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  126,   96,   96,  152,  152,  152,  152,  107,  152,
      111,  133,   96,  104,  105,  152,  116,   49,  152,  120,
        0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   22,    8,   24,   25,   26,   27,   28,   29,

       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   13,   53,   54,    1,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55
    } ;

static yyconst int yy_meta[56] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    6,    9,    9,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    7,    7,    5,    6
    } ;

static yyconst short int yy_base[907] =
    {   0,
        0,    0,   55,    0,  110,  163,  134,  140,  145,  149,
      216,  271,  313, 5223,  151, 5223, 5223,  167,  171, 5223,
      174, 5223,  180,  184,  187,  219,  205,  196,  226,  222,
      261,  282,  278,  305,  236,  286,  232,  291,  327,  338,
      376,  346,  335,  386,  396,  400,  349,  421,  428,  435,
      366,  215, 5223,  454,  440,  459,  473,  478,  484,  327,
      495,  531,  497,  509,  519,  541,  568,  554,  578,  600,
      610,  622,  624,  643,  566,  647,  661,  521,  264,  231,
     5223,  284, 5223,  492,  690,  657,  374,  529,  690,  576,
     5223,    0,  116, 5223,    0, 5223, 5223,    0, 5223, 5223,

     5223, 5223,  149, 5223, 5223,  433,  586,  269,  596,  696,
      274,  281,  630,  702,  704,  709,  700,  655,  721,  727,
      729,  741,  748,  751,  758,  760,  762,  768,  785,  789,
      791,  794,  802,  808,  812,  816,  819,  829,  833,  839,
      842,  836,  847,  859,  864,  867,  869,  871,  873,  877,
      891,  894,  901,  896,  899,  908,  918,  920,  926,  929,
      937,  943,  946,  951,  957,  960,  964,  970,  978,  992,
      995,  997, 1000, 1014, 1018, 1022, 1024, 1042, 1044, 1046,
     1048, 1050, 1068, 1070, 1073, 1075,  296, 1092, 1094, 1111,
      323,  264, 1114, 1119, 1131, 1133, 1136, 1140, 1150, 1156,

     1160, 1179, 1191, 1193, 1196, 1210, 1215, 1227, 1229, 1233,
     1239, 1250, 1252, 1264, 1275, 1277, 1287, 1297, 1299, 1301,
     1320, 1324, 1321, 1338, 1348, 1352, 1362, 1365, 1376, 1382,
     1388, 1393, 1405, 1410, 1416, 1427, 1429, 1433, 1446, 1158,
      395, 1295, 1455,  399,  256, 1463, 1458, 1487, 5223, 1486,
     1487, 1307,    0,  131,    0,    0, 5223, 1491,  404, 1540,
     1593, 1503, 1496, 1508, 1513, 1533, 1543, 1546, 1550, 1571,
     1575, 1581, 1599, 1557, 1603, 1610, 1612, 1554, 1564, 1623,
     1630, 1632, 1634, 1641, 1651, 1659, 1663, 1668, 1671, 1673,
     1677, 1685, 1690, 1699, 1703, 1707, 1710, 1712, 1716, 1720,

     1724, 1733, 1741, 1743, 1750, 1752, 1754, 1762, 1764, 1772,
     1775, 1783, 1789, 1793, 1795, 1797, 1801, 1806, 1823, 1825,
     1827, 1831, 1834, 1836, 1845, 1853, 1855, 1862, 1867, 1879,
     1884, 1886, 1889, 1893, 1896, 1903, 1910, 1913, 1920, 1937,
      448, 1962, 2015, 1940, 1965, 1943, 1979, 1962, 1996, 2018,
     2029, 2018, 2055, 2035, 2066, 2068, 2072, 2078, 2090, 2100,
     2102, 2114, 2124, 2126, 2137, 2143, 2148, 2154, 2160, 2165,
     2177, 2182, 2187, 2199, 2204, 2209, 2222, 2227, 2232, 2244,
     2254, 2250, 2271, 1923,  449, 2315, 2368,  246,  237,  467,
      239,    0,  213, 1522, 2421,  106, 2474, 1973, 2273, 2276,

     2252, 2282, 2284, 2319, 2321, 2324, 2326, 2329, 2346, 2350,
     2372, 2374, 2376, 2378, 2385, 2402, 2399, 2425, 2427, 2433,
     2430, 2435, 2447, 2455, 2477, 2480, 2484, 2486, 2488, 2491,
     2494, 2505, 2511, 2514, 2523, 2528, 2531, 2533, 2535, 2540,
     2545, 2553, 2562, 2564, 2571, 2573, 2575, 2581, 2584, 2595,
     2601, 2603, 2608, 2612, 2621, 2625, 2629, 2633, 2638, 2642,
     2646, 2655, 2659, 2663, 2666, 2668, 2676, 2687, 2690, 2695,
      468,  230,  211, 2720,  202, 2743,  344, 2796, 2707, 2725,
     2739, 2757, 2763, 2721, 2774, 2777, 2800, 2803, 2817, 2821,
     2831, 2834, 2845, 2855, 2857, 2867, 2877, 2879, 2889, 2902,

     2907, 2912, 2924, 2926, 2929, 2946, 2948, 2950, 2968, 2970,
     2972, 2989, 2992, 2994, 3006, 3016, 3030, 3033, 3036, 3047,
      487,  210,  182, 3020, 3072,  372, 3125,  188,  175, 3083,
      798,    0, 3178, 3084,  159, 3231, 3088,  150, 3104, 2751,
     3091, 3050, 2843, 2753, 2853, 2885, 2875, 3094, 3041, 3113,
     3121, 2865, 3139, 2958, 3144, 3146, 3166, 3172, 3174, 3148,
     3185, 3053, 3196, 3119, 3199, 3202, 3209, 3227, 3213, 3235,
     3204, 3239, 3241, 3245, 3253, 3265, 3267, 3272, 3279, 3284,
     3291, 3298, 3301, 3303, 3308, 3315, 3320, 3325, 3332, 3338,
     3342, 3349, 3352, 3355, 3359, 3362, 3369, 3373, 3399, 1207,

     3423, 3403,    0,  136, 3476, 3403,  135, 3434, 3435, 3437,
     3449, 3472, 3483, 3454, 3486, 3496, 3506, 3508, 3518, 3528,
     3530, 3532, 3549, 3551, 3555, 3568, 3573, 3578, 3590, 3592,
     3602, 3604, 3615, 3621, 3625, 3635, 3638, 3648, 3660, 3662,
     3666, 3692, 1334, 3715, 3704,  124, 3768, 3678,  109, 3705,
     3734, 1443, 3722,    0, 3741, 3779, 1477, 3396, 3406, 3459,
     3598, 3693, 3746, 3775, 3772, 3782, 3786, 3789, 3737, 3799,
     3803, 3656, 3806, 3813, 3816, 3825, 3827, 3833, 3838, 3844,
     3847, 3850, 3855, 3861, 3864, 3868, 3878, 3881, 3885, 3887,
     3890, 3892, 3895, 3904, 3909, 3912, 3915, 3917, 3921, 3926,

     3948, 2140, 3950,    0, 3966, 3973, 2735, 3960, 3974, 3985,
     3988, 3998, 4002, 4012, 4024, 4026, 4029, 4043, 4047, 4060,
     4070, 4073, 4083, 4087, 4097, 4100, 4110, 4120, 4122, 4134,
     4140, 4144, 4057, 2828, 4152,    0, 4166, 4179, 2940, 4186,
     3158, 4167, 3934, 4172, 4108, 3954, 4189, 4191, 4194, 4197,
     4201, 4203, 4214, 4220, 4223, 4227, 4231, 4233, 4240, 4250,
     4252, 4254, 4257, 4262, 4264, 4274, 4276, 4302, 3388, 4288,
     4298, 4310, 4312, 4322, 4332, 4335, 4346, 4358, 4360, 4363,
     4377, 4382, 4395, 4399, 4401, 4405, 4418, 4423, 4428, 4440,
     4450, 4040, 4436, 4293, 4446, 4453, 4460, 4465, 4467, 4470,

     4472, 4478, 4484, 4491, 4495, 4497, 4501, 4508, 4519, 4525,
     4531, 4536, 4548, 4550, 4554, 4568, 4572, 4574, 4585, 4595,
     4599, 4605, 4616, 4622, 4593, 4603, 4624, 4627, 4630, 4635,
     4641, 4648, 4653, 4665, 4670, 4667, 4689, 4692, 4694, 4711,
     4713, 4716, 4721, 4724, 4738, 4742, 4760, 4762, 4764, 4774,
     4784, 4787, 4735, 4797, 4801, 4807, 4811, 4805, 4824, 4828,
     5223, 4863, 4872, 4881, 4890, 4895, 4901, 4906, 4912, 4917,
     4923, 4932, 4941, 4949, 4954, 4958, 4962, 4967, 4976, 4982,
     4991, 4997, 5006, 5015, 5024, 5033, 5042, 5051, 5060, 5069,
     5078, 5087, 5096, 5105, 5114, 5123, 5132, 5141, 5150, 5159,

     5168, 5177, 5186, 5195, 5204, 5213
    } ;

static yyconst short int yy_def[907] =
    {   0,
      861,    1,  861,    3,  862,  862,  863,  863,  864,  864,
      865,  865,  861,  861,  861,  861,  861,  866,  867,  861,
      866,  861,  866,  866,  866,  866,  866,  861,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      868,  869,  861,  868,  868,  868,  868,  868,  868,  861,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  870,  871,
      861,  870,  861,  870,  870,  870,  870,  870,  861,  870,
      861,  872,  861,  861,  873,  861,  861,  874,  861,  861,

      861,  861,  861,  861,  861,  861,  866,  867,  866,  875,
      867,  867,  866,  866,  866,  861,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  868,  869,  868,  868,  876,
      869,  869,  868,  868,  868,  868,  868,  861,  868,  868,

      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,   67,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  870,
      871,  870,  877,  871,  871,  870,  870,  861,  861,  870,
      861,  870,  872,  861,  873,  874,  861,  866,  878,  879,
      879,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,

      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  868,
      880,  881,  881,  868,  868,  868,  868,   67,  868,  868,
      868,   67,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  870,  882,  883,  883,  861,  861,  878,
      878,  884,  261,  885,  886,  261,  887,  866,  866,  866,

      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      880,  880,  343,  888,  343,  889,  343,  890,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,

      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      882,  882,  387,  891,  892,  387,  893,  861,  861,  885,
      885,  894,  886,  895,  533,  896,  884,  261,  897,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  888,  888,

      889,  898,  601,  601,  899,  884,  343,  900,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  891,  891,  892,  901,  644,  902,  884,  387,  903,
      895,  895,  894,  533,  904,  897,  897,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,

      898,  898,  894,  601,  905,  900,  900,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  901,  901,  894,  644,  906,  903,  903,  904,
      904,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  905,  905,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      906,  906,  866,  866,  866,  866,  866,  866,  866,  866,

      866,  866,  866,  866,  866,  866,  866,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  866,  866,  866,  866,  866,  866,
      866,  866,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  866,  866,  868,  868,  868,  868,  868,  868,
      868,  868,  866,  868,  868,  868,  868,  866,  868,  868,
        0,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,

      861,  861,  861,  861,  861,  861
    } ;

static yyconst short int yy_nxt[5279] =
    {   0,
       14,   15,   16,   14,   17,   15,   15,   18,   19,   20,
       20,   21,   18,   22,   23,   24,   25,   26,   18,   18,
       18,   20,   18,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   18,   36,   18,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   18,
       18,   22,   22,   18,   18,   14,   15,   16,   14,   17,
       15,   15,   51,   52,   53,   53,   54,   55,   53,   56,
       55,   51,   51,   57,   58,   51,   53,   51,   59,   60,
       61,   51,   62,   63,   64,   65,   66,   51,   67,   68,
       51,   69,   70,   51,   71,   72,   51,   73,   74,   75,

       76,   77,   51,   51,   51,   51,   53,   53,   78,   51,
       14,   15,   16,   14,   17,   15,   15,  254,   80,   81,
       81,   82,  254,   83,   84,   85,  393,   86,   87,  523,
      537,   81,  254,   88,   89,   93,   94,  254,   94,   94,
       93,   93,   94,   90,   94,   94,   93,   96,  735,   96,
       96,   96,  106,   96,   96,  473,  106,  106,  257,  257,
      703,   91,   91,   14,   15,   16,   14,   17,   15,   15,
      393,   80,   81,   81,   82,  108,   83,   84,   85,  107,
       86,   87,  108,  653,   81,  113,   88,   89,  108,  249,
      109,  110,  108,  112,  114,  108,   90,  109,  110,  249,

      257,  257,  523,  109,  110,  109,  109,  109,  110,  109,
      109,  110,  521,  108,   91,   91,   97,  109,   99,   97,
      100,   97,  473,  186,   97,  101,  102,  108,  109,  116,
      108,  473,  471,  393,  108,  115,  115,  192,  103,  240,
      108,  390,  109,  110,  108,  109,  110,  109,  109,  109,
      110,  529,  117,  245,  118,  109,  110,  528,  244,  109,
      110,  120,  119,  139,  121,  142,  191,  104,  105,  108,
       97,   97,  241,   99,   97,  100,   97,  107,  140,   97,
      101,  102,  107,  111,  109,  110,  108,  242,  243,  122,
      108,  112,  241,  103,  108,  246,  112,  123,  124,  108,

      125,  109,  110,  126,  186,  109,  110,  242,  243,  109,
      110,  127,  861,  108,  109,  110,  143,  130,  192,  131,
      132,  128,  104,  105,  141,   97,  133,  129,  109,  110,
      144,  186,  861,  861,  145,  108,  189,  189,  861,  861,
      189,  134,  135,  108,  136,  192,  108,  137,  189,  138,
      109,  110,  146,  147,  108,  861,  148,  108,  109,  110,
      149,  109,  110,  151,  473,  861,  150,  861,  606,  109,
      110,  160,  109,  110,  187,  861,  861,  152,  189,  189,
      165,  188,  241,  153,  108,  161,  861,  178,  162,  189,
      190,  163,  523,  164,  108,  861,  648,  242,  243,  109,

      110,  861,  154,  240,  108,  861,  155,  240,  108,  109,
      110,  166,  258,  156,  157,  167,  158,  245,  159,  109,
      110,  245,  168,  109,  110,  170,  391,  861,  171,  108,
      861,  169,  175,  176,  106,  172,  108,  861,  106,  106,
      173,  174,  177,  108,  109,  110,  179,  861,  187,  861,
      180,  109,  110,  861,  181,  188,  340,  384,  109,  110,
      182,  183,  187,  189,  190,  193,  861,  187,  861,  188,
      472,  522,  184,  194,  188,  258,  340,  189,  190,  195,
      185,  187,  189,  190,  861,  861,  187,  861,  188,  391,
      472,  196,  187,  188,  861,  384,  189,  190,  197,  188,

      241,  189,  190,  187,  861,  187,  247,  189,  198,  522,
      188,  861,  188,  861,  861,  242,  243,  187,  189,  190,
      189,  190,  861,  861,  188,  861,  861,  187,  861,  187,
      207,  861,  189,  190,  188,  861,  188,  241,  199,  187,
      861,  239,  189,  190,  189,  190,  188,  208,  861,  187,
      209,  861,  242,  251,  189,  190,  188,  210,  211,  861,
      200,  212,  187,  861,  189,  190,  213,  201,  202,  188,
      203,  861,  204,  205,  187,  206,  187,  189,  190,  861,
      219,  188,  861,  188,  241,  861,  187,  861,  861,  189,
      190,  189,  190,  188,  108,  235,  214,  861,  215,  242,

      243,  189,  190,  220,  108,  236,  216,  221,  187,  109,
      110,  217,  218,  861,  252,  188,  861,  861,  187,  109,
      116,  861,  861,  189,  190,  188,  222,  861,  861,  223,
      187,  861,  187,  189,  190,  861,  225,  188,  108,  188,
      861,  260,  861,  224,  861,  189,  190,  189,  190,  861,
      226,  187,  861,  109,  110,  187,  861,  229,  188,  861,
      230,  227,  188,  108,  228,  241,  189,  190,  861,  187,
      189,  190,  861,  250,  250,  861,  188,  861,  109,  110,
      242,  243,  231,  232,  189,  190,  238,  233,  234,  861,
      237,  248,  249,  248,  248,  248,  248,  861,  241,  242,

      242,  263,  861,  242,  259,  109,  109,  861,  108,  109,
      108,  242,  108,  242,  243,  861,  261,  109,  109,  109,
      115,  115,  109,  109,  110,  109,  110,  109,  110,  108,
      109,  861,  861,  861,  861,  108,  861,  108,  861,  262,
      861,  242,  242,  861,  109,  110,  861,  109,  109,  108,
      109,  110,  109,  110,  264,  266,  108,  265,  267,  108,
      109,  109,  861,  861,  109,  110,  108,  861,  108,  861,
      108,  109,  110,  861,  109,  110,  108,  268,  861,  269,
      861,  109,  110,  109,  110,  109,  110,  861,  275,  274,
      861,  109,  110,  108,  270,  271,  272,  108,  392,  108,

      111,  392,  108,  273,  111,  276,  861,  861,  109,  110,
      108,  861,  109,  110,  109,  110,  108,  109,  110,  278,
      108,  861,  277,  280,  108,  109,  110,  108,  861,  281,
      861,  109,  110,  283,  279,  109,  110,  108,  861,  109,
      110,  108,  109,  110,  108,  861,  282,  108,  286,  861,
      108,  284,  109,  110,  861,  108,  109,  110,  285,  109,
      110,  175,  109,  110,  287,  109,  110,  108,  861,  288,
      109,  110,  108,  290,  289,  108,  861,  108,  861,  108,
      861,  108,  109,  110,  291,  108,  861,  109,  110,  861,
      109,  110,  109,  110,  109,  110,  109,  110,  292,  108,

      109,  110,  108,  861,  108,  297,  861,  108,  295,  108,
      861,  293,  294,  861,  109,  110,  108,  109,  110,  109,
      110,  296,  109,  110,  109,  110,  108,  861,  108,  301,
      175,  109,  110,  298,  108,  861,  299,  108,  300,  861,
      861,  109,  110,  109,  110,  108,  861,  302,  861,  109,
      110,  108,  109,  110,  108,  304,  861,  861,  861,  108,
      109,  110,  861,  303,  861,  108,  109,  110,  108,  109,
      110,  305,  108,  306,  109,  110,  308,  307,  108,  311,
      109,  110,  309,  109,  110,  861,  108,  109,  110,  310,
      312,  861,  314,  109,  110,  861,  861,  861,  861,  861,

      108,  109,  110,  108,  313,  108,  861,  315,  108,  861,
      316,  317,  861,  318,  319,  109,  110,  320,  109,  110,
      109,  110,  108,  109,  110,  325,  108,  861,  321,  326,
      108,  861,  108,  861,  323,  861,  322,  109,  110,  324,
      327,  109,  110,  861,  861,  109,  110,  109,  110,  330,
      108,  328,  108,  861,  108,  861,  108,  861,  108,  329,
      861,  861,  861,  861,  861,  109,  110,  109,  110,  109,
      110,  109,  110,  109,  110,  331,  108,  334,  108,  335,
      861,  108,  861,  187,  861,  861,  332,  861,  333,  336,
      188,  109,  110,  109,  110,  338,  109,  110,  189,  190,

      187,  861,  187,  861,  861,  861,  861,  188,  861,  188,
      861,  339,  337,  861,  861,  189,  190,  189,  198,  341,
      189,  189,  187,  861,  189,  342,  861,  187,  861,  188,
      861,  861,  189,  343,  188,  861,  861,  189,  190,  187,
      861,  187,  189,  190,  187,  861,  188,  861,  188,  189,
      189,  188,  861,  189,  189,  190,  189,  190,  187,  189,
      190,  189,  189,  189,  187,  188,  241,  861,  187,  861,
      861,  188,  861,  189,  190,  188,  861,  861,  861,  189,
      190,  242,  243,  189,  190,  345,  861,  187,  861,  861,
      861,  189,  189,  344,  188,  861,  861,  204,  861,  187,

      861,  187,  189,  190,  187,  346,  188,  392,  188,  191,
      392,  188,  861,  191,  189,  190,  189,  190,  187,  189,
      190,  861,  861,  187,  861,  188,  861,  861,  347,  348,
      188,  861,  349,  189,  190,  187,  861,  187,  189,  190,
      861,  187,  188,  861,  188,  861,  861,  187,  188,  350,
      189,  190,  189,  190,  188,  352,  189,  190,  187,  351,
      187,  861,  189,  190,  861,  188,  861,  188,  861,  861,
      861,  861,  187,  189,  190,  189,  190,  353,  357,  188,
      861,  354,  358,  187,  861,  187,  861,  189,  190,  355,
      188,  861,  188,  359,  861,  187,  356,  861,  189,  190,

      189,  190,  188,  241,  360,  187,  861,  187,  861,  187,
      189,  190,  188,  861,  188,  241,  188,  861,  242,  251,
      189,  190,  189,  190,  189,  190,  361,  363,  187,  861,
      242,  243,  187,  861,  392,  188,  244,  392,  362,  188,
      244,  861,  861,  189,  190,  364,  187,  189,  190,  186,
      365,  186,  861,  188,  861,  861,  187,  861,  366,  186,
      187,  189,  190,  188,  367,  368,  371,  188,  861,  369,
      187,  189,  190,  187,  861,  189,  190,  188,  861,  861,
      188,  861,  370,  861,  187,  189,  190,  861,  189,  190,
      187,  188,  861,  861,  374,  372,  187,  188,  373,  189,

      190,  187,  861,  188,  375,  189,  190,  376,  188,  861,
      861,  189,  190,  187,  861,  861,  189,  190,  187,  861,
      188,  861,  378,  861,  187,  188,  861,  861,  189,  190,
      377,  188,  861,  189,  190,  187,  380,  187,  861,  189,
      190,  187,  188,  532,  188,  111,  532,  379,  188,  111,
      189,  190,  189,  190,  187,  861,  189,  190,  381,  861,
      861,  188,  382,  385,  242,  242,  241,  861,  242,  189,
      190,  241,  387,  861,  386,  383,  242,  392,  861,  390,
      392,  242,  243,  390,  861,  861,  242,  243,  248,  249,
      248,  248,  248,  248,  241,  861,  242,  242,  388,  108,

      242,  389,  250,  250,  108,  861,  242,  242,  242,  242,
      243,  108,  861,  861,  109,  110,  108,  861,  861,  109,
      110,  108,  392,  861,  861,  392,  109,  110,  111,  399,
      393,  109,  110,  400,  861,  861,  109,  110,  242,  242,
      392,  108,  861,  392,  531,  398,  861,  861,  394,  392,
      392,  108,  861,  392,  108,  861,  109,  110,  108,  861,
      395,  392,  108,  396,  397,  108,  109,  110,  402,  109,
      110,  403,  108,  109,  110,  861,  861,  109,  110,  108,
      109,  110,  401,  108,  861,  411,  861,  109,  110,  108,
      861,  392,  392,  392,  109,  110,  392,  861,  109,  110,

      861,  394,  392,  392,  109,  110,  392,  108,  407,  408,
      404,  108,  405,  395,  392,  406,  396,  397,  108,  861,
      108,  861,  109,  110,  861,  409,  109,  110,  861,  861,
      861,  108,  861,  109,  110,  109,  110,  410,  108,  413,
      108,  861,  108,  861,  392,  392,  109,  110,  412,  108,
      861,  861,  414,  109,  110,  109,  110,  109,  110,  108,
      861,  417,  861,  861,  109,  110,  416,  108,  861,  175,
      415,  108,  861,  861,  109,  110,  108,  861,  418,  108,
      861,  108,  109,  110,  861,  108,  109,  110,  419,  861,
      861,  109,  110,  108,  109,  110,  109,  110,  108,  423,

      109,  110,  424,  421,  422,  425,  420,  108,  109,  110,
      861,  108,  861,  109,  110,  108,  861,  427,  108,  861,
      108,  861,  109,  110,  108,  426,  109,  110,  108,  861,
      109,  110,  108,  109,  110,  109,  110,  429,  861,  109,
      110,  108,  428,  109,  110,  861,  433,  109,  110,  108,
      861,  108,  861,  432,  431,  430,  109,  110,  108,  861,
      108,  434,  108,  861,  109,  110,  109,  110,  861,  861,
      108,  861,  108,  109,  110,  109,  110,  109,  110,  436,
      108,  861,  439,  108,  438,  109,  110,  109,  110,  861,
      435,  108,  861,  437,  441,  109,  110,  108,  109,  110,

      440,  108,  861,  108,  443,  108,  109,  110,  442,  108,
      861,  861,  109,  110,  108,  861,  109,  110,  109,  110,
      109,  110,  445,  861,  109,  110,  448,  444,  861,  109,
      110,  108,  861,  108,  861,  108,  861,  861,  446,  108,
      447,  861,  108,  449,  108,  861,  109,  110,  109,  110,
      109,  110,  450,  108,  109,  110,  452,  109,  110,  109,
      110,  108,  861,  108,  861,  861,  861,  451,  109,  110,
      108,  861,  861,  861,  861,  108,  109,  110,  109,  110,
      454,  453,  861,  861,  861,  109,  110,  108,  861,  455,
      109,  110,  108,  456,  108,  861,  459,  108,  457,  458,

      460,  108,  109,  110,  108,  861,  461,  109,  110,  109,
      110,  108,  109,  110,  462,  464,  109,  110,  108,  109,
      110,  108,  861,  861,  861,  861,  109,  110,  108,  463,
      861,  241,  861,  109,  110,  861,  109,  110,  466,  467,
      465,  861,  468,  109,  110,  187,  242,  243,  187,  861,
      861,  187,  188,  470,  861,  188,  861,  469,  188,  861,
      189,  190,  392,  189,  190,  392,  189,  190,  861,  861,
      474,  392,  392,  187,  861,  392,  861,  475,  861,  479,
      188,  108,  476,  392,  861,  477,  478,  187,  189,  190,
      186,  861,  482,  861,  188,  861,  109,  110,  861,  861,

      186,  861,  189,  190,  187,  483,  186,  861,  480,  861,
      861,  188,  861,  392,  392,  392,  481,  540,  392,  189,
      190,  861,  861,  474,  392,  392,  187,  861,  392,  861,
      475,  861,  861,  188,  861,  476,  392,  187,  477,  478,
      861,  189,  190,  187,  188,  861,  186,  861,  486,  861,
      188,  861,  189,  190,  861,  362,  186,  487,  189,  190,
      484,  186,  488,  187,  489,  861,  392,  392,  861,  861,
      188,  861,  491,  485,  187,  861,  187,  861,  189,  190,
      187,  188,  861,  188,  490,  861,  187,  188,  861,  189,
      190,  189,  190,  188,  861,  189,  190,  861,  187,  861,

      494,  189,  190,  492,  495,  188,  861,  861,  187,  861,
      187,  861,  861,  189,  190,  188,  493,  188,  861,  861,
      861,  861,  187,  189,  190,  189,  190,  496,  497,  188,
      861,  861,  187,  861,  187,  861,  498,  189,  190,  188,
      532,  188,  191,  532,  499,  187,  191,  189,  190,  189,
      190,  187,  188,  500,  861,  501,  187,  861,  188,  861,
      189,  190,  187,  188,  861,  861,  189,  190,  187,  188,
      861,  189,  190,  187,  861,  188,  861,  189,  190,  505,
      188,  502,  503,  189,  190,  187,  861,  861,  189,  190,
      187,  504,  188,  861,  507,  187,  861,  188,  861,  861,

      189,  190,  188,  506,  861,  189,  190,  187,  861,  508,
      189,  190,  187,  861,  188,  861,  861,  187,  861,  188,
      861,  861,  189,  190,  188,  861,  510,  189,  190,  861,
      187,  861,  189,  190,  861,  187,  509,  188,  861,  861,
      187,  512,  188,  861,  861,  189,  190,  188,  511,  861,
      189,  190,  187,  861,  514,  189,  190,  515,  187,  188,
      108,  861,  187,  861,  861,  188,  513,  189,  190,  188,
      861,  516,  861,  189,  190,  109,  110,  189,  190,  187,
      861,  108,  861,  861,  108,  861,  188,  517,  519,  861,
      108,  518,  108,  861,  189,  190,  109,  110,  861,  109,

      110,  861,  861,  861,  861,  109,  110,  109,  110,  861,
      861,  861,  861,  861,  520,  392,  541,  543,  392,  542,
      861,  861,  861,  524,  392,  392,  544,  108,  392,  108,
      861,  861,  108,  861,  108,  525,  392,  108,  526,  527,
      861,  861,  109,  110,  109,  110,  546,  109,  110,  109,
      110,  861,  109,  110,  108,  549,  861,  547,  108,  861,
      861,  545,  550,  548,  861,  861,  392,  392,  392,  109,
      110,  392,  861,  109,  110,  861,  524,  392,  392,  551,
      108,  392,  108,  861,  108,  861,  108,  861,  525,  392,
      861,  526,  527,  108,  552,  109,  110,  109,  110,  109,

      110,  109,  110,  861,  861,  554,  861,  108,  109,  110,
      108,  861,  555,  861,  861,  861,  861,  553,  861,  392,
      392,  532,  109,  110,  532,  109,  110,  556,  861,  534,
      532,  532,  861,  108,  532,  108,  861,  558,  108,  861,
      861,  108,  532,  108,  535,  536,  861,  557,  109,  110,
      109,  110,  560,  109,  110,  108,  109,  110,  109,  110,
      861,  861,  562,  108,  861,  861,  861,  861,  861,  559,
      109,  110,  532,  532,  392,  561,  861,  392,  109,  110,
      563,  861,  539,  396,  396,  108,  861,  396,  108,  861,
      564,  565,  108,  861,  108,  396,  108,  392,  392,  108,

      109,  110,  108,  109,  110,  861,  861,  109,  110,  109,
      110,  109,  110,  108,  109,  110,  566,  109,  110,  108,
      861,  567,  108,  861,  861,  396,  396,  568,  109,  110,
      570,  108,  861,  569,  109,  110,  108,  109,  110,  108,
      571,  108,  861,  108,  861,  861,  109,  110,  108,  861,
      861,  109,  110,  108,  109,  110,  109,  110,  109,  110,
      574,  108,  861,  109,  110,  572,  573,  861,  109,  110,
      108,  861,  108,  861,  861,  861,  109,  110,  576,  108,
      861,  108,  577,  108,  575,  109,  110,  109,  110,  108,
      578,  861,  108,  861,  109,  110,  109,  110,  109,  110,

      580,  861,  861,  108,  109,  110,  582,  109,  110,  108,
      579,  108,  581,  861,  861,  861,  108,  583,  109,  110,
      108,  861,  861,  861,  109,  110,  109,  110,  584,  108,
      585,  109,  110,  108,  861,  109,  110,  108,  318,  861,
      861,  108,  861,  861,  109,  110,  108,  861,  109,  110,
      108,  861,  109,  110,  108,  586,  109,  110,  589,  861,
      861,  109,  110,  108,  587,  109,  110,  108,  861,  109,
      110,  108,  861,  588,  108,  591,  108,  861,  109,  110,
      590,  861,  109,  110,  108,  861,  109,  110,  861,  109,
      110,  109,  110,  861,  861,  108,  861,  595,  108,  109,

      110,  861,  593,  108,  592,  596,  861,  861,  861,  594,
      109,  110,  861,  109,  110,  187,  861,  597,  109,  110,
      392,  861,  188,  392,  861,  598,  191,  861,  473,  187,
      189,  190,  861,  187,  609,  392,  188,  471,  392,  861,
      188,  471,  600,  532,  189,  190,  532,  187,  189,  190,
      861,  602,  532,  532,  188,  861,  532,  861,  603,  108,
      861,  108,  189,  190,  532,  187,  604,  605,  610,  861,
      861,  187,  188,  861,  109,  110,  109,  110,  188,  861,
      189,  190,  187,  861,  611,  187,  189,  190,  861,  188,
      612,  861,  188,  861,  532,  532,  392,  189,  190,  392,

      189,  190,  861,  861,  608,  477,  477,  613,  187,  477,
      861,  187,  861,  614,  362,  188,  861,  477,  188,  392,
      392,  615,  861,  189,  190,  187,  189,  190,  532,  187,
      244,  532,  188,  861,  244,  362,  188,  362,  861,  187,
      189,  190,  187,  861,  189,  190,  188,  477,  477,  188,
      861,  108,  861,  187,  189,  190,  617,  189,  190,  616,
      188,  108,  861,  187,  861,  187,  109,  110,  189,  190,
      188,  661,  188,  108,  618,  187,  109,  110,  189,  190,
      189,  190,  188,  108,  619,  187,  861,  187,  109,  110,
      189,  190,  188,  108,  188,  861,  620,  187,  109,  110,

      189,  190,  189,  190,  188,  861,  861,  621,  109,  110,
      187,  663,  189,  190,  624,  187,  861,  188,  861,  861,
      187,  622,  188,  662,  623,  189,  190,  188,  861,  861,
      189,  190,  187,  861,  187,  189,  190,  187,  625,  188,
      392,  188,  521,  392,  188,  861,  521,  189,  190,  189,
      190,  627,  189,  190,  187,  626,  187,  628,  187,  861,
      861,  188,  861,  188,  861,  188,  108,  861,  861,  189,
      190,  189,  190,  189,  190,  629,  187,  861,  187,  861,
      187,  109,  110,  188,  861,  188,  861,  188,  861,  630,
      861,  189,  190,  189,  190,  189,  190,  187,  861,  632,

      187,  633,  187,  861,  188,  631,  861,  188,  861,  188,
      861,  861,  189,  190,  187,  189,  190,  189,  190,  861,
      392,  188,  861,  392,  187,  861,  244,  636,  523,  189,
      190,  188,  861,  634,  861,  635,  861,  861,  187,  189,
      190,  187,  643,  861,  187,  188,  861,  640,  188,  108,
      637,  188,  638,  189,  190,  187,  189,  190,  108,  189,
      190,  108,  188,  861,  109,  110,  665,  641,  861,  639,
      189,  190,  532,  109,  110,  532,  109,  110,  861,  660,
      645,  532,  532,  392,  532,  532,  392,  532,  861,  111,
      111,  393,  533,  532,  861,  646,  647,  396,  396,  108,

      861,  396,  108,  861,  392,  531,  652,  392,  861,  396,
      390,  861,  538,  861,  109,  110,  861,  109,  110,  861,
      658,  108,  861,  532,  532,  392,  657,  108,  392,  108,
      659,  861,  664,  650,  526,  526,  109,  110,  526,  396,
      396,  861,  109,  110,  109,  110,  526,  108,  392,  392,
      861,  861,  108,  861,  108,  861,  108,  666,  532,  667,
      390,  532,  109,  110,  390,  861,  668,  109,  110,  109,
      110,  109,  110,  669,  108,  861,  526,  526,  532,  670,
      108,  532,  108,  861,  861,  861,  534,  532,  532,  109,
      110,  532,  674,  108,  671,  109,  110,  109,  110,  532,

      672,  535,  536,  673,  108,  861,  861,  108,  109,  110,
      108,  861,  108,  861,  861,  861,  861,  108,  675,  109,
      110,  108,  109,  110,  676,  109,  110,  109,  110,  532,
      532,  532,  109,  110,  532,  108,  109,  110,  861,  655,
      535,  535,  677,  108,  535,  861,  682,  108,  861,  108,
      109,  110,  535,  108,  532,  532,  679,  678,  109,  110,
      680,  108,  109,  110,  109,  110,  861,  861,  109,  110,
      861,  681,  683,  108,  861,  108,  109,  110,  861,  861,
      108,  861,  535,  535,  684,  685,  861,  108,  109,  110,
      109,  110,  108,  861,  687,  109,  110,  861,  861,  108,

      861,  686,  109,  110,  861,  861,  108,  109,  110,  108,
      861,  108,  861,  689,  109,  110,  108,  688,  861,  861,
      690,  109,  110,  108,  109,  110,  109,  110,  108,  861,
      861,  109,  110,  108,  691,  693,  861,  861,  109,  110,
      108,  861,  861,  109,  110,  692,  108,  861,  109,  110,
      108,  861,  694,  861,  861,  109,  110,  108,  695,  861,
      108,  109,  110,  108,  861,  109,  110,  108,  861,  697,
      108,  861,  109,  110,  696,  109,  110,  108,  109,  110,
      861,  108,  109,  110,  861,  109,  110,  861,  532,  861,
      471,  532,  109,  110,  471,  698,  109,  110,  861,  392,

      861,  699,  392,  532,  108,  191,  532,  473,  861,  191,
      861,  601,  477,  477,  108,  861,  477,  861,  861,  109,
      110,  600,  700,  532,  477,  702,  532,  861,  861,  109,
      110,  602,  532,  532,  392,  861,  532,  392,  603,  861,
      471,  861,  607,  187,  532,  187,  604,  605,  742,  861,
      188,  861,  188,  861,  477,  477,  707,  187,  189,  190,
      189,  190,  187,  861,  188,  861,  861,  108,  708,  188,
      861,  861,  189,  190,  532,  532,  532,  189,  190,  532,
      187,  861,  109,  110,  705,  604,  604,  188,  861,  604,
      861,  187,  861,  709,  187,  189,  190,  604,  188,  532,

      532,  188,  743,  710,  187,  861,  189,  190,  861,  189,
      190,  188,  861,  861,  187,  861,  187,  861,  362,  189,
      190,  188,  861,  188,  712,  711,  187,  604,  604,  189,
      190,  189,  190,  188,  861,  861,  187,  861,  187,  861,
      187,  189,  190,  188,  861,  188,  714,  188,  861,  861,
      713,  189,  190,  189,  190,  189,  190,  187,  861,  187,
      715,  861,  861,  187,  188,  718,  188,  716,  861,  717,
      188,  861,  189,  190,  189,  190,  187,  719,  189,  190,
      861,  187,  861,  188,  861,  861,  187,  861,  188,  861,
      861,  189,  190,  188,  861,  720,  189,  190,  187,  861,

      187,  189,  190,  722,  721,  188,  108,  188,  861,  861,
      187,  861,  187,  189,  190,  189,  190,  188,  861,  188,
      861,  109,  110,  187,  861,  189,  190,  189,  190,  187,
      188,  724,  726,  187,  723,  861,  188,  744,  189,  190,
      188,  725,  727,  187,  189,  190,  187,  861,  189,  190,
      188,  861,  861,  188,  861,  861,  187,  861,  189,  190,
      728,  189,  190,  188,  108,  861,  861,  729,  187,  861,
      187,  189,  190,  730,  187,  188,  861,  188,  861,  109,
      110,  188,  861,  189,  190,  189,  190,  526,  526,  189,
      190,  526,  392,  861,  732,  392,  861,  861,  244,  526,

      523,  108,  731,  861,  532,  392,  861,  532,  392,  861,
      244,  521,  644,  649,  643,  532,  109,  110,  532,  861,
      861,  269,  861,  645,  532,  532,  734,  739,  532,  526,
      526,  535,  535,  861,  532,  535,  532,  532,  646,  647,
      111,  532,  533,  535,  532,  108,  861,  390,  861,  654,
      861,  861,  861,  861,  108,  861,  652,  861,  861,  861,
      109,  110,  861,  741,  751,  861,  532,  532,  532,  109,
      110,  532,  861,  535,  535,  745,  737,  646,  646,  392,
      108,  646,  392,  108,  861,  390,  861,  538,  861,  646,
      108,  532,  532,  861,  108,  109,  110,  108,  109,  110,

      861,  657,  861,  861,  746,  109,  110,  108,  747,  109,
      110,  108,  109,  110,  108,  748,  861,  861,  750,  646,
      646,  108,  109,  110,  108,  861,  109,  110,  861,  109,
      110,  749,  753,  108,  861,  108,  109,  110,  861,  109,
      110,  108,  861,  752,  754,  861,  108,  861,  109,  110,
      109,  110,  108,  861,  756,  108,  109,  110,  108,  861,
      755,  109,  110,  108,  861,  861,  861,  109,  110,  108,
      109,  110,  108,  109,  110,  861,  108,  861,  109,  110,
      758,  757,  861,  861,  109,  110,  108,  109,  110,  108,
      861,  109,  110,  108,  861,  108,  760,  761,  108,  759,

      108,  109,  110,  108,  109,  110,  763,  861,  109,  110,
      109,  110,  108,  109,  110,  109,  110,  108,  109,  110,
      108,  764,  762,  108,  861,  108,  861,  109,  110,  108,
      861,  861,  109,  110,  108,  109,  110,  861,  109,  110,
      109,  110,  108,  861,  109,  110,  767,  861,  532,  109,
      110,  532,  861,  765,  191,  861,  601,  109,  110,  604,
      604,  766,  108,  604,  861,  861,  532,  861,  187,  532,
      702,  604,  471,  392,  704,  188,  392,  109,  110,  471,
      861,  607,  187,  189,  190,  770,  861,  861,  769,  188,
      861,  861,  796,  187,  861,  707,  187,  189,  190,  771,

      188,  604,  604,  188,  861,  861,  187,  861,  189,  190,
      187,  189,  190,  188,  861,  861,  861,  188,  861,  861,
      187,  189,  190,  861,  861,  189,  190,  188,  861,  861,
      772,  774,  187,  773,  187,  189,  190,  187,  861,  188,
      532,  188,  521,  532,  188,  861,  521,  189,  190,  189,
      190,  187,  189,  190,  861,  187,  861,  532,  188,  861,
      532,  775,  188,  244,  861,  644,  189,  190,  187,  861,
      189,  190,  861,  776,  861,  188,  861,  861,  187,  734,
      778,  187,  861,  189,  190,  188,  861,  777,  188,  779,
      861,  187,  861,  189,  190,  187,  189,  190,  188,  780,

      861,  861,  188,  861,  861,  187,  189,  190,  187,  861,
      189,  190,  188,  861,  861,  188,  108,  781,  187,  861,
      189,  190,  782,  189,  190,  188,  861,  861,  187,  784,
      187,  109,  110,  189,  190,  188,  861,  188,  861,  783,
      861,  861,  187,  189,  190,  189,  190,  861,  187,  188,
      795,  861,  187,  787,  785,  188,  786,  189,  190,  188,
      861,  646,  646,  189,  190,  646,  532,  189,  190,  532,
      861,  861,  521,  646,  736,  108,  861,  788,  861,  392,
      108,  861,  392,  790,  789,  521,  532,  649,  792,  532,
      109,  110,  390,  861,  654,  109,  110,  108,  861,  108,

      793,  739,  108,  646,  646,  108,  861,  861,  741,  108,
      861,  108,  109,  110,  109,  110,  658,  109,  110,  794,
      109,  110,  108,  798,  109,  110,  109,  110,  108,  861,
      797,  108,  800,  861,  861,  108,  861,  109,  110,  108,
      861,  108,  861,  109,  110,  799,  109,  110,  108,  801,
      109,  110,  802,  861,  109,  110,  109,  110,  108,  861,
      108,  861,  108,  109,  110,  108,  861,  861,  861,  804,
      108,  861,  108,  109,  110,  109,  110,  109,  110,  805,
      109,  110,  108,  803,  108,  109,  110,  109,  110,  861,
      861,  861,  861,  806,  861,  861,  187,  109,  110,  109,

      110,  108,  532,  188,  861,  532,  187,  861,  471,  807,
      704,  189,  190,  188,  861,  861,  109,  110,  187,  861,
      187,  189,  190,  861,  769,  188,  861,  188,  861,  861,
      187,  826,  808,  189,  190,  189,  190,  188,  861,  811,
      187,  861,  809,  187,  861,  189,  190,  188,  861,  861,
      188,  861,  810,  861,  187,  189,  190,  861,  189,  190,
      812,  188,  861,  861,  813,  861,  187,  861,  187,  189,
      190,  187,  861,  188,  861,  188,  861,  861,  188,  861,
      861,  189,  190,  189,  190,  187,  189,  190,  816,  861,
      187,  861,  188,  861,  861,  814,  815,  188,  861,  861,

      189,  190,  817,  187,  861,  189,  190,  187,  861,  187,
      188,  861,  861,  187,  188,  861,  188,  861,  189,  190,
      188,  861,  189,  190,  189,  190,  187,  861,  189,  190,
      861,  187,  861,  188,  820,  818,  187,  819,  188,  861,
      861,  189,  190,  188,  108,  861,  189,  190,  187,  861,
      532,  189,  190,  532,  108,  188,  521,  861,  736,  109,
      110,  108,  861,  189,  190,  825,  822,  821,  108,  109,
      110,  823,  792,  108,  861,  108,  109,  110,  108,  824,
      108,  861,  861,  109,  110,  861,  108,  861,  109,  110,
      109,  110,  108,  109,  110,  109,  110,  827,  828,  108,

      829,  109,  110,  108,  861,  108,  861,  109,  110,  108,
      861,  861,  861,  830,  109,  110,  187,  861,  109,  110,
      109,  110,  861,  188,  109,  110,  861,  187,  861,  861,
      861,  189,  190,  187,  188,  861,  861,  861,  831,  187,
      188,  833,  189,  190,  187,  832,  188,  861,  189,  190,
      835,  188,  834,  861,  189,  190,  187,  861,  187,  189,
      190,  861,  187,  188,  861,  188,  861,  641,  358,  188,
      861,  189,  190,  189,  190,  836,  187,  189,  190,  861,
      187,  861,  187,  188,  861,  641,  837,  188,  861,  188,
      861,  189,  190,  187,  861,  189,  190,  189,  190,  861,

      188,  108,  861,  187,  861,  861,  838,  187,  189,  190,
      188,  108,  839,  187,  188,  861,  109,  110,  189,  190,
      188,  861,  189,  190,  187,  861,  109,  110,  189,  190,
      187,  188,  108,  840,  841,  108,  658,  188,  108,  189,
      190,  861,  861,  108,  861,  189,  190,  109,  110,  108,
      109,  110,  861,  109,  110,  861,  108,  842,  109,  110,
      861,  187,  861,  861,  109,  110,  861,  564,  188,  861,
      843,  109,  110,  187,  861,  187,  189,  190,  187,  861,
      188,  844,  188,  861,  861,  188,  861,  861,  189,  190,
      189,  190,  861,  189,  190,  861,  861,  187,  861,  845,

      187,  861,  187,  861,  188,  861,  848,  188,  861,  188,
      861,  846,  189,  190,  847,  189,  190,  189,  190,  187,
      861,  187,  861,  851,  187,  850,  188,  861,  188,  108,
      861,  188,  108,  849,  189,  190,  189,  190,  861,  189,
      190,  861,  641,  108,  109,  110,  187,  109,  110,  861,
      187,  861,  861,  188,  861,  861,  852,  188,  109,  110,
      861,  189,  190,  853,  684,  189,  190,  854,  187,  861,
      187,  855,  187,  858,  861,  188,  861,  188,  861,  188,
      861,  861,  187,  189,  190,  189,  190,  189,  190,  188,
      861,  861,  187,  856,  861,  187,  861,  189,  190,  188,

      861,  857,  188,  861,  484,  187,  861,  189,  190,  187,
      189,  190,  188,  108,  861,  187,  188,  861,  861,  187,
      189,  190,  188,  861,  189,  190,  188,  861,  109,  110,
      189,  190,  187,  861,  189,  190,  187,  861,  861,  188,
      861,  861,  861,  188,  861,  861,  859,  189,  190,  861,
      861,  189,  190,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  860,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  107,

      107,  861,  861,  107,  111,  111,  111,  111,  111,  111,
      186,  186,  861,  861,  186,  191,  191,  191,  191,  191,
      191,  240,  240,  861,  861,  240,  244,  244,  244,  244,
      244,  244,  253,  861,  861,  861,  253,  253,  253,  253,
      253,  255,  255,  861,  255,  255,  255,  255,  255,  255,
      256,  861,  256,  256,  861,  861,  256,  256,  258,  258,
      258,  258,  340,  340,  340,  340,  384,  384,  384,  384,
      390,  390,  390,  390,  390,  390,  393,  861,  861,  861,
      393,  393,  393,  393,  393,  471,  471,  471,  471,  471,
      471,  473,  861,  861,  861,  473,  473,  473,  473,  473,

      521,  521,  521,  521,  521,  521,  523,  861,  861,  861,
      523,  523,  523,  523,  523,  392,  861,  861,  861,  392,
      392,  392,  392,  392,  530,  861,  861,  530,  530,  530,
      530,  530,  530,  533,  861,  861,  861,  533,  533,  533,
      533,  533,  538,  861,  861,  861,  538,  538,  538,  538,
      538,  599,  861,  861,  599,  599,  599,  599,  599,  599,
      601,  861,  861,  861,  601,  601,  601,  601,  601,  607,
      861,  861,  861,  607,  607,  607,  607,  607,  642,  861,
      861,  642,  642,  642,  642,  642,  642,  644,  861,  861,
      861,  644,  644,  644,  644,  644,  649,  861,  861,  861,

      649,  649,  649,  649,  649,  532,  861,  861,  861,  532,
      532,  532,  532,  532,  651,  861,  861,  651,  651,  651,
      651,  651,  651,  654,  861,  861,  861,  654,  654,  654,
      654,  654,  656,  861,  861,  656,  656,  656,  656,  656,
      656,  701,  861,  861,  701,  701,  701,  701,  701,  701,
      704,  861,  861,  861,  704,  704,  704,  704,  704,  706,
      861,  861,  706,  706,  706,  706,  706,  706,  733,  861,
      861,  733,  733,  733,  733,  733,  733,  736,  861,  861,
      861,  736,  736,  736,  736,  736,  738,  861,  861,  738,
      738,  738,  738,  738,  738,  740,  861,  861,  740,  740,

      740,  740,  740,  740,  768,  861,  861,  768,  768,  768,
      768,  768,  768,  791,  861,  861,  791,  791,  791,  791,
      791,  791,   13,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861
    } ;

static yyconst short int yy_chk[5279] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,   93,    5,    5,
        5,    5,   93,    5,    5,    5,  396,    5,    5,  649,
      396,    5,  254,    5,    5,    7,    7,  254,    7,    7,
        7,    8,    8,    5,    8,    8,    8,    9,  646,    9,
        9,   10,   15,   10,   10,  607,   15,   15,  103,  103,
      604,    5,    5,    6,    6,    6,    6,    6,    6,    6,
      538,    6,    6,    6,    6,   18,    6,    6,    6,   19,
        6,    6,   21,  535,    6,   21,    6,    6,   23,  529,
       18,   18,   24,   19,   23,   25,    6,   21,   21,  528,

      103,  103,  523,   23,   23,   28,   28,   24,   24,   28,
       25,   25,  522,   27,    6,    6,   11,   28,   11,   11,
       11,   11,  475,   52,   11,   11,   11,   26,   27,   27,
       30,  473,  472,  393,   29,   26,   26,   52,   11,   80,
       37,  391,   26,   26,   35,   30,   30,   28,   28,   29,
       29,  389,   29,   80,   29,   37,   37,  388,  245,   35,
       35,   30,   29,   35,   30,   37,  192,   11,   11,   31,
       11,   12,   79,   12,   12,   12,   12,  108,   35,   12,
       12,   12,  111,  112,   31,   31,   33,   79,   79,   31,
       32,  108,   82,   12,   36,   82,  111,   31,   31,   38,

       31,   33,   33,   31,  187,   32,   32,   82,   82,   36,
       36,   32,   13,   34,   38,   38,   38,   33,  187,   33,
       33,   32,   12,   12,   36,   12,   33,   32,   34,   34,
       38,  191,    0,    0,   38,   39,   60,   60,    0,    0,
       60,   34,   34,   43,   34,  191,   40,   34,   60,   34,
       39,   39,   39,   39,   42,    0,   39,   47,   43,   43,
       39,   40,   40,   40,  477,    0,   39,    0,  477,   42,
       42,   42,   47,   47,   51,    0,    0,   40,   60,   60,
       43,   51,   87,   40,   41,   42,    0,   47,   42,   51,
       51,   42,  526,   42,   44,    0,  526,   87,   87,   41,

       41,    0,   41,  241,   45,    0,   41,  244,   46,   44,
       44,   44,  259,   41,   41,   44,   41,  241,   41,   45,
       45,  244,   44,   46,   46,   45,  259,    0,   45,   48,
        0,   44,   46,   46,  106,   45,   49,    0,  106,  106,
       45,   45,   46,   50,   48,   48,   48,    0,   55,    0,
       48,   49,   49,    0,   48,   55,  341,  385,   50,   50,
       49,   49,   54,   55,   55,   54,    0,   56,    0,   54,
      341,  385,   50,   56,   56,  390,  471,   54,   54,   56,
       50,   57,   56,   56,    0,    0,   58,    0,   57,  390,
      471,   57,   59,   58,    0,  521,   57,   57,   58,   59,

       84,   58,   58,   61,    0,   63,   84,   59,   59,  521,
       61,    0,   63,    0,    0,   84,   84,   64,   61,   61,
       63,   63,    0,    0,   64,    0,    0,   65,    0,   78,
       63,    0,   64,   64,   65,    0,   78,   88,   61,   62,
        0,   78,   65,   65,   78,   78,   62,   64,    0,   66,
       64,    0,   88,   88,   62,   62,   66,   64,   65,    0,
       62,   65,   68,    0,   66,   66,   66,   62,   62,   68,
       62,    0,   62,   62,   75,   62,   67,   68,   68,    0,
       68,   75,    0,   67,   90,    0,   69,    0,    0,   75,
       75,   67,   67,   69,  107,   75,   67,    0,   67,   90,

       90,   69,   69,   69,  109,   75,   67,   69,   70,  107,
      107,   67,   67,    0,   90,   70,    0,    0,   71,  109,
      109,    0,    0,   70,   70,   71,   70,    0,    0,   70,
       72,    0,   73,   71,   71,    0,   71,   72,  113,   73,
        0,  113,    0,   70,    0,   72,   72,   73,   73,    0,
       71,   74,    0,  113,  113,   76,    0,   73,   74,    0,
       73,   72,   76,  118,   72,   86,   74,   74,    0,   77,
       76,   76,    0,   86,   86,    0,   77,    0,  118,  118,
       86,   86,   74,   74,   77,   77,   77,   74,   74,    0,
       76,   85,   85,   85,   85,   85,   85,    0,   85,   89,

       89,  118,    0,   89,  110,  110,  110,    0,  117,  110,
      114,   89,  115,   85,   85,    0,  114,  110,  116,  116,
      115,  115,  116,  117,  117,  114,  114,  115,  115,  119,
      116,    0,    0,    0,    0,  120,    0,  121,    0,  117,
        0,   89,   89,    0,  119,  119,    0,  110,  110,  122,
      120,  120,  121,  121,  119,  120,  123,  119,  121,  124,
      116,  116,    0,    0,  122,  122,  125,    0,  126,    0,
      127,  123,  123,    0,  124,  124,  128,  123,    0,  124,
        0,  125,  125,  126,  126,  127,  127,    0,  127,  126,
        0,  128,  128,  129,  125,  125,  125,  130,  531,  131,

      531,  531,  132,  125,  531,  127,    0,    0,  129,  129,
      133,    0,  130,  130,  131,  131,  134,  132,  132,  130,
      135,    0,  129,  132,  136,  133,  133,  137,    0,  133,
        0,  134,  134,  134,  131,  135,  135,  138,    0,  136,
      136,  139,  137,  137,  142,    0,  133,  140,  137,    0,
      141,  135,  138,  138,    0,  143,  139,  139,  136,  142,
      142,  138,  140,  140,  140,  141,  141,  144,    0,  141,
      143,  143,  145,  143,  142,  146,    0,  147,    0,  148,
        0,  149,  144,  144,  144,  150,    0,  145,  145,    0,
      146,  146,  147,  147,  148,  148,  149,  149,  144,  151,

      150,  150,  152,    0,  154,  150,    0,  155,  148,  153,
        0,  146,  147,    0,  151,  151,  156,  152,  152,  154,
      154,  149,  155,  155,  153,  153,  157,    0,  158,  155,
      154,  156,  156,  151,  159,    0,  152,  160,  153,    0,
        0,  157,  157,  158,  158,  161,    0,  156,    0,  159,
      159,  162,  160,  160,  163,  159,    0,    0,    0,  164,
      161,  161,    0,  158,    0,  165,  162,  162,  166,  163,
      163,  160,  167,  160,  164,  164,  162,  161,  168,  164,
      165,  165,  162,  166,  166,    0,  169,  167,  167,  163,
      165,    0,  167,  168,  168,    0,    0,    0,    0,    0,

      170,  169,  169,  171,  166,  172,    0,  167,  173,    0,
      167,  167,    0,  168,  169,  170,  170,  170,  171,  171,
      172,  172,  174,  173,  173,  173,  175,    0,  170,  173,
      176,    0,  177,    0,  171,    0,  170,  174,  174,  172,
      174,  175,  175,    0,    0,  176,  176,  177,  177,  177,
      178,  174,  179,    0,  180,    0,  181,    0,  182,  176,
        0,    0,    0,    0,    0,  178,  178,  179,  179,  180,
      180,  181,  181,  182,  182,  178,  183,  181,  184,  182,
        0,  185,    0,  186,    0,    0,  179,    0,  180,  182,
      186,  183,  183,  184,  184,  184,  185,  185,  186,  186,

      188,    0,  189,    0,    0,    0,    0,  188,    0,  189,
        0,  185,  183,    0,    0,  188,  188,  189,  189,  190,
      190,  190,  193,    0,  190,  193,    0,  194,    0,  193,
        0,    0,  190,  194,  194,    0,    0,  193,  193,  195,
        0,  196,  194,  194,  197,    0,  195,    0,  196,  198,
      198,  197,    0,  198,  195,  195,  196,  196,  199,  197,
      197,  198,  190,  190,  200,  199,  240,    0,  201,    0,
        0,  200,    0,  199,  199,  201,    0,    0,    0,  200,
      200,  240,  240,  201,  201,  201,    0,  202,    0,    0,
        0,  198,  198,  199,  202,    0,    0,  200,    0,  203,

        0,  204,  202,  202,  205,  202,  203,  600,  204,  600,
      600,  205,    0,  600,  203,  203,  204,  204,  206,  205,
      205,    0,    0,  207,    0,  206,    0,    0,  203,  203,
      207,    0,  205,  206,  206,  208,    0,  209,  207,  207,
        0,  210,  208,    0,  209,    0,    0,  211,  210,  206,
      208,  208,  209,  209,  211,  208,  210,  210,  212,  207,
      213,    0,  211,  211,    0,  212,    0,  213,    0,    0,
        0,    0,  214,  212,  212,  213,  213,  210,  214,  214,
        0,  211,  214,  215,    0,  216,    0,  214,  214,  212,
      215,    0,  216,  214,    0,  217,  213,    0,  215,  215,

      216,  216,  217,  242,  216,  218,    0,  219,    0,  220,
      217,  217,  218,    0,  219,  252,  220,    0,  242,  242,
      218,  218,  219,  219,  220,  220,  218,  220,  221,    0,
      252,  252,  222,    0,  643,  221,  643,  643,  219,  222,
      643,    0,    0,  221,  221,  220,  224,  222,  222,  223,
      221,  223,    0,  224,    0,    0,  225,    0,  223,  223,
      226,  224,  224,  225,  223,  223,  226,  226,    0,  224,
      227,  225,  225,  228,    0,  226,  226,  227,    0,    0,
      228,    0,  225,    0,  229,  227,  227,    0,  228,  228,
      230,  229,    0,    0,  228,  226,  231,  230,  227,  229,

      229,  232,    0,  231,  228,  230,  230,  229,  232,    0,
        0,  231,  231,  233,    0,    0,  232,  232,  234,    0,
      233,    0,  232,    0,  235,  234,    0,    0,  233,  233,
      231,  235,    0,  234,  234,  236,  234,  237,    0,  235,
      235,  238,  236,  652,  237,  652,  652,  233,  238,  652,
      236,  236,  237,  237,  239,    0,  238,  238,  235,    0,
        0,  239,  237,  243,  243,  243,  247,    0,  243,  239,
      239,  246,  247,    0,  246,  238,  243,  657,    0,  657,
      657,  247,  247,  657,    0,    0,  246,  246,  248,  248,
      248,  248,  248,  248,  250,    0,  251,  251,  248,  258,

      251,  248,  250,  250,  263,    0,  243,  243,  251,  250,
      250,  262,    0,    0,  258,  258,  264,    0,    0,  263,
      263,  265,  394,    0,    0,  394,  262,  262,  394,  263,
      394,  264,  264,  264,    0,    0,  265,  265,  251,  251,
      260,  266,    0,  260,  394,  262,    0,    0,  260,  260,
      260,  267,    0,  260,  268,    0,  266,  266,  269,    0,
      260,  260,  278,  260,  260,  274,  267,  267,  267,  268,
      268,  268,  279,  269,  269,    0,    0,  278,  278,  270,
      274,  274,  266,  271,    0,  274,    0,  279,  279,  272,
        0,  260,  260,  261,  270,  270,  261,    0,  271,  271,

        0,  261,  261,  261,  272,  272,  261,  273,  272,  272,
      270,  275,  271,  261,  261,  271,  261,  261,  276,    0,
      277,    0,  273,  273,    0,  272,  275,  275,    0,    0,
        0,  280,    0,  276,  276,  277,  277,  273,  281,  276,
      282,    0,  283,    0,  261,  261,  280,  280,  275,  284,
        0,    0,  277,  281,  281,  282,  282,  283,  283,  285,
        0,  282,    0,    0,  284,  284,  281,  286,    0,  284,
      280,  287,    0,    0,  285,  285,  288,    0,  283,  289,
        0,  290,  286,  286,    0,  291,  287,  287,  285,    0,
        0,  288,  288,  292,  289,  289,  290,  290,  293,  289,

      291,  291,  290,  287,  288,  291,  286,  294,  292,  292,
        0,  295,    0,  293,  293,  296,    0,  293,  297,    0,
      298,    0,  294,  294,  299,  292,  295,  295,  300,    0,
      296,  296,  301,  297,  297,  298,  298,  296,    0,  299,
      299,  302,  295,  300,  300,    0,  300,  301,  301,  303,
        0,  304,    0,  299,  298,  297,  302,  302,  305,    0,
      306,  302,  307,    0,  303,  303,  304,  304,    0,    0,
      308,    0,  309,  305,  305,  306,  306,  307,  307,  305,
      310,    0,  307,  311,  306,  308,  308,  309,  309,    0,
      304,  312,    0,  305,  309,  310,  310,  313,  311,  311,

      308,  314,    0,  315,  310,  316,  312,  312,  309,  317,
        0,    0,  313,  313,  318,    0,  314,  314,  315,  315,
      316,  316,  313,    0,  317,  317,  316,  312,    0,  318,
      318,  319,    0,  320,    0,  321,    0,    0,  314,  322,
      315,    0,  323,  317,  324,    0,  319,  319,  320,  320,
      321,  321,  319,  325,  322,  322,  321,  323,  323,  324,
      324,  326,    0,  327,    0,    0,    0,  320,  325,  325,
      328,    0,    0,    0,    0,  329,  326,  326,  327,  327,
      324,  323,    0,    0,    0,  328,  328,  330,    0,  325,
      329,  329,  331,  326,  332,    0,  329,  333,  327,  328,

      329,  334,  330,  330,  335,    0,  330,  331,  331,  332,
      332,  336,  333,  333,  331,  333,  334,  334,  337,  335,
      335,  338,    0,    0,    0,    0,  336,  336,  339,  332,
        0,  384,    0,  337,  337,    0,  338,  338,  335,  336,
      334,    0,  337,  339,  339,  340,  384,  384,  344,    0,
        0,  346,  340,  339,    0,  344,    0,  338,  346,    0,
      340,  340,  342,  344,  344,  342,  346,  346,    0,    0,
      342,  342,  342,  345,    0,  342,    0,  342,    0,  344,
      345,  398,  342,  342,    0,  342,  342,  347,  345,  345,
      348,    0,  348,    0,  347,    0,  398,  398,    0,    0,

      348,    0,  347,  347,  349,  348,  348,    0,  345,    0,
        0,  349,    0,  342,  342,  343,  347,  398,  343,  349,
      349,    0,    0,  343,  343,  343,  350,    0,  343,    0,
      343,    0,    0,  350,    0,  343,  343,  351,  343,  343,
        0,  350,  350,  354,  351,    0,  352,    0,  352,    0,
      354,    0,  351,  351,    0,  352,  352,  352,  354,  354,
      350,  352,  352,  353,  352,    0,  343,  343,    0,    0,
      353,    0,  354,  351,  355,    0,  356,    0,  353,  353,
      357,  355,    0,  356,  353,    0,  358,  357,    0,  355,
      355,  356,  356,  358,    0,  357,  357,    0,  359,    0,

      356,  358,  358,  355,  357,  359,    0,    0,  360,    0,
      361,    0,    0,  359,  359,  360,  355,  361,    0,    0,
        0,    0,  362,  360,  360,  361,  361,  359,  359,  362,
        0,    0,  363,    0,  364,    0,  360,  362,  362,  363,
      702,  364,  702,  702,  361,  365,  702,  363,  363,  364,
      364,  366,  365,  363,    0,  364,  367,    0,  366,    0,
      365,  365,  368,  367,    0,    0,  366,  366,  369,  368,
        0,  367,  367,  370,    0,  369,    0,  368,  368,  368,
      370,  365,  366,  369,  369,  371,    0,    0,  370,  370,
      372,  367,  371,    0,  370,  373,    0,  372,    0,    0,

      371,  371,  373,  369,    0,  372,  372,  374,    0,  371,
      373,  373,  375,    0,  374,    0,    0,  376,    0,  375,
        0,    0,  374,  374,  376,    0,  374,  375,  375,    0,
      377,    0,  376,  376,    0,  378,  373,  377,    0,    0,
      379,  376,  378,    0,    0,  377,  377,  379,  375,    0,
      378,  378,  380,    0,  378,  379,  379,  379,  382,  380,
      401,    0,  381,    0,    0,  382,  377,  380,  380,  381,
        0,  380,    0,  382,  382,  401,  401,  381,  381,  383,
        0,  399,    0,    0,  400,    0,  383,  380,  382,    0,
      402,  381,  403,    0,  383,  383,  399,  399,    0,  400,

      400,    0,    0,    0,    0,  402,  402,  403,  403,    0,
        0,    0,    0,    0,  383,  386,  399,  402,  386,  400,
        0,    0,    0,  386,  386,  386,  403,  404,  386,  405,
        0,    0,  406,    0,  407,  386,  386,  408,  386,  386,
        0,    0,  404,  404,  405,  405,  405,  406,  406,  407,
      407,    0,  408,  408,  409,  407,    0,  406,  410,    0,
        0,  404,  408,  406,    0,    0,  386,  386,  387,  409,
      409,  387,    0,  410,  410,    0,  387,  387,  387,  409,
      411,  387,  412,    0,  413,    0,  414,    0,  387,  387,
        0,  387,  387,  415,  410,  411,  411,  412,  412,  413,

      413,  414,  414,    0,    0,  412,    0,  417,  415,  415,
      416,    0,  413,    0,    0,    0,    0,  411,    0,  387,
      387,  395,  417,  417,  395,  416,  416,  415,    0,  395,
      395,  395,    0,  418,  395,  419,    0,  417,  421,    0,
        0,  420,  395,  422,  395,  395,    0,  416,  418,  418,
      419,  419,  419,  421,  421,  423,  420,  420,  422,  422,
        0,    0,  421,  424,    0,    0,    0,    0,    0,  418,
      423,  423,  395,  395,  397,  420,    0,  397,  424,  424,
      422,    0,  397,  397,  397,  425,    0,  397,  426,    0,
      423,  424,  427,    0,  428,  397,  429,  397,  397,  430,

      425,  425,  431,  426,  426,    0,    0,  427,  427,  428,
      428,  429,  429,  432,  430,  430,  427,  431,  431,  433,
        0,  429,  434,    0,    0,  397,  397,  430,  432,  432,
      432,  435,    0,  431,  433,  433,  436,  434,  434,  437,
      433,  438,    0,  439,    0,    0,  435,  435,  440,    0,
        0,  436,  436,  441,  437,  437,  438,  438,  439,  439,
      437,  442,    0,  440,  440,  435,  436,    0,  441,  441,
      443,    0,  444,    0,    0,    0,  442,  442,  441,  445,
        0,  446,  442,  447,  440,  443,  443,  444,  444,  448,
      443,    0,  449,    0,  445,  445,  446,  446,  447,  447,

      446,    0,    0,  450,  448,  448,  448,  449,  449,  451,
      445,  452,  447,    0,    0,    0,  453,  449,  450,  450,
      454,    0,    0,    0,  451,  451,  452,  452,  451,  455,
      452,  453,  453,  456,    0,  454,  454,  457,  450,    0,
        0,  458,    0,    0,  455,  455,  459,    0,  456,  456,
      460,    0,  457,  457,  461,  454,  458,  458,  458,    0,
        0,  459,  459,  462,  455,  460,  460,  463,    0,  461,
      461,  464,    0,  457,  465,  461,  466,    0,  462,  462,
      460,    0,  463,  463,  467,    0,  464,  464,    0,  465,
      465,  466,  466,    0,    0,  468,    0,  466,  469,  467,

      467,    0,  464,  470,  462,  467,    0,    0,    0,  465,
      468,  468,    0,  469,  469,  479,    0,  469,  470,  470,
      474,    0,  479,  474,    0,  470,  474,    0,  474,  484,
      479,  479,    0,  480,  479,  707,  484,  707,  707,    0,
      480,  707,  474,  476,  484,  484,  476,  481,  480,  480,
        0,  476,  476,  476,  481,    0,  476,    0,  476,  540,
        0,  544,  481,  481,  476,  482,  476,  476,  480,    0,
        0,  483,  482,    0,  540,  540,  544,  544,  483,    0,
      482,  482,  485,    0,  481,  486,  483,  483,    0,  485,
      482,    0,  486,    0,  476,  476,  478,  485,  485,  478,

      486,  486,    0,    0,  478,  478,  478,  483,  487,  478,
        0,  488,    0,  485,  486,  487,    0,  478,  488,  478,
      478,  486,    0,  487,  487,  489,  488,  488,  734,  490,
      734,  734,  489,    0,  734,  488,  490,  487,    0,  491,
      489,  489,  492,    0,  490,  490,  491,  478,  478,  492,
        0,  543,    0,  493,  491,  491,  491,  492,  492,  490,
      493,  545,    0,  494,    0,  495,  543,  543,  493,  493,
      494,  543,  495,  552,  493,  496,  545,  545,  494,  494,
      495,  495,  496,  547,  494,  497,    0,  498,  552,  552,
      496,  496,  497,  546,  498,    0,  495,  499,  547,  547,

      497,  497,  498,  498,  499,    0,    0,  496,  546,  546,
      500,  547,  499,  499,  499,  501,    0,  500,    0,    0,
      502,  497,  501,  546,  498,  500,  500,  502,    0,    0,
      501,  501,  503,    0,  504,  502,  502,  505,  500,  503,
      739,  504,  739,  739,  505,    0,  739,  503,  503,  504,
      504,  504,  505,  505,  506,  501,  507,  505,  508,    0,
        0,  506,    0,  507,    0,  508,  554,    0,    0,  506,
      506,  507,  507,  508,  508,  507,  509,    0,  510,    0,
      511,  554,  554,  509,    0,  510,    0,  511,    0,  508,
        0,  509,  509,  510,  510,  511,  511,  512,    0,  510,

      513,  511,  514,    0,  512,  509,    0,  513,    0,  514,
        0,    0,  512,  512,  515,  513,  513,  514,  514,    0,
      524,  515,    0,  524,  516,    0,  524,  514,  524,  515,
      515,  516,    0,  512,    0,  513,    0,    0,  517,  516,
      516,  518,  524,    0,  519,  517,    0,  518,  518,  549,
      515,  519,  516,  517,  517,  520,  518,  518,  542,  519,
      519,  562,  520,    0,  549,  549,  549,  519,    0,  517,
      520,  520,  525,  542,  542,  525,  562,  562,    0,  542,
      525,  525,  525,  530,  534,  525,  530,  534,    0,  530,
      534,  530,  534,  525,    0,  525,  525,  537,  537,  541,

        0,  537,  548,    0,  539,  530,  534,  539,    0,  537,
      539,    0,  539,    0,  541,  541,    0,  548,  548,    0,
      541,  550,    0,  525,  525,  527,  539,  564,  527,  551,
      541,    0,  548,  527,  527,  527,  550,  550,  527,  537,
      537,    0,  564,  564,  551,  551,  527,  553,  527,  527,
        0,    0,  555,    0,  556,    0,  560,  550,  741,  551,
      741,  741,  553,  553,  741,    0,  553,  555,  555,  556,
      556,  560,  560,  555,  557,    0,  527,  527,  533,  556,
      558,  533,  559,    0,    0,    0,  533,  533,  533,  557,
      557,  533,  560,  561,  557,  558,  558,  559,  559,  533,

      558,  533,  533,  559,  563,    0,    0,  565,  561,  561,
      566,    0,  571,    0,    0,    0,    0,  567,  561,  563,
      563,  569,  565,  565,  563,  566,  566,  571,  571,  533,
      533,  536,  567,  567,  536,  568,  569,  569,    0,  536,
      536,  536,  565,  570,  536,    0,  571,  572,    0,  573,
      568,  568,  536,  574,  536,  536,  568,  567,  570,  570,
      569,  575,  572,  572,  573,  573,    0,    0,  574,  574,
        0,  570,  572,  576,    0,  577,  575,  575,    0,    0,
      578,    0,  536,  536,  573,  573,    0,  579,  576,  576,
      577,  577,  580,    0,  577,  578,  578,    0,    0,  581,

        0,  576,  579,  579,    0,    0,  582,  580,  580,  583,
        0,  584,    0,  580,  581,  581,  585,  579,    0,    0,
      581,  582,  582,  586,  583,  583,  584,  584,  587,    0,
        0,  585,  585,  588,  582,  584,    0,    0,  586,  586,
      589,    0,    0,  587,  587,  583,  590,    0,  588,  588,
      591,    0,  585,    0,    0,  589,  589,  592,  588,    0,
      593,  590,  590,  594,    0,  591,  591,  595,    0,  590,
      596,    0,  592,  592,  589,  593,  593,  597,  594,  594,
        0,  598,  595,  595,    0,  596,  596,    0,  769,    0,
      769,  769,  597,  597,  769,  593,  598,  598,    0,  599,

        0,  597,  599,  602,  658,  599,  602,  599,    0,  602,
        0,  602,  606,  606,  659,    0,  606,    0,    0,  658,
      658,  599,  598,  601,  606,  602,  601,    0,    0,  659,
      659,  601,  601,  601,  608,    0,  601,  608,  601,    0,
      608,    0,  608,  609,  601,  610,  601,  601,  659,    0,
      609,    0,  610,    0,  606,  606,  608,  611,  609,  609,
      610,  610,  614,    0,  611,    0,    0,  660,  609,  614,
        0,    0,  611,  611,  601,  601,  605,  614,  614,  605,
      612,    0,  660,  660,  605,  605,  605,  612,    0,  605,
        0,  613,    0,  611,  615,  612,  612,  605,  613,  605,

      605,  615,  660,  612,  616,    0,  613,  613,    0,  615,
      615,  616,    0,    0,  617,    0,  618,    0,  615,  616,
      616,  617,    0,  618,  616,  613,  619,  605,  605,  617,
      617,  618,  618,  619,    0,    0,  620,    0,  621,    0,
      622,  619,  619,  620,    0,  621,  618,  622,    0,    0,
      617,  620,  620,  621,  621,  622,  622,  623,    0,  624,
      619,    0,    0,  625,  623,  622,  624,  620,    0,  621,
      625,    0,  623,  623,  624,  624,  626,  623,  625,  625,
        0,  627,    0,  626,    0,    0,  628,    0,  627,    0,
        0,  626,  626,  628,    0,  624,  627,  627,  629,    0,

      630,  628,  628,  628,  627,  629,  661,  630,    0,    0,
      631,    0,  632,  629,  629,  630,  630,  631,    0,  632,
        0,  661,  661,  633,    0,  631,  631,  632,  632,  634,
      633,  630,  632,  635,  629,    0,  634,  661,  633,  633,
      635,  631,  633,  636,  634,  634,  637,    0,  635,  635,
      636,    0,    0,  637,    0,    0,  638,    0,  636,  636,
      636,  637,  637,  638,  672,    0,    0,  637,  639,    0,
      640,  638,  638,  638,  641,  639,    0,  640,    0,  672,
      672,  641,    0,  639,  639,  640,  640,  648,  648,  641,
      641,  648,  642,    0,  640,  642,    0,    0,  642,  648,

      642,  662,  639,    0,  645,  650,    0,  645,  650,    0,
      645,  650,  645,  650,  642,  644,  662,  662,  644,    0,
        0,  662,    0,  644,  644,  644,  645,  650,  644,  648,
      648,  653,  653,    0,  651,  653,  644,  651,  644,  644,
      651,  655,  651,  653,  655,  669,    0,  655,    0,  655,
        0,    0,    0,    0,  663,    0,  651,    0,    0,    0,
      669,  669,    0,  655,  669,    0,  644,  644,  647,  663,
      663,  647,    0,  653,  653,  663,  647,  647,  647,  656,
      665,  647,  656,  664,    0,  656,    0,  656,    0,  647,
      666,  647,  647,    0,  667,  665,  665,  668,  664,  664,

        0,  656,    0,    0,  664,  666,  666,  670,  665,  667,
      667,  671,  668,  668,  673,  666,    0,    0,  668,  647,
      647,  674,  670,  670,  675,    0,  671,  671,    0,  673,
      673,  667,  671,  676,    0,  677,  674,  674,    0,  675,
      675,  678,    0,  670,  673,    0,  679,    0,  676,  676,
      677,  677,  680,    0,  676,  681,  678,  678,  682,    0,
      675,  679,  679,  683,    0,    0,    0,  680,  680,  684,
      681,  681,  685,  682,  682,    0,  686,    0,  683,  683,
      681,  679,    0,    0,  684,  684,  687,  685,  685,  688,
        0,  686,  686,  689,    0,  690,  685,  686,  691,  683,

      692,  687,  687,  693,  688,  688,  688,    0,  689,  689,
      690,  690,  694,  691,  691,  692,  692,  695,  693,  693,
      696,  692,  687,  697,    0,  698,    0,  694,  694,  699,
        0,    0,  695,  695,  700,  696,  696,    0,  697,  697,
      698,  698,  743,    0,  699,  699,  698,    0,  701,  700,
      700,  701,    0,  695,  701,    0,  701,  743,  743,  703,
      703,  696,  746,  703,    0,    0,  705,    0,  708,  705,
      701,  703,  705,  706,  705,  708,  706,  746,  746,  706,
        0,  706,  709,  708,  708,  708,    0,    0,  705,  709,
        0,    0,  746,  710,    0,  706,  711,  709,  709,  709,

      710,  703,  703,  711,    0,    0,  712,    0,  710,  710,
      713,  711,  711,  712,    0,    0,    0,  713,    0,    0,
      714,  712,  712,    0,    0,  713,  713,  714,    0,    0,
      710,  712,  715,  711,  716,  714,  714,  717,    0,  715,
      792,  716,  792,  792,  717,    0,  792,  715,  715,  716,
      716,  718,  717,  717,    0,  719,    0,  733,  718,    0,
      733,  716,  719,  733,    0,  733,  718,  718,  720,    0,
      719,  719,    0,  717,    0,  720,    0,    0,  721,  733,
      719,  722,    0,  720,  720,  721,    0,  718,  722,  720,
        0,  723,    0,  721,  721,  724,  722,  722,  723,  721,

        0,    0,  724,    0,    0,  725,  723,  723,  726,    0,
      724,  724,  725,    0,    0,  726,  745,  722,  727,    0,
      725,  725,  724,  726,  726,  727,    0,    0,  728,  726,
      729,  745,  745,  727,  727,  728,    0,  729,    0,  725,
        0,    0,  730,  728,  728,  729,  729,    0,  731,  730,
      745,    0,  732,  729,  727,  731,  728,  730,  730,  732,
        0,  735,  735,  731,  731,  735,  737,  732,  732,  737,
        0,    0,  737,  735,  737,  742,    0,  730,    0,  738,
      744,    0,  738,  732,  731,  738,  740,  738,  737,  740,
      742,  742,  740,    0,  740,  744,  744,  747,    0,  748,

      742,  738,  749,  735,  735,  750,    0,    0,  740,  751,
        0,  752,  747,  747,  748,  748,  742,  749,  749,  744,
      750,  750,  753,  749,  751,  751,  752,  752,  754,    0,
      748,  755,  752,    0,    0,  756,    0,  753,  753,  757,
        0,  758,    0,  754,  754,  751,  755,  755,  759,  754,
      756,  756,  755,    0,  757,  757,  758,  758,  760,    0,
      761,    0,  762,  759,  759,  763,    0,    0,    0,  759,
      764,    0,  765,  760,  760,  761,  761,  762,  762,  760,
      763,  763,  766,  758,  767,  764,  764,  765,  765,    0,
        0,    0,    0,  763,    0,    0,  770,  766,  766,  767,

      767,  794,  768,  770,    0,  768,  771,    0,  768,  765,
      768,  770,  770,  771,    0,    0,  794,  794,  772,    0,
      773,  771,  771,    0,  768,  772,    0,  773,    0,    0,
      774,  794,  770,  772,  772,  773,  773,  774,    0,  773,
      775,    0,  771,  776,    0,  774,  774,  775,    0,    0,
      776,    0,  772,    0,  777,  775,  775,    0,  776,  776,
      774,  777,    0,    0,  776,    0,  778,    0,  779,  777,
      777,  780,    0,  778,    0,  779,    0,    0,  780,    0,
        0,  778,  778,  779,  779,  781,  780,  780,  779,    0,
      782,    0,  781,    0,    0,  777,  778,  782,    0,    0,

      781,  781,  781,  783,    0,  782,  782,  784,    0,  785,
      783,    0,    0,  786,  784,    0,  785,    0,  783,  783,
      786,    0,  784,  784,  785,  785,  787,    0,  786,  786,
        0,  788,    0,  787,  785,  783,  789,  784,  788,    0,
        0,  787,  787,  789,  793,    0,  788,  788,  790,    0,
      791,  789,  789,  791,  795,  790,  791,    0,  791,  793,
      793,  796,    0,  790,  790,  793,  788,  787,  797,  795,
      795,  789,  791,  798,    0,  799,  796,  796,  800,  790,
      801,    0,    0,  797,  797,    0,  802,    0,  798,  798,
      799,  799,  803,  800,  800,  801,  801,  796,  797,  804,

      801,  802,  802,  805,    0,  806,    0,  803,  803,  807,
        0,    0,    0,  803,  804,  804,  808,    0,  805,  805,
      806,  806,    0,  808,  807,  807,    0,  809,    0,    0,
        0,  808,  808,  810,  809,    0,    0,    0,  805,  811,
      810,  808,  809,  809,  812,  807,  811,    0,  810,  810,
      810,  812,  809,    0,  811,  811,  813,    0,  814,  812,
      812,    0,  815,  813,    0,  814,    0,  812,  814,  815,
        0,  813,  813,  814,  814,  811,  816,  815,  815,    0,
      817,    0,  818,  816,    0,  815,  813,  817,    0,  818,
        0,  816,  816,  819,    0,  817,  817,  818,  818,    0,

      819,  825,    0,  820,    0,    0,  818,  821,  819,  819,
      820,  826,  819,  822,  821,    0,  825,  825,  820,  820,
      822,    0,  821,  821,  823,    0,  826,  826,  822,  822,
      824,  823,  827,  820,  822,  828,  825,  824,  829,  823,
      823,    0,    0,  830,    0,  824,  824,  827,  827,  831,
      828,  828,    0,  829,  829,    0,  832,  824,  830,  830,
        0,  833,    0,    0,  831,  831,    0,  827,  833,    0,
      831,  832,  832,  834,    0,  836,  833,  833,  835,    0,
      834,  832,  836,    0,    0,  835,    0,    0,  834,  834,
      836,  836,    0,  835,  835,    0,    0,  837,    0,  833,

      838,    0,  839,    0,  837,    0,  836,  838,    0,  839,
        0,  834,  837,  837,  835,  838,  838,  839,  839,  840,
        0,  841,    0,  839,  842,  838,  840,    0,  841,  843,
        0,  842,  844,  837,  840,  840,  841,  841,    0,  842,
      842,    0,  840,  853,  843,  843,  845,  844,  844,    0,
      846,    0,    0,  845,    0,    0,  841,  846,  853,  853,
        0,  845,  845,  844,  843,  846,  846,  845,  847,    0,
      848,  846,  849,  853,    0,  847,    0,  848,    0,  849,
        0,    0,  850,  847,  847,  848,  848,  849,  849,  850,
        0,    0,  851,  847,    0,  852,    0,  850,  850,  851,

        0,  850,  852,    0,  848,  854,    0,  851,  851,  855,
      852,  852,  854,  858,    0,  856,  855,    0,    0,  857,
      854,  854,  856,    0,  855,  855,  857,    0,  858,  858,
      856,  856,  859,    0,  857,  857,  860,    0,    0,  859,
        0,    0,    0,  860,    0,    0,  856,  859,  859,    0,
        0,  860,  860,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  859,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      865,  865,  865,  865,  865,  865,  865,  865,  865,  866,

      866,    0,    0,  866,  867,  867,  867,  867,  867,  867,
      868,  868,    0,    0,  868,  869,  869,  869,  869,  869,
      869,  870,  870,    0,    0,  870,  871,  871,  871,  871,
      871,  871,  872,    0,    0,    0,  872,  872,  872,  872,
      872,  873,  873,    0,  873,  873,  873,  873,  873,  873,
      874,    0,  874,  874,    0,    0,  874,  874,  875,  875,
      875,  875,  876,  876,  876,  876,  877,  877,  877,  877,
      878,  878,  878,  878,  878,  878,  879,    0,    0,    0,
      879,  879,  879,  879,  879,  880,  880,  880,  880,  880,
      880,  881,    0,    0,    0,  881,  881,  881,  881,  881,

      882,  882,  882,  882,  882,  882,  883,    0,    0,    0,
      883,  883,  883,  883,  883,  884,    0,    0,    0,  884,
      884,  884,  884,  884,  885,    0,    0,  885,  885,  885,
      885,  885,  885,  886,    0,    0,    0,  886,  886,  886,
      886,  886,  887,    0,    0,    0,  887,  887,  887,  887,
      887,  888,    0,    0,  888,  888,  888,  888,  888,  888,
      889,    0,    0,    0,  889,  889,  889,  889,  889,  890,
        0,    0,    0,  890,  890,  890,  890,  890,  891,    0,
        0,  891,  891,  891,  891,  891,  891,  892,    0,    0,
        0,  892,  892,  892,  892,  892,  893,    0,    0,    0,

      893,  893,  893,  893,  893,  894,    0,    0,    0,  894,
      894,  894,  894,  894,  895,    0,    0,  895,  895,  895,
      895,  895,  895,  896,    0,    0,    0,  896,  896,  896,
      896,  896,  897,    0,    0,  897,  897,  897,  897,  897,
      897,  898,    0,    0,  898,  898,  898,  898,  898,  898,
      899,    0,    0,    0,  899,  899,  899,  899,  899,  900,
        0,    0,  900,  900,  900,  900,  900,  900,  901,    0,
        0,  901,  901,  901,  901,  901,  901,  902,    0,    0,
        0,  902,  902,  902,  902,  902,  903,    0,    0,  903,
      903,  903,  903,  903,  903,  904,    0,    0,  904,  904,

      904,  904,  904,  904,  905,    0,    0,  905,  905,  905,
      905,  905,  905,  906,    0,    0,  906,  906,  906,  906,
      906,  906,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
#define INITIAL 0
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2003 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
#include "preModule.hh"
#include "lexerAux.hh"
#include "main.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

#define YY_INPUT(buf, result, max_size)		getInput(buf, result, max_size)

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

int braceCount;
int parenCount;
string latexCode;
#define ID_MODE 1

#define CMD_MODE 2

#define FILE_NAME_MODE 3

#define STRING_MODE 4

#define LATEX_MODE 5

#define YY_STACK_USED 1

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 83 "../../../src/Mixfix/lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 862 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5223 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 87 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 91 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 97 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 98 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 102 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 106 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 107 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 108 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VIEW);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 109 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 110 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 111 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 112 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 113 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 114 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 115 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 116 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 117 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 118 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 119 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 120 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 121 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 122 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 123 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 124 "../../../src/Mixfix/lexer.ll"
return KW_OREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 125 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 126 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 127 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 128 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 129 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 130 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 131 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 132 "../../../src/Mixfix/lexer.ll"
return KW_XUNIFY;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 133 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 134 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 135 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 136 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 137 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 138 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 139 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 140 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 141 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 142 "../../../src/Mixfix/lexer.ll"
return KW_BODY;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 143 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_OPS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_LABEL;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 193 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 194 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 195 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 200 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 97:
YY_RULE_SETUP
#line 214 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 218 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 219 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 220 "../../../src/Mixfix/lexer.ll"
FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 101:
YY_RULE_SETUP
#line 228 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 229 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 230 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 231 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 232 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 233 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 234 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 235 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 236 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 237 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 238 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 239 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 240 "../../../src/Mixfix/lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 241 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 242 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 243 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 244 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 245 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 246 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 247 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 248 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 249 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 250 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 251 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 252 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 253 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 254 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 255 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 256 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 257 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 258 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 259 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 260 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 261 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 262 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 263 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 264 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 265 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 266 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 267 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 268 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 269 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 270 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 271 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 272 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 273 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 274 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 275 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 276 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 277 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 278 "../../../src/Mixfix/lexer.ll"
FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 279 "../../../src/Mixfix/lexer.ll"
FIX_UP(IDENTIFIER)
	YY_BREAK


case 153:
YY_RULE_SETUP
#line 283 "../../../src/Mixfix/lexer.ll"
// eat white space
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 284 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 155:
YY_RULE_SETUP
#line 292 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 297 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 157:
YY_RULE_SETUP
#line 306 "../../../src/Mixfix/lexer.ll"
latexCode += yytext;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 307 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 312 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = latexCode.c_str();
						  return LATEX_STRING;
						}
					    }
					  latexCode += yytext;
					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 326 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 330 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  latexCode += yytext;
					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 334 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  latexCode += yytext;
					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 338 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 341 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 347 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 348 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 349 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 354 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 862 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 862 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 861);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 354 "../../../src/Mixfix/lexer.ll"


#include "lexerAux.cc"
