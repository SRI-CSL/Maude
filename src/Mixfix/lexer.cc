
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 203
#define YY_END_OF_BUFFER 204
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1257] =
    {   0,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,    0,    0,    0,    0,  191,  191,
        0,    0,  204,  202,  200,  201,  201,   99,  202,   97,
       99,   99,   99,   97,   98,   98,   99,  202,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   15,   99,   99,   99,   99,   99,   99,   99,
      159,  202,  157,  157,  157,  159,  157,  157,  159,  202,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  105,  202,
      101,  105,  105,  103,  102,  101,  105,  202,  105,  103,

      107,  107,  106,  107,  107,  107,  107,  174,  202,  169,
      170,  174,  161,  174,  172,  160,  164,  162,  163,  174,
      202,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  171,  179,  179,  179,  179,  179,
      177,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  200,  176,  202,  201,  185,  186,
      187,  180,  184,  189,  188,  190,  191,  192,  199,  193,
      198,  198,  194,  195,  193,  196,  197,  200,   99,    0,
       99,    0,    0,    0,   99,   99,   98,    0,   99,   99,
       99,   99,   99,   99,   99,   11,   99,   99,   99,   99,

       99,   40,   99,   99,   74,   99,   99,   99,   99,   99,
       99,   99,   61,   99,    5,   99,   99,   99,   14,   99,
       73,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   35,   71,   99,   99,   99,   99,   99,   99,   99,
       99,   75,   99,   99,   99,   99,   99,   99,   99,   99,
        6,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,  159,    0,  158,  159,    0,    0,    0,  159,  159,
      153,  156,  154,    0,  159,  159,  159,  159,  159,  148,
      159,  159,  159,  159,  147,  136,  159,  159,  159,  159,
      135,  159,  134,  159,  159,  159,  159,  145,  159,  159,

      159,  141,  159,  136,  159,  149,  159,  159,  159,  159,
      159,  108,  136,  159,  155,  105,    0,  104,  105,    0,
        0,    0,  105,  105,    0,  100,  102,    0,    5,  200,
      106,    0,    0,    0,    0,    0,  174,    0,  173,  174,
        0,    0,    0,  174,  174,  165,    0,  174,  174,  174,
      174,  174,  174,  174,  174,  167,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  166,    0,    0,
      178,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  175,    0,    0,  175,    0,    0,    0,  175,  175,
        0,    0,  175,    0,  200,  176,    0,    0,    0,  185,

      181,  182,  183,  189,  191,  193,  193,   99,    0,    2,
        2,   99,   99,   99,   66,   99,   99,   99,   99,   99,
       65,   99,   99,   99,   99,   99,   99,   99,   99,   16,
       74,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   73,   99,   99,    6,   27,
       99,   99,   99,   36,   99,   71,   99,   99,   99,   99,
       99,   99,   10,   99,   96,   19,   99,   99,   21,   75,
       99,   99,   99,   33,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   72,   99,   99,   99,   99,
       99,   99,   99,  159,    0,    2,    2,  159,  159,  146,

      159,  159,  150,  159,  159,  159,  159,  159,  159,  159,
      159,  113,  159,  136,  159,  151,  159,  159,  159,  159,
      159,  159,  129,  128,  159,  142,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  144,  105,    0,    2,
        2,    0,    0,    0,    0,    2,    2,  174,    0,    2,
        2,  174,  174,  174,  174,  174,  174,  174,  174,  168,
      174,  174,  174,  174,  174,  174,  174,  168,  174,  174,
      174,  174,  174,    0,    0,    2,    2,    0,    0,    0,
      175,  175,    0,    0,    0,    0,  175,    0,    0,    0,
        0,    2,    2,    2,    1,    2,    2,   99,   99,   99,

       52,   42,   99,   99,   99,   99,   99,   99,   99,   49,
       26,   99,   20,   99,   99,   89,   22,   99,   99,   57,
       99,   23,   99,   99,   99,   99,    9,   25,   99,    3,
       99,   99,   99,   99,   18,   99,    7,   99,   99,   92,
       13,   99,   99,   99,   99,   15,   99,   99,   99,   99,
       99,   75,   99,   99,   34,   70,   24,   99,   87,   99,
       99,   62,   99,   99,   99,   72,   99,    8,   99,   99,
       58,   99,   99,    0,    0,    2,    2,    2,    1,    2,
        2,  159,  159,  112,  159,  159,  124,  159,  159,  151,
      159,  159,  152,  159,  159,  109,  159,  159,  159,  114,

      159,  159,  115,  159,  159,  116,    3,  159,  159,  143,
      159,  159,  123,  118,  159,  159,  137,  159,  159,  159,
      159,  159,  159,  144,    0,    0,    2,    2,    2,    1,
        2,    2,    0,    0,    1,    0,    0,    2,    2,    2,
        1,    2,    2,  174,  168,  174,  174,  174,  174,  174,
      174,  168,  174,  168,  174,  174,  174,  174,  168,  168,
      174,  174,  174,    0,    0,    2,    2,    2,    1,    2,
        2,    0,    0,  175,  175,    0,    0,    0,    0,    0,
      175,    0,    0,    0,    2,    2,    1,    1,    1,    1,
        1,    2,    2,    2,   86,   99,   60,   99,   90,   99,

       41,   54,   99,   99,   99,   99,   99,   99,   79,   99,
       84,   99,   99,   99,   99,   99,   99,   99,   55,   99,
       77,   93,   29,   99,   99,   99,   99,   99,   99,   59,
       17,   51,   99,   99,   12,   99,   99,   99,   99,   99,
       99,   99,   70,   99,   63,   50,   99,   99,   37,   32,
       99,   69,   88,   44,   99,   99,    2,    2,    1,    1,
        1,    1,    1,    2,    2,    2,  111,  139,  159,  159,
      159,  130,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  110,  125,  159,  159,  159,  159,  159,  159,
      159,  117,  137,  159,  121,  159,  159,  159,  136,    2,

        2,    1,    1,    1,    1,    1,    2,    2,    2,    2,
        2,    1,    1,    1,    1,    1,    2,    2,    2,  168,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  168,    2,    2,    1,    1,
        1,    1,    1,    2,    2,    2,  175,    0,    0,    0,
        0,    0,    0,    1,    1,    1,    1,    1,    2,    2,
       38,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   81,   99,    4,   99,
       99,   93,   56,   68,   27,   99,   99,   95,   59,   99,
       99,   99,   99,   19,   85,   48,   99,   31,   45,   99,

       99,   99,   64,   99,   99,   30,    1,    1,    1,    1,
        1,    2,    2,  159,  159,  127,  159,  159,    4,  122,
      119,  159,  159,  159,  159,  159,  159,  159,  128,  159,
      159,  159,  159,  159,  159,  159,  159,  159,    1,    1,
        1,    1,    1,    2,    2,    1,    1,    1,    1,    1,
        2,    2,  174,  174,  168,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,    1,    1,    1,    1,    1,
        2,    2,    0,    0,    0,    0,    0,    0,    1,    1,
       99,   60,   99,   99,   43,   78,   99,   47,   99,   99,
       20,   99,   99,   83,   99,   99,   82,   67,   53,   99,

       99,   94,   80,   99,   21,   99,   99,   76,   39,   99,
        1,    1,  159,  159,  159,  159,  159,  131,  159,  159,
      159,  159,  129,  159,  132,  159,  159,  159,  126,  159,
      159,  138,  159,    1,    1,    1,    1,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,    1,    1,
        0,    0,    0,    0,  175,   99,   99,   99,   78,   99,
       99,   26,   46,   22,   99,   23,   99,   99,   96,   24,
       99,   99,  159,  159,  159,  159,  159,  159,  159,  159,
      115,  120,  159,  159,  159,  121,  140,  138,  159,  174,
      174,  174,  174,  174,  174,  174,  174,    0,    0,    0,

      175,   99,   52,   91,   99,   49,   57,   18,   99,   99,
       28,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      133,  174,  174,  174,  174,  174,  174,  174,    0,    0,
       99,   99,  159,  159,  159,  159,  114,  159,  118,  140,
      174,  174,  174,  174,  174,   99,  111,  112,  159,  123,
      174,   50,  159,  174,  127,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   24,    8,   25,   26,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   13,   54,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56
    } ;

static yyconst flex_int32_t yy_meta[57] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    9,    8,   10,   10,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    7,    5,   11
    } ;

static yyconst flex_int16_t yy_base[1344] =
    {   0,
        0,    0,   56,    0,  112,    0,  167,  181,  196,    0,
      252,    0,  307,    0,  314,  322,  354,  359,  172,  186,
      368,  424,  694, 8392,  174, 8392, 8392,  309,  317, 8392,
      341, 8392,  361,  371,  373,  375,  379,  392,  385,  411,
      423,  434,  445,  459,  447,  481,  457,  484,  487,  507,
      511,  515,  521,  540,  579,  535,  549,  567,  574,  602,
      581,  321, 8392,  605,  613,  627,  631,  642,  645,  655,
      665,  702,  667,  673,  671,  679,  740,  710,  728,  748,
      762,  766,  780,  786,  800,  705,  742,  813,  821,  324,
     8392,  833,  835,  860,  862,  827,  865,  882,  873, 8392,

     8392,  905, 8392,  919,  935,  673,  660,  935,  366, 8392,
     8392,  937, 8392,  939,  943,  957,  963, 8392, 8392,  961,
      980,  983,  989,  987, 1001, 1022, 1027, 1035, 1049, 1060,
     1073, 1075, 1081, 1030, 8392, 8392, 1086,  372, 1104, 1106,
     1109, 1117, 1126, 1172, 1107, 1143, 1145, 1149, 1175, 1180,
     1183, 1203, 1209, 1211, 1253, 8392, 1267, 1281,    0, 8392,
     8392, 8392,  573,    0, 8392, 8392,    0, 8392, 8392,    0,
     8392, 8392, 8392, 8392,  397, 8392, 8392,  188,  607,  403,
      675, 1253,  478,  415,  772, 1078, 1205, 1280,  794,  847,
     1283,  949,  875,  998,  893,  774, 1217, 1130, 1272, 1291,

     1304,  907, 1311, 1314, 1083, 1316, 1319, 1326, 1329, 1334,
     1348, 1355, 1357, 1359, 1362, 1367, 1385, 1389, 1392, 1394,
     1396, 1399, 1403, 1417, 1423, 1425, 1435, 1430, 1437, 1445,
     1450, 1455, 1457, 1459, 1469, 1463, 1481, 1483, 1490, 1492,
     1503, 1505, 1511, 1515, 1518, 1530, 1537, 1548, 1551, 1558,
     1563, 1566, 1576, 1581, 1584, 1586, 1589, 1608, 1599, 1612,
     1617, 1631,  485, 1637, 1639, 1657,  508,  436, 1660, 1668,
     1664, 1666, 1679, 1692, 1692, 1704, 1706, 1710, 1718, 1739,
     1743, 1745, 1747, 1758, 1766, 1769, 1780, 1788, 1791, 1816,
     1793, 1814, 1829, 1835, 1837, 1843, 1848, 1856, 1845, 1867,

     1870, 1888, 1885, 1893, 1896, 1911, 1916, 1919, 1922, 1930,
     1943, 1945, 1948, 1956, 1968, 1970,  554, 1976, 1981, 1994,
      563,  438, 2001, 2005, 2030, 8392, 2034, 2001, 2013, 2059,
     8392, 2073,  661,  647,  643,  634, 2073,  572, 2075, 2077,
     2059,  592,  524, 2095, 2099, 2101, 2108, 2119, 2127, 2122,
     2124, 2130, 2156, 2159, 2164, 2162, 2177, 2185, 2190, 2198,
     2203, 2209, 2223, 2231, 2242, 2254, 2256, 2262, 2267,  636,
     2280, 2282, 2300,  637,  582, 2303, 2311, 2320,  962, 2323,
     2331, 2336, 2342, 2356, 2362, 2367, 2375, 2381, 2386, 2394,
     2408, 2412, 2416, 2420, 2451, 8392, 2465,  632,  622,    0,

     8392, 8392, 8392,    0,    0,    0, 8392, 1610,  655, 2480,
     2534, 1698, 1801, 1890, 1751, 2132, 2195, 2031, 2435, 2277,
     1824, 2292, 2453, 2484, 2229, 2473, 2450, 2491, 2498, 2502,
     2506, 2516, 2511, 2537, 2544, 2541, 2552, 2548, 2567, 2570,
     2555, 2573, 2575, 2577, 2585, 2597, 2603, 2606, 2608, 2615,
     2611, 2617, 2626, 2621, 2636, 2639, 2644, 2648, 2651, 2654,
     2658, 2662, 2676, 2682, 2684, 2686, 2688, 2690, 2697, 2711,
     2717, 2720, 2725, 2729, 2735, 2740, 2743, 2748, 2750, 2753,
     2762, 2773, 2783, 2776, 2768, 2794, 2797, 2801, 2804, 2806,
     2808, 2812, 2815, 2837,  663, 2863, 2917, 2840, 2866, 2874,

     2897, 2863, 2889, 2921, 2935, 2918, 2953, 2964, 2966, 2985,
     2988, 2990, 3008, 3011, 3014, 3016, 3019, 3037, 3045, 3048,
     3050, 3056, 3068, 3071, 3083, 3089, 3094, 3102, 3107, 3113,
     3125, 3133, 3139, 3147, 3152, 3158, 3170, 3178,  694, 3215,
     3269,  622,  597,  591,  576,  552,  534, 3181,  711, 3323,
     3377, 3192, 3184, 3218, 3233, 3229, 3196, 3256, 3280, 3291,
     3303, 3341, 3295, 3337, 3343, 3345, 3380, 3349, 3388, 3399,
     3401, 3407, 3425, 3428,  716, 3454, 3508, 3457, 3554, 3431,
     3465, 3468, 3479, 3490, 3512, 3526, 3530,  533,  520,  738,
      760,    0,  502, 3567, 3602,  364, 3656, 2834, 3081, 3221,

     3262, 2845, 3434, 3501, 3060, 3534, 3460, 3556, 3558, 3347,
     3386, 3579, 3420, 3277, 3583, 3589, 3592, 3614, 3622, 3625,
     3649, 3620, 3643, 3664, 3670, 3674, 3628, 3676, 3679, 3682,
     3694, 3697, 3705, 3707, 3712, 3718, 3715, 3725, 3727, 3736,
     3738, 3745, 3747, 3750, 3758, 3760, 3768, 3770, 3778, 3780,
     3788, 3793, 3799, 3801, 3806, 3811, 3820, 3824, 3826, 3832,
     3834, 3845, 3854, 3856, 3858, 3863, 3865, 3867, 3876, 3888,
     3890, 3895, 3899,  785,  811,  498, 3925,  481, 3948,  448,
     4002, 3914, 3935, 3929, 3959, 3962, 3970, 3973, 3984, 4006,
     4009, 4024, 4027, 4035, 4038, 4053, 4057, 4061, 4065, 4084,

     4086, 4088, 4092, 4111, 4113, 4115, 4134, 4139, 4142, 4136,
     4160, 4162, 4165, 4168, 4186, 4189, 4197, 4211, 4215, 4200,
     4223, 4241, 4243, 4246,  831,  821,  458, 4273,  442, 4296,
      478, 4350,  445,  429,    0,  874,  912,  421, 4285,  398,
     4404,  531, 4458, 4300, 4308, 4321, 4319, 4327, 4353, 4332,
     4357, 4368, 4376, 4407, 4381, 4426, 4430, 4445, 4469, 4472,
     4480, 4484, 4498,  920,  954,  388, 4526,  362, 4549,  598,
     4603, 4506, 1022, 4520, 4531, 4552, 4560, 4571, 4563, 4574,
     4606, 4610, 4614, 4628, 4658, 4667,    0, 4681, 4671,  332,
     4735, 4687,  320, 4714, 3941, 4386, 4090, 4219, 4012, 4059,

     4121, 4171, 4439, 4276, 4512, 4516, 4638, 4674, 4306, 4412,
     4314, 4699, 4361, 4687, 4701, 4738, 4729, 4466, 4583, 4741,
     4624, 4747, 4753, 4756, 4759, 4761, 4768, 4771, 4774, 4786,
     4789, 4794, 4796, 4798, 4804, 4816, 4819, 4826, 4828, 4834,
     4837, 4839, 4849, 4852, 4858, 4863, 4867, 4870, 4881, 4888,
     4890, 4892, 4895, 4899, 4901, 4903, 4929, 4939, 4952, 4963,
        0,  313, 5006, 4969, 5060, 4980, 4923, 4976, 4988, 5010,
     5024, 5028, 5032, 5047, 5071, 5079, 5074, 5082, 5085, 5106,
     5112, 5118, 5120, 5124, 5142, 5144, 5147, 5165, 5169, 5171,
     5173, 5191, 5195, 5199, 5203, 5214, 5222, 5226, 5228, 5254,

     5266, 5277, 5288,    0,  306, 5331, 5261, 5385, 5303, 5315,
     5345, 5439, 5357, 5493,  296, 5547, 5359, 5601, 5370, 5389,
     5410, 5311, 5407, 5421, 5366, 5443, 5457, 5465, 5470, 5496,
     5511, 5514, 5550, 5519, 5516, 5554, 5580, 5591, 5655, 5612,
     5709,  289, 5763, 5619, 5817, 5630, 5636, 5659, 5673, 5681,
     5712, 5581, 5727, 5738, 5747, 5746, 5871, 5774, 5789, 5800,
     4925, 5378, 5020, 5463, 4986, 4999, 5432, 5445, 5661, 5224,
     5325, 5669, 5783, 5811, 5804, 5823, 5053, 5785, 5419, 5837,
     5826, 5679, 5797, 5864, 5835, 5875, 5877, 5879, 5882, 5885,
     5889, 5904, 5907, 5912, 5914, 5917, 5922, 5919, 5926, 5932,

     5937, 5940, 5945, 5950, 5959, 5947, 5985, 5994, 5995,    0,
     6009, 6019, 6032, 6028, 6031, 6034, 6036, 6054, 6059, 6062,
     6077, 6081, 6083, 6085, 6089, 6107, 6110, 6118, 6121, 6133,
     6136, 6141, 6159, 6162, 6165, 6167, 6170, 6185, 6213, 6226,
     6221,    0, 6237, 6246, 6255, 6263, 6275, 6270,    0, 6286,
     6295, 6304, 6294, 6306, 6193, 6318, 6320, 6326, 6331, 6344,
     6352, 6355, 6358, 6370, 6376, 6403, 6412, 6407,    0, 6421,
     6431, 6444, 6411, 6433, 6441, 6446, 6454, 6465, 6493, 6481,
     6478, 6005, 6291, 6484, 6087, 6095, 6480, 6198, 6489, 6492,
     6329, 6499, 6510, 6512, 6517, 6525, 6535, 6537, 6540, 6543,

     6545, 6548, 6555, 6558, 6563, 6566, 6568, 6573, 6576, 6578,
     6604, 6619, 6591, 6609, 6615, 6620, 6635, 6638, 6641, 6653,
     6661, 6664, 6667, 6672, 6686, 6691, 6694, 6697, 6699, 6705,
     6719, 6727, 6732, 6758, 6767, 6775, 6784, 6774, 6780, 6785,
     6788, 6793, 6806, 6812, 6814, 6818, 6836, 6838, 6849, 6864,
     6861, 6865, 6869, 6883, 6887, 6889, 6891, 6893, 6659, 6729,
     6898, 6901, 6916, 6920, 6922, 6925, 6928, 6930, 6935, 6940,
     6948, 6953, 6955, 6960, 6973, 6987, 6992, 6995, 7013, 6998,
     7018, 7021, 7032, 7036, 7044, 7047, 7055, 7066, 7069, 7074,
     7087, 7089, 7092, 7095, 7114, 7116, 7118, 7120, 7139, 7142,

     7145, 7042, 6958, 6984, 7148, 7153, 7160, 7166, 7171, 7174,
     7178, 7185, 7189, 7197, 7203, 7209, 7215, 7223, 7236, 7242,
     7247, 7250, 7255, 7268, 7270, 7274, 7292, 7297, 7300, 7315,
     7310, 7312, 7323, 7336, 7347, 7349, 7355, 7360, 7374, 7378,
     7382, 7386, 7400, 7405, 7411, 7413, 7425, 7436, 7438, 7449,
     7451, 7221, 7457, 7462, 7475, 8392, 7502, 7513, 7524, 7535,
     7546, 7553, 7563, 7570, 7580, 7587, 7597, 7604, 7614, 7621,
     7631, 7642, 7653, 7664, 7674, 7680, 7687, 7694, 7701, 7708,
     7718, 7729, 7739, 7750, 7760, 7771, 7782, 7792, 7803, 7813,
     7824, 7835, 7846, 7857, 7868, 7879, 7890, 7901, 7912, 7923,

     7934, 7945, 7956, 7967, 7978, 7989, 8000, 8011, 8022, 8033,
     8044, 8055, 8066, 8077, 8084, 8095, 8106, 8117, 8128, 8139,
     8150, 8161, 8172, 8183, 8194, 8201, 8212, 8223, 8234, 8245,
     8256, 8267, 8274, 8285, 8296, 8307, 8318, 8329, 8336, 8347,
     8358, 8369, 8380
    } ;

static yyconst flex_int16_t yy_def[1344] =
    {   0,
     1256,    1, 1256,    3, 1256,    5, 1257, 1257, 1256,    9,
     1256,   11,   11,   13, 1258, 1258, 1259, 1259, 1260, 1260,
     1261, 1261, 1256, 1256, 1256, 1256, 1256, 1262, 1263, 1256,
     1262, 1256, 1262, 1262, 1262, 1262, 1262, 1256, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1264, 1265, 1256, 1264, 1264, 1264, 1264, 1264, 1264, 1256,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1266, 1267,
     1256, 1266, 1266, 1266, 1266, 1266, 1266, 1256, 1266, 1256,

     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1268, 1269, 1256,
     1256, 1268, 1256, 1268, 1268, 1268, 1268, 1256, 1256, 1268,
     1256, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1256, 1256, 1270, 1271, 1270, 1270,
     1270, 1270, 1256, 1270,  144, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1256, 1256, 1256, 1256, 1272, 1256,
     1256, 1256, 1256, 1273, 1256, 1256, 1274, 1256, 1256, 1275,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1262, 1263,
     1262, 1276, 1263, 1263, 1262, 1262, 1262, 1256, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,

     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1264, 1265, 1264, 1264, 1277, 1265, 1265, 1264, 1264,
     1264, 1264, 1264, 1256, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,   77, 1264,

     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1266, 1267, 1266, 1266, 1278,
     1267, 1267, 1266, 1266, 1256, 1256, 1266, 1256, 1266, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1268, 1269, 1268, 1268,
     1279, 1269, 1269, 1268, 1268, 1268, 1256, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1270, 1271,
     1270, 1270, 1280, 1271, 1271, 1270, 1270, 1256,  144, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1256, 1256, 1256, 1256, 1256, 1272,

     1256, 1256, 1256, 1273, 1274, 1275, 1256, 1262, 1281, 1282,
     1282, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1264, 1283, 1284, 1284, 1264, 1264, 1264,

     1264,   77, 1264, 1264, 1264,   77, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1266, 1285, 1286,
     1286, 1256, 1256, 1256, 1256, 1287, 1287, 1268, 1288, 1289,
     1289, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1270, 1290, 1291, 1291, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1256, 1256, 1281,
     1281, 1287,  411, 1292, 1293,  411, 1294, 1262, 1262, 1262,

     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1283, 1283,  497, 1295,  497, 1296,  497,
     1297, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,

     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1285, 1285,  541, 1298,  541, 1299,
      541, 1300, 1256, 1256, 1301, 1288, 1288,  551, 1302,  551,
     1303,  551, 1304, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1290, 1290,  577, 1305,  577, 1306,  577,
     1307, 1270,  579, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1292, 1292, 1301, 1293, 1308,  788,
     1309, 1287,  411, 1310, 1262, 1262, 1262, 1262, 1262, 1262,

     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1295, 1295, 1296, 1311,
      859,  859, 1312, 1287, 1313, 1314, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1298,

     1298, 1299, 1316,  902,  902, 1317, 1287, 1318, 1319, 1320,
     1320, 1321, 1322, 1321,  914, 1323, 1287, 1324, 1325, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1327, 1327, 1328, 1329,
     1328,  941, 1330, 1287, 1331, 1332, 1333, 1333, 1333, 1333,
     1333, 1333, 1333, 1334, 1334, 1335, 1336, 1337, 1338, 1338,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,

     1339, 1339, 1339, 1339, 1339, 1339, 1311, 1311, 1335,  859,
     1340, 1314, 1314, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1316, 1316,
     1335,  902, 1341, 1319, 1319, 1322, 1322, 1335,  914, 1342,
     1325, 1325, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1329, 1329, 1335,  941, 1343,
     1332, 1332, 1333, 1333, 1333, 1333, 1333, 1333, 1337, 1337,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,

     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1340, 1340, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1341, 1341, 1342, 1342, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1343, 1343,
     1333, 1333, 1333, 1333, 1333, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1333, 1333, 1333,

     1333, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1333, 1333,
     1339, 1339, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1326, 1326, 1326, 1326, 1326, 1339, 1315, 1315, 1315, 1315,
     1326, 1339, 1315, 1326, 1315,    0, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,

     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256
    } ;

static yyconst flex_int16_t yy_nxt[8449] =
    {   0,
       24,   25,   26,   24,   27,   25,   25,   28,   29,   30,
       30,   31,   28,   32,   33,   34,   35,   36,   28,   28,
       28,   30,   28,   30,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   28,   46,   28,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       28,   28,   32,   32,   28,   28,   24,   25,   26,   24,
       27,   25,   25,   61,   62,   63,   63,   64,   65,   63,
       66,   65,   61,   61,   67,   68,   61,   63,   61,   63,
       69,   70,   71,   61,   72,   73,   74,   75,   76,   61,
       77,   78,   61,   79,   80,   61,   81,   82,   61,   83,

       84,   85,   86,   87,   61,   61,   61,   61,   63,   63,
       88,   61,   24,   25,   26,   24,   27,   25,   25,   89,
       90,   91,   91,   92,   89,   91,   93,   94,   89,   95,
       96,   89,   89,   91,   89,   91,   97,   98,   89,   89,
       89,   89,   89,   89,   89,   89,   99,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,  100,  100,   89,   89,  102,  103,
      104,  105,  102,  102,  168,  178,  168,  168,  106,  178,
      178,  107,  102,  103,  104,  105,  102,  102,  168,  178,
      168,  168,  106,  178,  178,  107,   24,   25,   26,   24,

       27,   25,   25,  108,  109,  110,  111,  112,  108,  113,
      114,  115,  108,  108,  116,  117,  108,  118,  108,  119,
      120,  121,  122,  108,  123,  124,  108,  125,  126,  108,
      127,  108,  108,  128,  129,  108,  130,  131,  108,  132,
      133,  134,  108,  108,  108,  108,  108,  108,  135,  135,
      108,  108,  136,   25,   26,   24,   27,   25,   25,  137,
      138,  136,  136,  139,  137,  136,  140,  141,  137,  137,
      137,  137,  137,  136,  137,  136,  142,  143,  137,  137,
      144,  137,  145,  137,  137,  137,  146,  147,  137,  137,
      148,  137,  149,  150,  137,  151,  152,  137,  153,  154,

      137,  137,  137,  137,  136,  136,  137,  137,  155,  156,
      157,  158,  155,  155, 1068,  160,  161,  180,  161,  160,
      160, 1048,  162,  160,  161,  179,  161,  160,  160,  262,
      162, 1041,  316,  181,  182,  137,  163,  137, 1009,  184,
      593,  137,  137,  268,  163,  137,  322,  137,  137,  180,
      137,  137,  185,  137,  137,  165,  166,  956,  166,  165,
      165,  166,  165,  166,  165,  181,  182,  165,  169,  180,
      171,  169,  172,  169,  337,  186,  169,  173,  174,  180,
      369,  180,  766,  180,  593,  181,  182,  180,  343,  792,
      175,  187,  187,  180,  375,  181,  182,  181,  182,  181,

      182,  181,  181,  181,  188,  181,  407,  407,  766,  181,
      182,  179,  189,  181,  190,  181, 1256,  183,  738,  180,
      176,  177,  191,  169,  169,  184,  171,  169,  172,  169,
      192,  180,  169,  173,  174,  181,  182, 1256,  267, 1256,
      321,  738,  180,  326,  181,  181,  175,  181,  182,  407,
      407,  193,  196,  180,  194,  180,  326,  195,  181,  182,
      197,  198,  727,  199,  201,  180,  200,  180,  676,  181,
      182,  181,  182,  864,  202,  213,  176,  177,  727,  169,
      203,  181,  182,  181,  182,  204,  179,  205,  206,  180,
      214,  216,  180,  262,  207,  180,  208,  209,  727,  210,

      184,  676,  211,  907,  212,  181,  182,  268,  181,  182,
      217,  181,  182,  220,  221,  180,  262,  222,  676,  180,
      215,  223,  593,  180,  218, 1256,  342,  224,  219,  180,
      268,  181,  182,  225,  396,  181,  182,  226,  229,  181,
      182,  234,  230,  180,  396,  181,  182,  227,  180,  231,
      232,  738,  233,  228,  735,  235,  917,  180,  236,  181,
      182,  237,  316,  238,  181,  182,  240,  239,  251,  252,
      241,  316,  735,  181,  182,  180,  322,  242,  253,  401,
      337,  402,  180, 1256,  374,  322,  243,  180,  254,  263,
      331,  181,  182,  255,  343,  403,  264,  256,  181,  182,

      337,  257,  331,  181,  182,  265,  266,  258,  259,  244,
      180,  734,  245,  263,  343,  180,  269,  246,  766,  247,
      264,  263,  248,  944,  249,  250,  181,  182,  264,  265,
      266,  181,  182,  733,  260,  263,  589,  265,  266,  263,
      261,  270,  264,  588,  369,  369,  264,  271,  547,  272,
      263,  265,  266,  263,  546,  265,  266,  264,  375,  375,
      264,  545,  273,  408,  265,  265,  265,  266,  265,  265,
      274,  494,  544,  263,  336,  263,  265,  591,  265,  263,
      264,  263,  264,  180,  335,  675,  264,  263,  264,  265,
      266,  265,  266, 1256,  264,  265,  266,  265,  266,  181,

      188,  283,  538,  265,  266,  289, 1256,  265,  265,  275,
      263,  287,  284,  263,  288,  285,  726,  264,  263,  548,
      264, 1256,  286, 1256,  574,  264,  265,  266, 1256,  265,
      266, 1256,  276,  737,  265,  266,  263,  295,  765,  277,
      278, 1256,  279,  264,  280,  281,  408,  282,  263,  313,
      263, 1256,  265,  266,  296,  264,  263,  264,  297, 1256,
      591, 1256,  590,  264,  265,  266,  265,  266,  314,  290,
      263,  291,  265,  266,  263,  298, 1256,  264,  299,  292,
      180,  264,  180,  410,  293,  294,  265,  266,  263,  301,
      265,  266,  300,  494,  263,  264,  181,  182,  181,  182,

     1256,  264,  180,  302,  265,  266,  303,  675,  263,  304,
      265,  266, 1256,  674,  305,  264, 1256,  306,  181,  182,
     1256,  263, 1256,  725,  265,  266,  307,  308,  264,  317,
      311,  309,  310,  315,  412,  317,  318,  265,  266,  538,
      312,  317,  318,  317,  323,  319,  320, 1256,  318,  324,
      318,  319,  320,  726, 1256,  180, 1256,  319,  320,  319,
      320,  325,  326,  325,  325,  325,  325, 1256,  317, 1256,
      317,  181,  182,  317, 1256,  318, 1256,  318,  327,  327,
      318,  317,  548,  180,  319,  320,  319,  320,  318,  319,
      328,  319,  319, 1256,  413,  319,  737,  319,  320,  181,

      182,  180, 1256,  319,  417,  319,  330,  331,  332,  332,
      330,  330,  329, 1256,  736,  180,  333,  181,  182,  334,
      332,  331,  332,  332,  332,  332, 1256,  419,  574, 1256,
      333,  181,  182,  334,  319,  319,  332,  331,  332,  332,
      332,  332,  765,  338, 1256,  338,  333,  338,  344,  334,
      339,  338,  339,  345,  339, 1256,  764,  180,  339,  340,
      341,  340,  341,  340,  341,  338, 1256,  340,  341,  338,
     1256,  338,  339,  181,  182, 1256,  339, 1256,  339, 1256,
     1256,  340,  341,  346, 1256,  340,  347,  340,  341,  340,
      340,  338,  369,  340,  416,  338, 1256,  338,  339,  369,

      369,  340,  339,  340,  339,  369,  180,  340,  341,  338,
     1256,  340,  341,  340,  341, 1256,  339, 1256, 1256, 1256,
     1256,  351,  181,  182, 1256,  340,  341,  348,  418,  349,
      338, 1256,  340,  340,  350,  338, 1256,  339,  338, 1256,
     1256,  352,  339,  338,  353,  339,  340,  341,  354, 1256,
      339,  340,  341,  369,  340,  341,  355,  338,  356,  340,
      341,  358,  369, 1256,  339,  359,  369,  948,  338,  369,
      368, 1256,  357,  340,  341,  339, 1256, 1256, 1256,  360,
     1256,  338, 1256,  338,  340,  341,  180,  362,  339,  338,
      339,  180,  411,  361,  370, 1256,  339,  340,  341,  340,

      341,  371,  181,  182, 1256,  340,  341,  181,  182,  365,
      372,  373,  370,  363,  370,  376,  364,  370, 1256,  371,
      377,  371,  366, 1256,  371,  370,  367,  431,  372,  373,
      372,  373,  371,  372,  373,  372,  372,  369,  180,  372,
     1256,  372,  378, 1256,  369,  369,  384,  372, 1256,  372,
      369,  370, 1256,  370,  181,  182,  385,  370,  371,  421,
      371, 1256, 1256, 1256,  371, 1256, 1256,  372,  373,  372,
      373, 1256,  387,  372,  373, 1256,  382, 1256,  372,  372,
      370, 1256,  386,  370, 1256, 1256, 1256,  371,  370, 1256,
      371,  370, 1256,  388, 1256,  371,  372,  373,  371,  372,

      373, 1256,  379, 1256,  372,  373, 1256,  372,  373,  380,
      381,  370, 1256,  180,  382,  383,  389,  370,  371,  370,
      382,  187,  187,  390,  371,  180,  371,  372,  373,  181,
      182, 1256, 1256,  372,  373,  372,  373,  394, 1256, 1256,
     1256,  181,  182,  391, 1256, 1256, 1256,  420, 1256,  392,
     1256, 1256, 1256,  393,  395,  396,  397,  397,  395,  395,
     1256,  409,  181,  181,  398, 1256,  181,  399,  397,  396,
      397,  397,  397,  397,  181, 1256,  181, 1256,  398, 1256,
      180,  399,  397,  396,  397,  397,  397,  397, 1256,  181,
      181,  180,  398,  181, 1256,  399,  181,  182, 1256,  180,

     1256,  181, 1256,  181, 1256,  181,  181,  181,  182,  422,
      423,  424,  180, 1256, 1256,  181,  182,  414,  425,  180,
      415,  426,  180, 1256,  180, 1256, 1256,  180,  181,  182,
     1256,  427,  181,  181,  180,  181,  182,  180,  181,  182,
      181,  182,  180,  181,  182,  430,  432,  433,  428,  429,
      181,  182,  435,  181,  182, 1256,  180, 1256,  181,  182,
     1256, 1256, 1256,  180,  434,  180, 1256,  180, 1256,  436,
      180, 1256,  181,  182, 1256,  180, 1256,  437,  438,  181,
      182,  181,  182,  181,  182,  439,  181,  182,  251, 1256,
      440,  181,  182,  180, 1256, 1256, 1256,  180, 1256, 1256,

      180, 1256,  180, 1256,  180, 1256,  441,  180, 1256,  181,
      182,  180,  442,  181,  182,  443,  181,  182,  181,  182,
      181,  182, 1256,  181,  182,  180, 1256,  181,  182,  444,
     1256,  180, 1256,  180, 1256, 1256, 1256,  447,  180,  445,
      446,  181,  182,  180, 1256,  180,  449,  181,  182,  181,
      182, 1256,  448,  180,  181,  182, 1256, 1256,  180,  181,
      182,  181,  182,  180, 1256,  180,  450,  180,  453,  181,
      182,  180,  251,  451,  181,  182,  454,  180,  452,  181,
      182,  181,  182,  181,  182, 1256, 1256,  181,  182,  180,
      455,  180, 1256,  181,  182, 1256, 1256,  460,  180, 1256,

      180,  456,  457,  461,  458,  181,  182,  181,  182, 1256,
      459,  180,  463,  180,  181,  182,  181,  182, 1256,  180,
     1256, 1256, 1256,  180,  464,  462,  180,  181,  182,  181,
      182, 1256,  466, 1256, 1256,  181,  182,  465,  180,  181,
      182,  472,  181,  182, 1256,  180, 1256,  467,  471,  470,
      468,  469,  473, 1256,  181,  182,  180, 1256,  475,  180,
      474,  181,  182, 1256, 1256, 1256,  180, 1256, 1256, 1256,
      476,  180,  181,  182,  180,  181,  182,  479,  478, 1256,
      477,  480,  181,  182,  180,  481, 1256,  181,  182,  180,
      181,  182,  180, 1256,  180, 1256,  482,  180, 1256, 1256,

      181,  182,  484, 1256,  483,  181,  182,  180,  181,  182,
      181,  182, 1256,  181,  182,  485,  180, 1256,  180,  488,
      180, 1256, 1256,  181,  182,  180,  492,  486, 1256,  487,
     1256, 1256,  181,  182,  181,  182,  181,  182,  489,  263,
     1256,  181,  182,  493,  491,  263,  264,  263,  490, 1256,
     1256, 1256,  264, 1256,  264,  265,  266, 1256, 1256, 1256,
     1256,  265,  266,  265,  274,  495,  265,  265,  263, 1256,
      265,  496,  263, 1256,  263,  264,  263, 1256,  265,  264,
      265,  264,  497,  264,  265,  266, 1256,  263,  265,  266,
      265,  266,  265,  266,  264, 1256, 1256, 1256, 1256, 1256,

      263,  265,  265,  265,  266,  265,  180,  264, 1256,  265,
      265, 1256,  263,  265,  263,  265,  265,  266,  263,  264,
     1256,  264,  181,  182, 1256,  264,  263, 1256,  265,  266,
      265,  266,  499,  264,  265,  266,  498,  500, 1256, 1256,
     1256,  598,  265,  266,  265,  265,  280,  263, 1256, 1256,
     1256,  263, 1256,  263,  264,  263,  501,  502,  264,  180,
      264, 1256,  264,  265,  266, 1256,  263,  265,  266,  265,
      266,  265,  266,  264,  263,  181,  182,  263, 1256, 1256,
      503,  264,  265,  266,  264,  504, 1256,  506,  263, 1256,
      265,  266,  505,  265,  266,  264,  263, 1256, 1256,  263,

     1256,  263, 1256,  264,  265,  266,  264, 1256,  264,  180,
     1256, 1256,  265,  266,  507,  265,  266,  265,  266, 1256,
     1256, 1256,  263,  508,  263,  181,  182, 1256,  509,  264,
      511,  264,  180, 1256,  512,  599,  510,  263,  265,  266,
      265,  266,  514,  263,  264,  263,  513, 1256,  181,  182,
      264,  263,  264,  265,  266, 1256,  263, 1256,  264,  265,
      266,  265,  266,  264,  263,  515, 1256,  265,  266, 1256,
      517,  264,  265,  266,  262,  263,  262,  516,  263,  519,
      265,  266,  264,  520,  262,  264, 1256, 1256,  518,  521,
      522,  265,  266,  263,  265,  266,  263, 1256,  180,  523,

      264,  263,  525,  264,  263,  524, 1256, 1256,  264,  265,
      266,  264,  265,  266,  181,  182,  600,  265,  266,  263,
      265,  266,  527,  528,  263, 1256,  264,  263,  530, 1256,
      263,  264,  526,  529,  264,  265,  266,  264,  263, 1256,
      265,  266, 1256,  265,  266,  264,  265,  266, 1256,  532,
     1256,  263, 1256,  263,  265,  266,  263,  534,  264,  531,
      264, 1256, 1256,  264,  263,  533, 1256,  265,  266,  265,
      266,  264,  265,  266, 1256, 1256,  263, 1256,  317, 1256,
      265,  266,  536,  264,  317,  318,  535, 1256, 1256,  317,
     1256,  318,  265,  266,  319,  320,  318, 1256, 1256,  537,

      319,  320,  539,  319,  319,  319,  328,  319, 1256,  317,
      319,  319,  540,  317,  319,  319,  318,  319, 1256,  541,
      318,  317,  319, 1256,  319,  319,  320, 1256,  318,  319,
      320,  325,  326,  325,  325,  325,  325,  319,  320,  180,
     1256,  542,  317, 1256,  543, 1256,  319,  319, 1256,  318,
      327,  327, 1256,  319,  319,  181,  182,  603,  319,  320,
      330,  331,  332,  332,  330,  330, 1256,  549,  340,  340,
      333, 1256,  340,  334,  332,  331,  332,  332,  332,  332,
      340,  338,  340,  338,  333,  338, 1256,  334,  339, 1256,
      339, 1256,  339, 1256, 1256, 1256, 1256,  340,  341,  340,

      341,  340,  347,  338, 1256, 1256,  550,  338, 1256,  338,
      339,  340,  340,  551,  339, 1256,  339,  340,  340,  340,
      341,  340, 1256,  340,  341,  340,  341,  338, 1256,  340,
      338,  340,  338, 1256,  339,  338, 1256,  339,  338,  339,
      180, 1256,  339,  340,  341,  339,  340,  341,  340,  341,
     1256,  340,  341, 1256,  340,  341,  181,  182, 1256, 1256,
      340,  340,  555,  552,  338,  553,  554,  338, 1256,  556,
      338,  339,  338,  557,  339,  601, 1256,  339, 1256,  339,
      340,  341,  560,  340,  341,  338,  340,  341,  340,  341,
     1256, 1256,  339,  338,  561, 1256,  558, 1256,  338, 1256,

      339,  340,  341,  180,  559,  339,  338,  562, 1256,  340,
      341,  338, 1256,  339,  340,  341, 1256,  338,  339,  181,
      182,  564,  340,  341,  339, 1256, 1256,  340,  341, 1256,
      563,  338, 1256,  340,  341,  560,  565,  180,  339,  338,
     1256, 1256,  566,  567,  568,  602,  339,  340,  341, 1256,
      338, 1256, 1256,  181,  182,  340,  341,  339, 1256, 1256,
      569,  570,  338, 1256,  338, 1256,  340,  341,  612,  339,
      338,  339, 1256, 1256,  571,  370, 1256,  339,  340,  341,
      340,  341,  371, 1256,  572,  180,  340,  341,  370, 1256,
      370,  372,  373, 1256, 1256,  371, 1256,  371, 1256,  573,

      180,  181,  182,  605,  372,  373,  372,  378,  575,  372,
      372,  370, 1256,  372,  576, 1256,  181,  182,  371,  370,
     1256,  372, 1256,  372, 1256,  577,  371,  372,  373,  372,
      372,  370,  606,  372, 1256,  372,  373, 1256,  371,  370,
     1256,  372, 1256,  372,  370, 1256,  371,  372,  373,  578,
      370,  371,  372,  372, 1256,  372,  373,  371,  382, 1256,
      372,  373, 1256, 1256,  370, 1256,  372,  373, 1256, 1256,
      370,  371,  372,  372, 1256,  370, 1256,  371, 1256,  382,
      372,  373,  371,  370, 1256,  579,  372,  373, 1256,  370,
      371,  372,  373, 1256,  370,  581,  371, 1256, 1256,  372,

      373,  371,  370, 1256, 1256,  372,  373,  580, 1256,  371,
      372,  373, 1256,  582, 1256,  382,  370, 1256,  372,  373,
      370, 1256, 1256,  371,  370, 1256, 1256,  371,  370, 1256,
      382,  371,  372,  373,  583,  371,  372,  373, 1256,  585,
      372,  373, 1256,  180,  372,  373, 1256, 1256, 1256, 1256,
      586,  584,  395,  396,  397,  397,  395,  395,  180,  181,
      182,  180,  398,  587, 1256,  399,  397,  396,  397,  397,
      397,  397,  604, 1256,  181,  182,  398,  181,  182,  399,
      592,  180, 1256,  592, 1256, 1256, 1256, 1256,  594,  592,
      592,  607,  180,  592,  608, 1256,  614,  181,  182,  180,

      595,  592,  613,  592,  596,  597,  180, 1256,  181,  182,
      180, 1256,  609,  610,  180,  181,  182, 1256, 1256,  180,
     1256,  615,  181,  182,  180, 1256,  181,  182, 1256,  611,
      181,  182,  592,  592,  592,  181,  182,  592, 1256,  616,
      181,  182,  594,  592,  592,  180, 1256,  592,  618,  180,
     1256, 1256,  180, 1256,  595,  592,  180,  592,  596,  597,
      180,  181,  182,  180,  617,  181,  182,  619,  181,  182,
      251, 1256,  181,  182, 1256,  180,  181,  182,  180,  181,
      182,  180, 1256,  180,  625,  180,  592,  592, 1256,  620,
      621,  181,  182,  180,  181,  182,  622,  181,  182,  181,

      182,  181,  182,  626,  627,  180, 1256,  624,  623,  181,
      182,  180, 1256,  629,  180, 1256,  180, 1256,  628,  180,
     1256,  181,  182,  180, 1256,  180, 1256,  181,  182,  180,
      181,  182,  181,  182,  180,  181,  182,  631, 1256,  181,
      182,  181,  182,  630,  180,  181,  182,  180,  634, 1256,
      181,  182,  180,  636,  632,  635,  180, 1256,  633,  180,
      181,  182,  180,  181,  182,  637,  180, 1256,  181,  182,
      180, 1256,  181,  182,  638,  181,  182, 1256,  181,  182,
      641,  640,  181,  182,  180, 1256,  181,  182,  639,  643,
      180, 1256,  180,  642,  180,  645,  180, 1256,  180, 1256,

      181,  182, 1256,  644, 1256,  180,  181,  182,  181,  182,
      181,  182,  181,  182,  181,  182, 1256, 1256,  647,  180,
      650,  181,  182, 1256, 1256,  180, 1256,  646,  180, 1256,
     1256, 1256,  648,  180,  649,  181,  182,  180, 1256, 1256,
      651,  181,  182,  180,  181,  182, 1256,  652,  180,  181,
      182,  180, 1256,  181,  182,  654,  180, 1256,  180,  181,
      182,  180, 1256,  653,  181,  182, 1256,  181,  182,  251,
      180, 1256,  181,  182,  181,  182,  180,  181,  182, 1256,
     1256,  180, 1256,  655,  180, 1256,  181,  182,  656, 1256,
     1256,  180,  181,  182,  659,  658,  657,  181,  182,  665,

      181,  182,  180, 1256,  664,  180,  660,  181,  182,  180,
     1256,  661,  180,  662,  180, 1256,  180,  663,  181,  182,
      180,  181,  182,  180,  667,  181,  182, 1256,  181,  182,
      181,  182,  181,  182, 1256, 1256,  181,  182,  666,  181,
      182,  671,  180,  670, 1256,  263, 1256,  669,  263,  668,
     1256,  672,  264,  180, 1256,  264, 1256, 1256,  181,  182,
      673,  265,  266,  592,  265,  266,  592, 1256, 1256,  181,
      182,  677,  592,  592,  263, 1256,  592, 1256,  678,  795,
      682,  264,  263,  679,  592, 1256,  592,  680,  681,  264,
      265,  266,  262, 1256,  685, 1256, 1256,  263,  265,  266,

     1256, 1256,  262, 1256,  264,  263, 1256,  686,  262, 1256,
      683, 1256,  264,  265,  266,  592,  592,  592, 1256, 1256,
      592,  265,  266, 1256, 1256,  677,  592,  592, 1256,  263,
      592, 1256,  678, 1256, 1256,  684,  264,  679,  592, 1256,
      592,  680,  681,  263, 1256,  265,  266,  262, 1256,  689,
      264, 1256, 1256, 1256, 1256, 1256,  516,  262,  690,  265,
      266,  263,  691,  692,  687,  693, 1256, 1256,  264,  592,
      592, 1256,  263, 1256,  263, 1256, 1256,  265,  266,  264,
      688,  264, 1256,  694, 1256, 1256, 1256, 1256,  265,  266,
      265,  266, 1256,  263, 1256, 1256,  263, 1256,  263, 1256,

      264, 1256,  695,  264,  696,  264, 1256, 1256, 1256,  265,
      266, 1256,  265,  266,  265,  266,  263,  697,  698,  263,
     1256,  699,  263,  264,  263, 1256,  264,  263, 1256,  264,
     1256,  264,  265,  266,  264,  265,  266, 1256,  265,  266,
      265,  266, 1256,  265,  266,  263,  700,  701,  702,  704,
     1256, 1256,  264,  263, 1256, 1256,  263,  703,  263, 1256,
      264,  265,  266,  264,  263,  264, 1256,  705,  180,  265,
      266,  264,  265,  266,  265,  266,  263, 1256, 1256,  263,
      265,  266,  709,  264,  181,  182,  264, 1256,  707,  180,
      706,  263,  265,  266,  708,  265,  266,  263,  264, 1256,

     1256,  711,  263,  801,  264,  181,  182,  265,  266,  264,
      263, 1256,  710,  265,  266,  263,  712,  264,  265,  266,
     1256,  263,  264, 1256, 1256,  796,  265,  266,  264, 1256,
      714,  265,  266,  263, 1256, 1256, 1256,  265,  266, 1256,
      264,  263, 1256, 1256,  713, 1256,  716,  263,  264,  265,
      266, 1256,  715, 1256,  264,  263, 1256,  265,  266, 1256,
      263,  718,  264,  265,  266,  719,  263,  264, 1256, 1256,
      717,  265,  266,  264, 1256,  720,  265,  266,  263, 1256,
     1256, 1256,  265,  266, 1256,  264,  317, 1256, 1256,  338,
      722,  721,  338,  318,  265,  266,  339,  723, 1256,  339,

      338, 1256,  319,  320,  338,  340,  341,  339,  340,  341,
     1256,  339, 1256, 1256,  724,  592,  340,  341,  592, 1256,
      340,  341,  745,  728,  592,  592,  338, 1256,  592,  180,
      729, 1256,  744,  339,  749,  730,  592,  338,  592,  731,
      732,  338,  340,  341,  339,  181,  182, 1256,  339,  746,
     1256, 1256, 1256,  340,  341, 1256, 1256,  340,  341, 1256,
     1256, 1256,  747, 1256,  338,  797, 1256,  592,  592,  592,
      180,  339,  592, 1256,  748, 1256,  560,  728,  592,  592,
      340,  341,  592, 1256,  729,  180,  181,  182,  338,  730,
      592, 1256,  592,  731,  732,  339,  798, 1256, 1256,  338,

     1256,  181,  182,  338,  340,  341,  339,  750, 1256,  811,
      339,  338, 1256,  751, 1256,  340,  341, 1256,  339,  340,
      341,  592,  592,  592, 1256,  755,  592,  340,  341, 1256,
     1256,  739,  592,  592, 1256, 1256,  592, 1256,  740, 1256,
     1256,  752,  753,  741,  592,  338,  592,  742,  743,  338,
     1256,  338,  339,  338, 1256,  180,  339,  338,  339, 1256,
      339,  340,  341, 1256,  339,  340,  341,  340,  341,  340,
      341,  181,  182,  340,  341,  592,  592,  592, 1256,  758,
      592,  807,  560,  560,  754,  739,  592,  592,  338,  756,
      592, 1256,  740, 1256,  180,  339,  338,  741,  592, 1256,

      592,  742,  743,  339,  340,  341,  757,  338, 1256,  338,
      181,  182,  340,  341,  339,  338,  339, 1256, 1256, 1256,
      808, 1256,  339,  340,  341,  340,  341,  760,  180,  592,
      592,  340,  341,  338,  761,  762,  370, 1256,  759,  370,
      339, 1256,  180,  371,  181,  182,  371, 1256, 1256,  340,
      341,  763,  372,  373,  592,  372,  373,  592,  181,  182,
     1256,  778,  767,  592,  592,  370,  810,  592,  180,  768,
      799, 1256,  371,  370,  769,  592,  370,  592,  770,  771,
      371,  372,  373,  371,  181,  182,  803,  370, 1256,  372,
      373, 1256,  372,  373,  371, 1256, 1256, 1256,  370, 1256,

     1256,  772,  779,  372,  373,  371,  592,  592,  592,  180,
     1256,  592,  382, 1256,  372,  373,  767,  592,  592, 1256,
      370,  592, 1256,  768,  780,  181,  182,  371,  769,  592,
     1256,  592,  770,  771,  370,  781,  372,  373,  370, 1256,
      782,  371,  180, 1256, 1256,  371,  800, 1256, 1256, 1256,
      372,  373, 1256, 1256,  372,  373,  783, 1256,  181,  182,
      592,  592,  370, 1256,  180,  784,  180,  592,  183,  371,
      592, 1256, 1256,  183,  382,  593, 1256,  802,  372,  373,
      181,  182,  181,  182, 1256,  773, 1256,  180,  806,  786,
      804,  180,  774, 1256,  775, 1256,  805,  180,  776,  777,

      180,  774,  787,  181,  182,  787, 1256,  181,  182, 1256,
      789,  787,  787,  181,  182,  787,  181,  182, 1256, 1256,
      812, 1256,  180,  787,  809,  787,  790,  791,  180, 1256,
      180, 1256, 1256,  180, 1256,  813,  180, 1256,  181,  182,
     1256, 1256, 1256, 1256,  181,  182,  181,  182, 1256,  181,
      182,  180,  181,  182,  787,  787,  592,  180, 1256,  592,
      814,  815, 1256,  818,  794,  596,  596,  181,  182,  596,
      816, 1256,  180,  181,  182,  817,  819,  596,  180,  596,
      592,  592,  180, 1256,  180, 1256, 1256,  180,  181,  182,
      180, 1256, 1256, 1256,  181,  182, 1256, 1256,  181,  182,

      181,  182,  180,  181,  182,  180,  181,  182,  596,  596,
      820,  822,  823,  180,  821,  180, 1256, 1256,  181,  182,
      180,  181,  182,  180, 1256, 1256,  180, 1256,  824,  181,
      182,  181,  182,  180,  825,  180,  181,  182,  828,  181,
      182,  827,  181,  182,  180,  826,  180, 1256,  829,  181,
      182,  181,  182,  180, 1256,  180, 1256,  831,  180, 1256,
      181,  182,  181,  182,  830, 1256,  180, 1256,  180,  181,
      182,  181,  182, 1256,  181,  182,  180, 1256,  180, 1256,
      834,  833,  181,  182,  181,  182,  180,  835,  180, 1256,
      832, 1256,  181,  182,  181,  182,  180, 1256,  837, 1256,

     1256,  180,  181,  182,  181,  182,  839,  180,  836,  180,
     1256, 1256,  181,  182,  180, 1256,  838,  181,  182,  180,
     1256, 1256,  840,  181,  182,  181,  182,  841,  180,  842,
      181,  182,  180, 1256,  180,  181,  182,  470, 1256, 1256,
      180, 1256,  180, 1256,  181,  182, 1256, 1256,  181,  182,
      181,  182, 1256,  180, 1256,  843,  181,  182,  181,  182,
      847, 1256,  180,  844,  180, 1256,  180, 1256,  845,  181,
      182,  180, 1256,  180, 1256,  180, 1256,  846,  181,  182,
      181,  182,  181,  182,  180, 1256,  849,  181,  182,  181,
      182,  181,  182,  848, 1256, 1256,  180, 1256,  180, 1256,

      181,  182, 1256,  180, 1256,  851,  853,  180,  850, 1256,
     1256,  852,  181,  182,  181,  182, 1256, 1256,  854,  181,
      182,  855,  263,  181,  182,  592,  267,  856,  592,  264,
     1256,  267, 1256,  676, 1256, 1256, 1256,  263,  265,  266,
     1256, 1256,  867,  263,  264, 1256, 1256,  858,  787,  180,
      264,  787, 1256,  265,  266, 1256,  860,  787,  787,  265,
      266,  787, 1256,  861, 1256,  181,  182,  263, 1256,  787,
      263,  787,  862,  863,  264,  869, 1256,  264,  263,  868,
     1256,  263, 1256,  265,  266,  264,  265,  266,  264, 1256,
     1256, 1256,  263,  870,  265,  266, 1256,  265,  266,  264,

      787,  787,  592, 1256, 1256,  592, 1256,  871,  265,  266,
      866,  680,  680,  872,  263,  680, 1256,  263, 1256, 1256,
      180,  264,  516,  680,  264,  680,  592,  592, 1256,  873,
      265,  266,  263,  265,  266,  263,  181,  182, 1256,  264,
     1256,  965,  264,  263,  516, 1256,  263,  516,  265,  266,
      264,  265,  266,  264,  680,  680, 1256,  516, 1256,  265,
      266,  263,  265,  266,  875,  263, 1256,  180,  264,  263,
     1256, 1256,  264,  263,  874, 1256,  264,  265,  266, 1256,
      264,  265,  266,  181,  182,  265,  266,  876, 1256,  265,
      266,  877,  263,  966,  263, 1256,  263, 1256,  180,  264,

      263,  264, 1256,  264, 1256,  878, 1256,  264,  265,  266,
      265,  266,  265,  266,  181,  182,  265,  266,  882,  263,
      963,  263, 1256,  263, 1256,  879,  264, 1256,  264,  180,
      264,  880, 1256, 1256,  881,  265,  266,  265,  266,  265,
      266, 1256,  263, 1256,  263,  181,  182,  263,  883,  264,
      263,  264, 1256, 1256,  264, 1256, 1256,  264,  265,  266,
      265,  266,  884,  265,  266,  885,  265,  266,  263, 1256,
      263,  886, 1256,  263, 1256,  264,  263,  264, 1256,  180,
      264, 1256, 1256,  264,  265,  266,  265,  266,  887,  265,
      266, 1256,  265,  266,  263,  181,  182,  263,  890, 1256,

     1256,  264,  888,  889,  264,  263, 1256, 1256,  263, 1256,
      265,  266,  264,  265,  266,  264,  891, 1256, 1256,  263,
     1256,  265,  266,  263,  265,  266,  264,  180, 1256, 1256,
      264,  263, 1256, 1256,  892,  265,  266,  896,  264,  265,
      266,  893, 1256,  181,  182,  894,  964,  265,  266,  263,
     1256,  263, 1256, 1256,  263,  898,  264, 1256,  264, 1256,
      895,  264, 1256,  897, 1256,  265,  266,  265,  266, 1256,
      265,  266, 1256,  592,  321,  899,  592, 1256, 1256,  321,
     1256,  727, 1256, 1256,  180,  592,  342, 1256,  592, 1256,
     1256,  342, 1256,  738, 1256,  901,  787, 1256, 1256,  787,

      181,  182, 1256, 1256,  903,  787,  787,  911,  338,  787,
     1256,  904, 1256,  968,  180,  339,  338,  787, 1256,  787,
      905,  906,  180,  339,  340,  341, 1256,  338,  920,  338,
      181,  182,  340,  341,  339,  338,  339, 1256,  181,  182,
      338, 1256,  339,  340,  341,  340,  341,  339,  787,  787,
      592,  340,  341,  592,  921,  922,  340,  341,  909,  731,
      731,  338,  925,  731,  923,  338, 1256,  560,  339,  180,
     1256,  731,  339,  731,  592,  592,  338,  340,  341,  924,
     1256,  340,  341,  339,  338,  181,  182,  926, 1256,  338,
     1256,  339,  340,  341,  180,  975,  339, 1256, 1256, 1256,

      340,  341,  731,  731,  787,  340,  341,  787, 1256,  927,
      181,  182,  913,  787,  787,  338,  961,  787, 1256,  914,
      180,  928,  339, 1256, 1256,  787,  962,  787,  915,  916,
      560,  340,  341,  929,  338, 1256,  181,  182,  338, 1256,
      973,  339, 1256, 1256, 1256,  339, 1256,  180, 1256, 1256,
      340,  341,  930,  338,  340,  341,  787,  787,  592,  931,
      339,  592, 1256,  181,  182, 1256,  919,  742,  742,  340,
      341,  742, 1256,  932,  180, 1256, 1256,  338,  967,  742,
      338,  742,  592,  592,  339, 1256, 1256,  339,  338, 1256,
      181,  182,  338,  340,  341,  339,  340,  341, 1256,  339,

      980, 1256,  934, 1256,  340,  341,  338,  933,  340,  341,
      742,  742, 1256,  339,  370, 1256, 1256, 1256,  935, 1256,
      180,  371,  340,  341,  180,  560,  592,  374,  370,  592,
      372,  373,  374, 1256,  766,  371,  181,  182, 1256,  370,
      181,  182,  970,  936,  372,  373,  371, 1256,  938,  787,
      947,  969,  787, 1256, 1256,  372,  373,  940,  787,  787,
      370, 1256,  787, 1256,  941, 1256, 1256,  371,  370,  774,
      787,  370,  787,  942,  943,  371,  372,  373,  371,  370,
     1256, 1256,  370, 1256,  372,  373,  371,  372,  373,  371,
      774,  180, 1256,  774, 1256,  372,  373, 1256,  372,  373,

     1256,  787,  787,  592,  951, 1256,  592,  181,  182,  950,
      949,  946,  770,  770,  370, 1256,  770, 1256,  370, 1256,
     1256,  371,  370, 1256,  770,  371,  770,  592,  592,  371,
      372,  373,  180, 1256,  372,  373,  370, 1256,  372,  373,
     1256, 1256, 1256,  371, 1256, 1256,  180,  952,  181,  182,
      382, 1256,  372,  373,  953,  770,  770, 1256,  592,  183,
      382,  592,  181,  182,  183, 1256,  593,  592, 1256,  183,
      592,  787,  183,  183,  787, 1256, 1256,  183, 1256,  788,
      786,  787,  180,  971,  787, 1256, 1256, 1256, 1256,  789,
      787,  787, 1256,  955,  787,  180,  596,  596,  181,  182,

      596, 1256,  787, 1256,  787,  790,  791,  180,  596,  180,
      596,  181,  182,  972,  592,  590,  976,  592, 1256, 1256,
      590, 1256,  793,  181,  182,  181,  182, 1256, 1256,  974,
      977, 1256, 1256,  787,  787,  787,  960,  180,  787,  596,
      596, 1256, 1256,  958,  790,  790,  180, 1256,  790,  180,
     1256, 1256, 1256,  181,  182,  180,  790, 1256,  790,  787,
      787,  180,  181,  182,  180,  181,  182,  180,  978,  180,
      981,  181,  182, 1256,  979, 1256,  180,  181,  182,  180,
      181,  182,  180,  181,  182,  181,  182,  790,  790,  984,
     1256,  982,  181,  182,  180,  181,  182,  180,  181,  182,

     1256, 1256,  180, 1256,  180,  983,  180,  986,  987,  985,
      181,  182,  180,  181,  182, 1256, 1256,  988,  181,  182,
      181,  182,  181,  182,  180, 1256,  992,  180,  181,  182,
      989,  990, 1256,  991,  180, 1256,  180, 1256, 1256, 1256,
      181,  182,  180,  181,  182,  180, 1256,  180, 1256,  994,
      181,  182,  181,  182, 1256,  993,  995,  180,  181,  182,
      180,  181,  182,  181,  182,  996,  180, 1256, 1256, 1256,
      998,  180, 1256,  181,  182,  180,  181,  182,  180,  997,
     1256, 1256,  181,  182,  999, 1256, 1000,  181,  182,  180,
     1256,  181,  182, 1256,  181,  182,  180, 1001,  180, 1256,

      180, 1256, 1003,  180, 1256,  181,  182,  180, 1256,  180,
     1002,  180,  181,  182,  181,  182,  181,  182, 1256,  181,
      182, 1256, 1256,  181,  182,  181,  182,  181,  182,  592,
      267,  263,  592,  180, 1004,  267, 1006,  676,  264,  592,
     1256,  267,  592, 1256, 1005,  267, 1256,  265,  266,  181,
      182,  858,  787, 1256, 1256,  787, 1256, 1014, 1256, 1256,
      860,  787,  787,  787,  267,  787,  787,  861, 1256,  267,
     1256,  859, 1256,  787, 1256,  787,  862,  863,  680,  680,
      592,  674,  680,  592,  263, 1008,  674, 1256,  865, 1256,
      680,  264,  680, 1256,  180, 1256,  263, 1256, 1256, 1256,

      265,  266, 1013,  264,  787,  787,  787,  180, 1256,  787,
      181,  182,  265,  266, 1011,  862,  862, 1256,  263,  862,
     1256,  680,  680,  181,  182,  264, 1084,  862,  180,  862,
      787,  787,  263, 1015,  265,  266,  263, 1256, 1085,  264,
      263, 1256, 1016,  264,  181,  182, 1256,  264,  265,  266,
     1256, 1256,  265,  266, 1256,  263,  265,  266,  862,  862,
      592,  180,  264,  592, 1082,  516, 1256, 1017,  677,  592,
      592,  265,  266,  592, 1256,  678, 1018,  181,  182,  263,
     1256,  592,  263,  592,  680,  681,  264,  263, 1256,  264,
      263, 1256, 1256,  263,  264,  265,  266,  264,  265,  266,

      264, 1256, 1256,  265,  266, 1256,  265,  266, 1256,  265,
      266, 1256,  592,  592,  263, 1256, 1019, 1021, 1020, 1256,
      263,  264, 1022, 1256, 1256, 1023,  263,  264,  263, 1256,
      265,  266,  263,  264, 1256,  264,  265,  266, 1256,  264,
     1024, 1025,  265,  266,  265,  266, 1256, 1256,  265,  266,
      263, 1256,  263, 1256, 1256,  263, 1256,  264, 1256,  264,
     1256, 1256,  264, 1026, 1256, 1256,  265,  266,  265,  266,
     1028,  265,  266,  263, 1027, 1256, 1256,  263, 1256,  263,
      264,  263, 1256, 1256,  264, 1256,  264, 1256,  264,  265,
      266, 1256, 1029,  265,  266,  265,  266,  265,  266,  263,

     1032, 1033, 1256,  263, 1256, 1030,  264,  263, 1256, 1031,
      264,  263, 1256, 1256,  264,  265,  266, 1256,  264,  265,
      266, 1256,  263,  265,  266, 1034, 1256,  265,  266,  264,
      263, 1256,  180, 1035,  263, 1256,  263,  264,  265,  266,
     1036,  264, 1256,  264, 1256, 1256,  265,  266,  181,  182,
      265,  266,  265,  266,  592,  321, 1256,  592, 1256, 1038,
      321, 1088,  727, 1256, 1256, 1037,  592, 1256,  321,  592,
      731,  731,  321, 1256,  731, 1256,  901,  787, 1256, 1256,
      787, 1256,  731, 1256,  731,  903,  787,  787,  787,  321,
      787,  787,  904, 1256,  321, 1256,  902, 1256,  787, 1256,

      787,  905,  906,  592,  725, 1256,  592, 1256, 1256,  725,
     1040,  908, 1256,  731,  731,  592,  342, 1256,  592,  338,
     1256,  342, 1256,  738, 1256, 1045,  339, 1256, 1256,  787,
      787,  787, 1256,  180,  787,  340,  341,  911, 1256, 1043,
      905,  905, 1256, 1055,  905,  592, 1256,  342,  592,  181,
      182,  342,  905, 1256,  905,  787,  787,  787,  342, 1089,
      787, 1256, 1256,  342, 1256,  912, 1256, 1256,  742,  742,
      592,  736,  742,  592,  338, 1256,  736, 1256,  918, 1047,
      742,  339,  742,  905,  905,  592,  180, 1256,  592, 1256,
      340,  341, 1052,  728,  592,  592, 1256,  338,  592, 1256,

      729, 1256,  181,  182,  339,  560,  592, 1256,  592,  731,
      732,  742,  742,  340,  341,  338, 1256, 1256,  338, 1256,
     1256, 1081,  339, 1053, 1256,  339, 1256,  180, 1256,  338,
     1256,  340,  341, 1256,  340,  341,  339,  592,  592,  787,
      180, 1256,  787,  181,  182,  340,  341,  913,  787,  787,
     1056,  338,  787,  180,  914, 1054,  181,  182,  339, 1256,
      787,  421,  787,  915,  916,  338,  560,  340,  341,  181,
      182,  180,  339,  338, 1256, 1086, 1256, 1256,  338, 1256,
      339,  340,  341, 1256, 1256,  339,  560,  181,  182,  340,
      341,  787,  787,  787,  340,  341,  787, 1057, 1256, 1058,

     1256,  913,  787,  787,  338, 1256,  787, 1256,  914, 1083,
     1256,  339, 1256, 1256,  787, 1059,  787,  915,  916,  338,
      340,  341,  338, 1256,  338, 1256,  339,  338, 1060,  339,
     1256,  339, 1256, 1256,  339,  340,  341, 1061,  340,  341,
      340,  341, 1064,  340,  341,  787,  787,  787, 1063, 1256,
      787, 1256, 1256, 1256, 1256, 1050,  915,  915,  338,  560,
      915, 1256,  338, 1256, 1256,  339, 1256, 1256,  915,  339,
      915,  787,  787, 1256,  340,  341, 1256, 1256,  340,  341,
      592,  374, 1256,  592, 1065, 1256,  374, 1256,  766,  370,
     1062,  592, 1256,  374,  592, 1256,  371,  374, 1256,  915,

      915,  592,  938, 1256,  592,  372,  373, 1077, 1256,  739,
      592,  592,  787,  374,  592,  787,  740, 1256,  374, 1256,
      939, 1256,  592, 1256,  592,  742,  743, 1256,  770,  770,
      592,  764,  770,  592, 1067, 1256,  764, 1256,  945, 1256,
      770, 1256,  770, 1256,  370, 1256, 1256, 1256, 1256, 1256,
     1256,  371, 1072,  592,  592,  787, 1256, 1256,  787, 1256,
      372,  373, 1256,  940,  787,  787, 1073,  370,  787,  180,
      941,  770,  770, 1256,  371, 1256,  787,  180,  787,  942,
      943,  370, 1256,  372,  373,  181,  182,  180,  371,  370,
     1256, 1087,  774,  181,  182, 1256,  371,  372,  373, 1256,

     1256, 1256, 1074,  181,  182,  372,  373,  787,  787,  787,
     1075, 1256,  787, 1256, 1256, 1090, 1256,  940,  787,  787,
      370, 1256,  787, 1256,  941, 1256, 1256,  371, 1256, 1256,
      787, 1256,  787,  942,  943,  370,  372,  373,  787,  183,
     1076,  787,  371, 1256,  183, 1256,  788,  787, 1256,  183,
      787,  372,  373,  183, 1256,  790,  790, 1256, 1256,  790,
      955,  787,  787,  787, 1256, 1256,  787,  790, 1256,  790,
     1078, 1070,  942,  942,  787,  590,  942,  787, 1256, 1256,
      590, 1256,  957, 1256,  942, 1256,  942,  787,  787,  592,
      590,  180,  592,  180, 1256,  590, 1080,  793,  790,  790,

      592, 1256,  590,  592, 1256,  180,  590,  181,  182,  181,
      182,  960,  180, 1091, 1256,  942,  942,  592, 1256,  180,
      592,  181,  182, 1256, 1095,  767,  592,  592,  181,  182,
      592,  180,  768, 1256,  180,  181,  182, 1256,  592, 1092,
      592,  770,  771,  180, 1256,  180, 1256,  181,  182, 1093,
      181,  182, 1256, 1094, 1256, 1256, 1097, 1256, 1256,  181,
      182,  181,  182, 1256, 1256, 1256, 1256, 1256, 1256,  592,
      592,  787,  180, 1256,  787, 1256, 1256, 1256, 1256,  789,
      787,  787, 1096,  180,  787,  180, 1256,  180,  181,  182,
      180, 1256,  787,  180,  787,  790,  791,  180, 1256,  181,

      182,  181,  182,  181,  182, 1099,  181,  182, 1098,  181,
      182, 1100,  180,  181,  182,  180, 1256, 1256, 1101, 1102,
      180, 1256,  180,  787,  787,  180, 1256,  180,  181,  182,
      180,  181,  182, 1104,  180, 1256,  181,  182,  181,  182,
      180,  181,  182,  181,  182,  180,  181,  182,  180, 1103,
      181,  182, 1105,  180, 1256,  180,  181,  182,  180, 1256,
     1256,  181,  182, 1256,  181,  182, 1256,  180, 1256,  181,
      182,  181,  182, 1256,  181,  182, 1256, 1106, 1256, 1256,
     1109, 1256, 1107,  181,  182,  787,  267, 1256,  787, 1256,
     1108,  267, 1256,  859,  787, 1256,  267,  787, 1256, 1256,

      267, 1256, 1110, 1256,  862,  862, 1256, 1008,  862,  787,
      674, 1256,  787,  180, 1256,  674,  862, 1010,  862,  592,
      674, 1256,  592, 1256, 1256,  674, 1256,  865, 1256,  181,
      182, 1112,  592, 1256,  674,  592,  263, 1256,  674,  263,
     1256, 1013,  263,  264,  263, 1256,  264,  862,  862,  264,
     1256,  264,  265,  266, 1113,  265,  266, 1114,  265,  266,
      265,  266,  263, 1256, 1256, 1256, 1256,  263, 1256,  264,
      263, 1256, 1256, 1256,  264, 1256, 1256,  264,  265,  266,
     1115, 1256, 1116,  265,  266,  263,  265,  266, 1117,  263,
     1256,  263,  264,  263, 1256,  180,  264,  263,  264, 1256,

      264,  265,  266,  180,  264,  265,  266,  265,  266,  265,
      266,  181,  182,  265,  266,  263, 1256, 1118,  263,  181,
      182, 1256,  264, 1121, 1256,  264,  263, 1256, 1119,  263,
     1120,  265,  266,  264,  265,  266,  264, 1122, 1159, 1256,
     1123,  263,  265,  266,  263,  265,  266, 1256,  264,  263,
     1256,  264, 1256, 1256, 1256, 1256,  264,  265,  266, 1256,
      265,  266, 1256, 1124, 1256,  265,  266,  263, 1256, 1125,
      263, 1127, 1256,  263,  264,  263, 1256,  264,  263, 1126,
      264, 1256,  264,  265,  266,  264,  265,  266, 1256,  265,
      266,  265,  266,  263,  265,  266, 1256, 1130, 1256, 1129,

      264,  338, 1256, 1256, 1128, 1256,  180, 1256,  339,  265,
      266, 1131, 1256,  787,  321, 1132,  787,  340,  341,  321,
     1256,  902,  181,  182, 1256, 1133,  787, 1256,  321,  787,
      905,  905,  321, 1256,  905, 1040, 1256,  787,  725, 1140,
      787, 1256,  905,  725,  905, 1042,  592,  725, 1256,  592,
     1256, 1256,  725, 1256,  908,  592, 1256,  725,  592, 1135,
     1256,  725, 1256,  787,  342, 1256,  787, 1256, 1045,  342,
     1256,  912, 1256,  905,  905,  787, 1256,  342,  787,  915,
      915,  342, 1256,  915, 1256, 1047,  787,  736, 1256,  787,
     1256,  915,  736,  915, 1049,  592,  736, 1256,  592,  180,

     1256,  736,  338,  918,  592, 1256,  736,  592, 1137,  339,
      736, 1256, 1256, 1256,  338,  181,  182, 1052,  340,  341,
     1138,  339,  915,  915, 1256, 1256,  338, 1256,  338, 1256,
      340,  341, 1139,  339,  338,  339, 1157,  180, 1256,  338,
     1256,  339,  340,  341,  340,  341,  339, 1256, 1256, 1256,
      340,  341,  338,  181,  182,  340,  341, 1256, 1256,  339,
      338, 1144, 1256,  338, 1141, 1142,  338,  339,  340,  341,
      339, 1143, 1256,  339,  560, 1256,  340,  341,  338,  340,
      341, 1256,  340,  341,  338,  339, 1256, 1256, 1147, 1256,
     1256,  339, 1256, 1256,  340,  341, 1256, 1145, 1146, 1256,

      340,  341, 1256,  787,  374, 1256,  787,  560, 1148,  374,
     1256,  939,  787, 1256,  374,  787,  942,  942,  374,  370,
      942,  787,  764, 1256,  787, 1067,  371,  764,  942, 1069,
      942,  592,  764, 1256,  592,  372,  373,  764, 1256,  945,
     1256,  370, 1256, 1150,  592, 1256,  764,  592,  371,  370,
      764, 1256, 1256, 1072,  370,  382,  371,  372,  373,  942,
      942,  371,  370, 1256, 1256,  372,  373, 1151, 1256,  371,
      372,  373, 1256,  370, 1256, 1152, 1256, 1256,  372,  373,
      371,  787, 1256,  590,  787, 1256,  180,  590,  180,  372,
      373, 1153,  180,  787,  590, 1256,  787,  180, 1154,  590,

      180,  957,  181,  182,  181,  182, 1256,  180,  181,  182,
     1155, 1256, 1156,  181,  182, 1080,  181,  182,  180, 1160,
      180, 1256, 1162,  181,  182,  180, 1256, 1256,  961, 1161,
     1256, 1256, 1158,  180,  181,  182,  181,  182, 1256, 1256,
     1164,  181,  182,  180, 1163,  180, 1256, 1165,  180,  181,
      182,  180, 1256,  180, 1256, 1166,  180, 1256, 1256,  181,
      182,  181,  182,  180,  181,  182,  180,  181,  182,  181,
      182,  180,  181,  182,  180, 1168,  180, 1256, 1256,  181,
      182,  180,  181,  182,  180, 1256,  180,  181,  182, 1256,
      181,  182,  181,  182, 1167, 1169, 1170,  181,  182,  263,

      181,  182,  181,  182,  787,  674,  264,  787, 1256, 1256,
      674, 1256, 1010, 1256, 1171,  265,  266,  263, 1172,  787,
     1256,  674,  787,  263,  264,  674, 1112, 1256,  263, 1256,
      264, 1256, 1256,  265,  266,  264, 1173, 1256, 1256,  265,
      266, 1256, 1256,  263,  265,  266,  263, 1256, 1176,  263,
      264, 1256, 1256,  264, 1174, 1256,  264, 1256, 1175,  265,
      266,  263,  265,  266, 1256,  265,  266,  180,  264,  263,
     1256, 1178,  263, 1256, 1177,  263,  264,  265,  266,  264,
      263, 1256,  264,  181,  182,  265,  266,  264,  265,  266,
     1256,  265,  266, 1181,  263, 1256,  265,  266, 1182,  263,

     1180,  264,  263, 1179, 1256,  263,  264,  263, 1256,  264,
      265,  266,  264,  263,  264,  265,  266, 1256,  265,  266,
      264,  265,  266,  265,  266, 1256, 1256,  263, 1256,  265,
      266, 1185, 1183, 1184,  264,  263, 1256,  180, 1256, 1256,
      263, 1256,  264,  265,  266, 1256, 1256,  264, 1256, 1256,
     1256,  265,  266,  181,  182, 1186,  265,  266,  787,  725,
     1256,  787, 1256, 1187,  725, 1256, 1042,  787, 1256,  725,
      787, 1188, 1189,  725, 1205,  787,  736, 1256,  787, 1256,
     1135,  736,  338, 1049,  787, 1256,  736,  787,  338,  339,
      736, 1256, 1256,  338, 1256,  339,  338, 1137,  340,  341,

      339,  338, 1256,  339,  340,  341, 1256, 1256,  339,  340,
      341, 1256,  340,  341,  338, 1256, 1193,  340,  341, 1190,
      338,  339,  338, 1194, 1256, 1191,  338,  339, 1192,  339,
      340,  341, 1256,  339, 1256, 1256,  340,  341,  340,  341,
      560,  560,  340,  341,  338, 1256,  338, 1256, 1256,  787,
      764,  339,  787,  339, 1256,  764, 1195, 1069, 1256, 1196,
      340,  341,  340,  341,  787, 1256,  764,  787, 1256,  370,
      764, 1150, 1256,  370, 1256, 1197,  371,  370, 1256, 1256,
      371, 1256, 1256, 1256,  371,  372,  373, 1256,  560,  372,
      373,  370, 1256,  372,  373,  370, 1256,  180,  371,  180,

     1198,  180,  371, 1200, 1199, 1256,  180,  372,  373,  180,
     1256,  372,  373,  181,  182,  181,  182,  181,  182, 1202,
     1256, 1203,  181,  182,  180,  181,  182, 1201,  180, 1256,
      180,  382, 1204,  180, 1256, 1256,  180, 1206,  180, 1256,
      181,  182, 1256,  180,  181,  182,  181,  182,  180,  181,
      182, 1207,  181,  182,  181,  182,  180, 1256, 1208,  181,
      182,  180, 1256,  263,  181,  182,  180, 1256,  263, 1256,
      264, 1256,  181,  182, 1209,  264, 1256,  181,  182,  265,
      266,  263,  181,  182,  265,  266, 1256, 1256,  264, 1212,
     1256, 1256,  180, 1210, 1213,  263, 1256,  265,  266, 1214,

      263, 1211,  264,  263, 1256, 1256,  263,  264,  181,  182,
      264,  265,  266,  264, 1256, 1256,  265,  266, 1256,  265,
      266,  263,  265,  266,  899, 1256,  263, 1256,  264,  263,
      899,  512, 1215,  264, 1216, 1256,  264,  265,  266, 1256,
      263, 1256,  265,  266,  263,  265,  266,  264, 1256, 1256,
      180,  264,  263, 1256, 1256,  263,  265,  266, 1256,  264,
      265,  266,  264,  263, 1218, 1217,  181,  182,  265,  266,
      264,  265,  266, 1256,  263, 1256, 1256,  263, 1256,  265,
      266,  264,  338, 1219,  264, 1220,  961, 1256, 1256,  339,
      265,  266, 1256,  265,  266,  338, 1256,  338,  340,  341,

      338, 1256,  339,  338,  339, 1221, 1256,  339, 1222, 1256,
      339,  340,  341,  340,  341, 1224,  340,  341, 1256,  340,
      341, 1223,  338, 1256,  338, 1256,  338, 1256,  370,  339,
     1256,  339,  560,  339, 1226,  371, 1256, 1225,  340,  341,
      340,  341,  340,  341,  372,  373, 1228,  370, 1256, 1227,
      370, 1256,  382,  370,  371, 1256,  180,  371, 1256, 1256,
      371,  180, 1256,  372,  373, 1256,  372,  373,  180,  372,
      373,  382,  181,  182,  180, 1230, 1256,  181,  182,  180,
     1256, 1229,  180, 1256,  181,  182,  180, 1256, 1256, 1256,
      181,  182,  821,  263, 1256,  181,  182,  263,  181,  182,

      264, 1231,  181,  182,  264,  263, 1256, 1256, 1232,  265,
      266,  263,  264,  265,  266, 1256, 1256,  263,  264, 1256,
     1256,  265,  266,  263,  264, 1256, 1256,  265,  266,  180,
      264,  263, 1233,  265,  266, 1256, 1234, 1256,  264,  265,
      266, 1256, 1235, 1236,  263,  181,  182,  265,  266, 1238,
      263,  264, 1256, 1239, 1237,  263, 1256,  264,  338, 1256,
      265,  266,  264,  338, 1256,  339,  265,  266,  899, 1256,
      339,  265,  266, 1256,  340,  341,  338, 1256,  338,  340,
      341, 1256,  338,  339, 1256,  339, 1240, 1256, 1256,  339,
     1256, 1256,  340,  341,  340,  341, 1256, 1241,  340,  341,

      338, 1256, 1242, 1256, 1256,  338, 1256,  339,  370, 1256,
     1244, 1256,  339, 1243, 1256,  371,  340,  341,  180,  560,
      180,  340,  341,  370,  372,  373, 1245,  560, 1256, 1256,
      371,  263,  382, 1256,  181,  182,  181,  182,  264,  372,
      373, 1256, 1256, 1256,  263, 1256, 1256,  265,  266, 1256,
     1256,  264, 1246, 1247,  989,  263, 1256,  263, 1256,  382,
      265,  266,  264,  263,  264, 1256, 1248, 1256,  263, 1256,
      264,  265,  266,  265,  266,  264, 1256, 1256, 1256,  265,
      266, 1249,  263, 1256,  265,  266,  263, 1256, 1250,  264,
      338, 1256,  687,  264,  338, 1256, 1256,  339,  265,  266,

     1256,  339,  265,  266, 1256, 1256,  340,  341,  338, 1256,
      340,  341,  560,  338, 1256,  339,  560, 1256, 1256,  338,
      339,  180, 1256, 1256,  340,  341,  339, 1256, 1256,  340,
      341, 1256, 1256,  263, 1251,  340,  341,  181,  182,  560,
      264, 1256, 1256, 1256,  263, 1256,  263, 1256,  560,  265,
      266,  264, 1252,  264, 1256, 1256, 1256,  263, 1256,  338,
      265,  266,  265,  266,  264,  263,  339, 1256, 1256, 1256,
      338, 1256,  264,  265,  266,  340,  341,  339, 1253, 1256,
     1256,  265,  266,  263, 1256, 1256,  340,  341, 1256, 1256,
      264, 1254, 1256, 1256, 1256, 1256, 1255, 1256, 1256,  265,

      266,  560,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  179,  179, 1256,
     1256,  179,  179,  179,  183, 1256,  183,  183,  183,  183,
      183,  183,  183,  183,  262,  262, 1256, 1256,  262,  262,
      262,  267, 1256,  267,  267,  267,  267,  267,  267,  267,
      267,  316,  316, 1256, 1256,  316,  316,  316,  321, 1256,

      321,  321,  321,  321,  321,  321,  321,  321,  337,  337,
     1256, 1256,  337,  337,  337,  342, 1256,  342,  342,  342,
      342,  342,  342,  342,  342,  369,  369, 1256, 1256,  369,
      369,  369,  374, 1256,  374,  374,  374,  374,  374,  374,
      374,  374,  400, 1256, 1256, 1256,  400, 1256,  400,  400,
     1256,  400,  400,  404, 1256, 1256,  404,  404, 1256,  404,
      404,  404,  404,  404,  405,  405, 1256,  405,  405,  405,
      405,  405,  405,  405,  405,  406, 1256,  406,  406, 1256,
     1256,  406, 1256,  406,  408,  408,  408,  408,  408, 1256,
      408,  494,  494,  494,  494,  494, 1256,  494,  538,  538,

      538,  538,  538, 1256,  538,  548,  548,  548,  548,  548,
     1256,  548,  574,  574,  574,  574,  574, 1256,  574,  590,
     1256,  590,  590,  590,  590,  590,  590,  590,  590,  593,
     1256, 1256, 1256,  593,  593,  593,  593,  593,  593,  593,
      674, 1256,  674,  674,  674,  674,  674,  674,  674,  674,
      676, 1256, 1256, 1256,  676,  676,  676,  676,  676,  676,
      676,  725, 1256,  725,  725,  725,  725,  725,  725,  725,
      725,  727, 1256, 1256, 1256,  727,  727,  727,  727,  727,
      727,  727,  592, 1256, 1256, 1256,  592,  592,  592,  592,
      592,  592,  592,  736, 1256,  736,  736,  736,  736,  736,

      736,  736,  736,  738, 1256, 1256, 1256,  738,  738,  738,
      738,  738,  738,  738,  764, 1256,  764,  764,  764,  764,
      764,  764,  764,  764,  766, 1256, 1256, 1256,  766,  766,
      766,  766,  766,  766,  766,  785,  785, 1256,  785,  785,
      785,  785,  785,  785,  785,  785,  788, 1256, 1256, 1256,
      788,  788,  788,  788,  788,  788,  788,  793, 1256, 1256,
     1256,  793,  793,  793,  793,  793,  793,  793,  857,  857,
     1256,  857,  857,  857,  857,  857,  857,  857,  857,  859,
     1256, 1256, 1256,  859,  859,  859,  859,  859,  859,  859,
      865, 1256, 1256, 1256,  865,  865,  865,  865,  865,  865,

      865,  900,  900, 1256,  900,  900,  900,  900,  900,  900,
      900,  900,  902, 1256, 1256, 1256,  902,  902,  902,  902,
      902,  902,  902,  908, 1256, 1256, 1256,  908,  908,  908,
      908,  908,  908,  908,  787, 1256, 1256, 1256,  787,  787,
      787,  787,  787,  787,  787,  910,  910, 1256,  910,  910,
      910,  910,  910,  910,  910,  910,  912, 1256, 1256, 1256,
      912,  912,  912,  912,  912,  912,  912,  918, 1256, 1256,
     1256,  918,  918,  918,  918,  918,  918,  918,  937,  937,
     1256,  937,  937,  937,  937,  937,  937,  937,  937,  939,
     1256, 1256, 1256,  939,  939,  939,  939,  939,  939,  939,

      945, 1256, 1256, 1256,  945,  945,  945,  945,  945,  945,
      945,  954,  954, 1256,  954,  954,  954,  954,  954,  954,
      954,  954,  957, 1256, 1256, 1256,  957,  957,  957,  957,
      957,  957,  957,  959,  959, 1256,  959,  959,  959,  959,
      959,  959,  959,  959, 1007, 1007, 1256, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1010, 1256, 1256, 1256, 1010,
     1010, 1010, 1010, 1010, 1010, 1010,  676, 1256, 1256, 1256,
      676,  676,  676,  676,  676,  676,  676, 1012, 1012, 1256,
     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012,  262,  262,
     1256, 1256,  262,  262,  262, 1039, 1039, 1256, 1039, 1039,

     1039, 1039, 1039, 1039, 1039, 1039, 1042, 1256, 1256, 1256,
     1042, 1042, 1042, 1042, 1042, 1042, 1042,  727, 1256, 1256,
     1256,  727,  727,  727,  727,  727,  727,  727, 1044, 1044,
     1256, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,  910,
      910, 1256,  910,  910,  910,  910,  910,  910,  910,  910,
      912, 1256, 1256, 1256,  912,  912,  912,  912,  912,  912,
      912, 1046, 1046, 1256, 1046, 1046, 1046, 1046, 1046, 1046,
     1046, 1046, 1049, 1256, 1256, 1256, 1049, 1049, 1049, 1049,
     1049, 1049, 1049,  738, 1256, 1256, 1256,  738,  738,  738,
      738,  738,  738,  738, 1051, 1051, 1256, 1051, 1051, 1051,

     1051, 1051, 1051, 1051, 1051,  337,  337, 1256, 1256,  337,
      337,  337,  937,  937, 1256,  937,  937,  937,  937,  937,
      937,  937,  937,  939, 1256, 1256, 1256,  939,  939,  939,
      939,  939,  939,  939, 1066, 1066, 1256, 1066, 1066, 1066,
     1066, 1066, 1066, 1066, 1066, 1069, 1256, 1256, 1256, 1069,
     1069, 1069, 1069, 1069, 1069, 1069,  766, 1256, 1256, 1256,
      766,  766,  766,  766,  766,  766,  766, 1071, 1071, 1256,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,  369,  369,
     1256, 1256,  369,  369,  369,  954,  954, 1256,  954,  954,
      954,  954,  954,  954,  954,  954,  787, 1256, 1256, 1256,

      787,  787,  787,  787,  787,  787,  787,  788, 1256, 1256,
     1256,  788,  788,  788,  788,  788,  788,  788, 1079, 1079,
     1256, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,  959,
      959, 1256,  959,  959,  959,  959,  959,  959,  959,  959,
      179,  179, 1256, 1256,  179,  179,  179, 1111, 1111, 1256,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1134, 1134,
     1256, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1136,
     1136, 1256, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1149, 1149, 1256, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149,   23, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,

     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256
    } ;

static yyconst flex_int16_t yy_chk[8449] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,   19,   25,   19,   19,    7,   25,
       25,    7,    8,    8,    8,    8,    8,    8,   20,  178,
       20,   20,    8,  178,  178,    8,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   13,   13,   13,  942,   15,   15,   28,   15,   15,
       15,  915,   15,   16,   16,   29,   16,   16,   16,   62,
       16,  905,   90,   28,   28,   13,   15,   13,  862,   29,
      793,   13,   13,   62,   16,   13,   90,   13,   13,   31,
       13,   13,   31,   13,   13,   17,   17,  790,   17,   17,
       18,   18,   17,   18,   18,   31,   31,   18,   21,   33,
       21,   21,   21,   21,  109,   33,   21,   21,   21,   34,
      138,   35,  768,   36,  596,   33,   33,   37,  109,  596,
       21,   36,   36,   39,  138,   34,   34,   35,   35,   36,

       36,   38,   38,   37,   37,   38,  175,  175,  766,   39,
       39,  180,   39,   38,   39,   38,  184,  184,  740,   40,
       21,   21,   39,   21,   22,  180,   22,   22,   22,   22,
       39,   41,   22,   22,   22,   40,   40,  268,  268,  322,
      322,  738,   42,  734,   38,   38,   22,   41,   41,  175,
      175,   40,   41,   43,   40,   45,  733,   40,   42,   42,
       41,   41,  729,   41,   42,   47,   41,   44,  680,   43,
       43,   45,   45,  680,   42,   45,   22,   22,  727,   22,
       42,   47,   47,   44,   44,   43,  183,   43,   43,   46,
       45,   47,   48,  263,   43,   49,   44,   44,  731,   44,

      183,  678,   44,  731,   44,   46,   46,  263,   48,   48,
       48,   49,   49,   49,   49,   50,  267,   49,  676,   51,
       46,   49,  593,   52,   48,  343,  343,   49,   48,   53,
      267,   50,   50,   50,  589,   51,   51,   50,   51,   52,
       52,   52,   51,   56,  588,   53,   53,   50,   54,   51,
       51,  742,   51,   50,  547,   52,  742,   57,   52,   56,
       56,   52,  317,   52,   54,   54,   54,   53,   56,   56,
       54,  321,  546,   57,   57,   58,  317,   54,   56,  163,
      338,  163,   59,  375,  375,  321,   54,   55,   57,   61,
      545,   58,   58,   58,  338,  163,   61,   58,   59,   59,

      342,   58,  544,   55,   55,   61,   61,   59,   59,   55,
       60,  543,   55,   64,  342,  179,   64,   55,  770,   55,
       64,   65,   55,  770,   55,   55,   60,   60,   65,   64,
       64,  179,  179,  542,   60,   66,  399,   65,   65,   67,
       60,   66,   66,  398,  370,  374,   67,   66,  336,   67,
       68,   66,   66,   69,  335,   67,   67,   68,  370,  374,
       69,  334,   68,  409,   70,   70,   68,   68,   70,   69,
       69,  495,  333,   71,  107,   73,   70,  409,   70,   75,
       71,   74,   73,  181,  106,  495,   75,   76,   74,   71,
       71,   73,   73,   23,   76,   75,   75,   74,   74,  181,

      181,   73,  539,   76,   76,   76,    0,   70,   70,   71,
       72,   75,   74,   86,   75,   74,  539,   72,   78,  549,
       86,    0,   74,    0,  575,   78,   72,   72,    0,   86,
       86,    0,   72,  549,   78,   78,   79,   78,  575,   72,
       72,    0,   72,   79,   72,   72,  590,   72,   77,   86,
       87,    0,   79,   79,   79,   77,   80,   87,   79,    0,
      590,  591,  591,   80,   77,   77,   87,   87,   87,   77,
       81,   77,   80,   80,   82,   80,    0,   81,   80,   77,
      185,   82,  196,  185,   77,   77,   81,   81,   83,   81,
       82,   82,   80,  674,   84,   83,  185,  185,  196,  196,

        0,   84,  189,   81,   83,   83,   82,  674,   85,   82,
       84,   84,  675,  675,   83,   85,    0,   83,  189,  189,
        0,   88,  726,  726,   85,   85,   84,   84,   88,   89,
       85,   84,   84,   88,  189,   96,   89,   88,   88,  725,
       85,   92,   96,   93,   92,   89,   89,    0,   92,   93,
       93,   96,   96,  725,    0,  190,    0,   92,   92,   93,
       93,   94,   94,   94,   94,   94,   94,    0,   94,    0,
       95,  190,  190,   97,    0,   94,    0,   95,   95,   95,
       97,   99,  736,  193,   94,   94,   95,   95,   99,   97,
       97,   98,   98,    0,  190,   98,  736,   99,   99,  193,

      193,  195,    0,   98,  193,   98,  102,  102,  102,  102,
      102,  102,   99,  737,  737,  202,  102,  195,  195,  102,
      104,  104,  104,  104,  104,  104,    0,  195,  764,    0,
      104,  202,  202,  104,   98,   98,  105,  105,  105,  105,
      105,  105,  764,  108,    0,  112,  105,  114,  112,  105,
      108,  115,  112,  114,  114,  765,  765,  192,  115,  108,
      108,  112,  112,  114,  114,  116,    0,  115,  115,  120,
        0,  117,  116,  192,  192,    0,  120,    0,  117,    0,
        0,  116,  116,  117,    0,  120,  120,  117,  117,  121,
      121,  122,  379,  121,  192,  124,    0,  123,  122,  379,

      379,  121,  124,  121,  123,  379,  194,  122,  122,  125,
        0,  124,  124,  123,  123,    0,  125,    0,    0,    0,
        0,  124,  194,  194,    0,  125,  125,  122,  194,  123,
      126,    0,  121,  121,  123,  127,    0,  126,  134,    0,
        0,  125,  127,  128,  125,  134,  126,  126,  126,    0,
      128,  127,  127,  773,  134,  134,  127,  129,  127,  128,
      128,  128,  773,    0,  129,  128,  773,  773,  130,  773,
      134,    0,  127,  129,  129,  130,    0,    0,    0,  129,
        0,  131,    0,  132,  130,  130,  186,  130,  131,  133,
      132,  205,  186,  129,  137,    0,  133,  131,  131,  132,

      132,  137,  186,  186,    0,  133,  133,  205,  205,  132,
      137,  137,  139,  131,  140,  139,  131,  141,    0,  139,
      140,  140,  133,    0,  141,  142,  133,  205,  139,  139,
      140,  140,  142,  141,  141,  143,  143,  145,  198,  143,
        0,  142,  142,    0,  145,  145,  145,  143,    0,  143,
      145,  146,    0,  147,  198,  198,  145,  148,  146,  198,
      147,    0,    0,    0,  148,    0,    0,  146,  146,  147,
      147,    0,  147,  148,  148,    0,  148,    0,  143,  143,
      144,    0,  146,  149,    0,    0,    0,  144,  150,    0,
      149,  151,    0,  148,    0,  150,  144,  144,  151,  149,

      149,    0,  144,    0,  150,  150,    0,  151,  151,  144,
      144,  152,    0,  187,  144,  144,  149,  153,  152,  154,
      151,  187,  187,  150,  153,  197,  154,  152,  152,  187,
      187,    0,    0,  153,  153,  154,  154,  154,    0,    0,
        0,  197,  197,  152,    0,    0,    0,  197,    0,  152,
        0,    0,    0,  153,  155,  155,  155,  155,  155,  155,
        0,  182,  182,  182,  155,    0,  182,  155,  157,  157,
      157,  157,  157,  157,  182,    0,  182,    0,  157,    0,
      199,  157,  158,  158,  158,  158,  158,  158,    0,  188,
      188,  191,  158,  188,    0,  158,  199,  199,    0,  200,

        0,  188,    0,  188,    0,  182,  182,  191,  191,  199,
      199,  199,  201,    0,    0,  200,  200,  191,  199,  203,
      191,  200,  204,    0,  206,    0,    0,  207,  201,  201,
        0,  201,  188,  188,  208,  203,  203,  209,  204,  204,
      206,  206,  210,  207,  207,  204,  206,  207,  201,  203,
      208,  208,  208,  209,  209,    0,  211,    0,  210,  210,
        0,    0,    0,  212,  207,  213,    0,  214,    0,  209,
      215,    0,  211,  211,    0,  216,    0,  210,  211,  212,
      212,  213,  213,  214,  214,  214,  215,  215,  212,    0,
      215,  216,  216,  217,    0,    0,    0,  218,    0,    0,

      219,    0,  220,    0,  221,    0,  216,  222,    0,  217,
      217,  223,  217,  218,  218,  218,  219,  219,  220,  220,
      221,  221,    0,  222,  222,  224,    0,  223,  223,  218,
        0,  225,    0,  226,    0,    0,    0,  222,  228,  220,
      221,  224,  224,  227,    0,  229,  224,  225,  225,  226,
      226,    0,  223,  230,  228,  228,    0,    0,  231,  227,
      227,  229,  229,  232,    0,  233,  225,  234,  228,  230,
      230,  236,  229,  226,  231,  231,  230,  235,  227,  232,
      232,  233,  233,  234,  234,    0,    0,  236,  236,  237,
      231,  238,    0,  235,  235,    0,    0,  236,  239,    0,

      240,  233,  234,  236,  234,  237,  237,  238,  238,    0,
      235,  241,  238,  242,  239,  239,  240,  240,    0,  243,
        0,    0,    0,  244,  239,  237,  245,  241,  241,  242,
      242,    0,  241,    0,    0,  243,  243,  240,  246,  244,
      244,  244,  245,  245,    0,  247,    0,  241,  243,  242,
      241,  241,  244,    0,  246,  246,  248,    0,  245,  249,
      244,  247,  247,    0,    0,    0,  250,    0,    0,    0,
      246,  251,  248,  248,  252,  249,  249,  249,  248,    0,
      247,  249,  250,  250,  253,  250,    0,  251,  251,  254,
      252,  252,  255,    0,  256,    0,  250,  257,    0,    0,

      253,  253,  253,    0,  252,  254,  254,  259,  255,  255,
      256,  256,    0,  257,  257,  254,  258,    0,  408,  257,
      260,    0,    0,  259,  259,  261,  260,  255,    0,  256,
        0,    0,  258,  258,  408,  408,  260,  260,  258,  262,
        0,  261,  261,  261,  259,  264,  262,  265,  258,    0,
        0,    0,  264,    0,  265,  262,  262,    0,    0,    0,
        0,  264,  264,  265,  265,  266,  266,  266,  269,    0,
      266,  269,  271,    0,  272,  269,  270,    0,  266,  271,
      266,  272,  270,  270,  269,  269,    0,  273,  271,  271,
      272,  272,  270,  270,  273,    0,    0,    0,    0,    0,

      275,  274,  274,  273,  273,  274,  412,  275,    0,  266,
      266,    0,  276,  274,  277,  274,  275,  275,  278,  276,
        0,  277,  412,  412,    0,  278,  279,    0,  276,  276,
      277,  277,  277,  279,  278,  278,  275,  278,    0,    0,
        0,  412,  279,  279,  274,  274,  276,  280,    0,    0,
        0,  281,    0,  282,  280,  283,  279,  279,  281,  415,
      282,    0,  283,  280,  280,    0,  284,  281,  281,  282,
      282,  283,  283,  284,  285,  415,  415,  286,    0,    0,
      281,  285,  284,  284,  286,  282,    0,  284,  287,    0,
      285,  285,  283,  286,  286,  287,  288,    0,    0,  289,

        0,  291,    0,  288,  287,  287,  289,    0,  291,  413,
        0,    0,  288,  288,  286,  289,  289,  291,  291,    0,
        0,    0,  292,  287,  290,  413,  413,    0,  288,  292,
      290,  290,  421,    0,  290,  413,  289,  293,  292,  292,
      290,  290,  292,  294,  293,  295,  290,    0,  421,  421,
      294,  296,  295,  293,  293,    0,  297,    0,  296,  294,
      294,  295,  295,  297,  298,  294,    0,  296,  296,    0,
      296,  298,  297,  297,  299,  300,  299,  295,  301,  297,
      298,  298,  300,  299,  299,  301,    0,    0,  296,  299,
      299,  300,  300,  303,  301,  301,  302,    0,  414,  300,

      303,  304,  302,  302,  305,  301,    0,    0,  304,  303,
      303,  305,  302,  302,  414,  414,  414,  304,  304,  306,
      305,  305,  303,  304,  307,    0,  306,  308,  305,    0,
      309,  307,  302,  304,  308,  306,  306,  309,  310,    0,
      307,  307,    0,  308,  308,  310,  309,  309,    0,  308,
        0,  311,    0,  312,  310,  310,  313,  310,  311,  307,
      312,    0,    0,  313,  314,  309,    0,  311,  311,  312,
      312,  314,  313,  313,    0,    0,  315,    0,  316,    0,
      314,  314,  313,  315,  318,  316,  311,    0,    0,  319,
        0,  318,  315,  315,  316,  316,  319,    0,    0,  314,

      318,  318,  320,  320,  320,  319,  319,  320,    0,  323,
      328,  328,  323,  324,  328,  320,  323,  320,    0,  324,
      324,  329,  328,    0,  328,  323,  323,    0,  329,  324,
      324,  325,  325,  325,  325,  325,  325,  329,  329,  418,
        0,  325,  327,    0,  325,    0,  320,  320,    0,  327,
      327,  327,    0,  328,  328,  418,  418,  418,  327,  327,
      330,  330,  330,  330,  330,  330,    0,  341,  341,  341,
      330,    0,  341,  330,  332,  332,  332,  332,  332,  332,
      341,  337,  341,  339,  332,  340,    0,  332,  337,    0,
      339,    0,  340,    0,    0,    0,    0,  337,  337,  339,

      339,  340,  340,  344,    0,    0,  344,  345,    0,  346,
      344,  341,  341,  345,  345,    0,  346,  347,  347,  344,
      344,  347,    0,  345,  345,  346,  346,  348,    0,  347,
      350,  347,  351,    0,  348,  349,    0,  350,  352,  351,
      416,    0,  349,  348,  348,  352,  350,  350,  351,  351,
        0,  349,  349,    0,  352,  352,  416,  416,    0,    0,
      347,  347,  350,  348,  353,  349,  349,  354,    0,  351,
      356,  353,  355,  352,  354,  416,    0,  356,    0,  355,
      353,  353,  355,  354,  354,  357,  356,  356,  355,  355,
        0,    0,  357,  358,  355,    0,  353,    0,  359,    0,

      358,  357,  357,  417,  354,  359,  360,  357,    0,  358,
      358,  361,    0,  360,  359,  359,    0,  362,  361,  417,
      417,  359,  360,  360,  362,    0,    0,  361,  361,    0,
      358,  363,    0,  362,  362,  361,  360,  425,  363,  364,
        0,    0,  360,  360,  362,  417,  364,  363,  363,    0,
      365,    0,    0,  425,  425,  364,  364,  365,    0,    0,
      363,  364,  366,    0,  367,    0,  365,  365,  425,  366,
      368,  367,    0,    0,  365,  369,    0,  368,  366,  366,
      367,  367,  369,    0,  366,  420,  368,  368,  371,    0,
      372,  369,  369,    0,    0,  371,    0,  372,    0,  367,

      422,  420,  420,  420,  371,  371,  372,  372,  373,  373,
      373,  376,    0,  373,  376,    0,  422,  422,  376,  377,
        0,  373,    0,  373,    0,  377,  377,  376,  376,  378,
      378,  380,  422,  378,    0,  377,  377,    0,  380,  381,
        0,  378,    0,  378,  382,    0,  381,  380,  380,  380,
      383,  382,  373,  373,    0,  381,  381,  383,  381,    0,
      382,  382,    0,    0,  384,    0,  383,  383,    0,    0,
      385,  384,  378,  378,    0,  386,    0,  385,    0,  383,
      384,  384,  386,  387,    0,  384,  385,  385,    0,  388,
      387,  386,  386,    0,  389,  386,  388,    0,    0,  387,

      387,  389,  390,    0,    0,  388,  388,  385,    0,  390,
      389,  389,    0,  388,    0,  387,  391,    0,  390,  390,
      392,    0,    0,  391,  393,    0,    0,  392,  394,    0,
      389,  393,  391,  391,  390,  394,  392,  392,    0,  392,
      393,  393,    0,  419,  394,  394,    0,    0,    0,    0,
      393,  391,  395,  395,  395,  395,  395,  395,  427,  419,
      419,  423,  395,  394,    0,  395,  397,  397,  397,  397,
      397,  397,  419,    0,  427,  427,  397,  423,  423,  397,
      410,  426,    0,  410,    0,    0,    0,    0,  410,  410,
      410,  423,  424,  410,  423,    0,  427,  426,  426,  428,

      410,  410,  426,  410,  410,  410,  429,    0,  424,  424,
      430,    0,  424,  424,  431,  428,  428,    0,    0,  433,
        0,  428,  429,  429,  432,    0,  430,  430,    0,  424,
      431,  431,  410,  410,  411,  433,  433,  411,    0,  429,
      432,  432,  411,  411,  411,  434,    0,  411,  433,  436,
        0,    0,  435,    0,  411,  411,  438,  411,  411,  411,
      437,  434,  434,  441,  432,  436,  436,  434,  435,  435,
      436,    0,  438,  438,    0,  439,  437,  437,  440,  441,
      441,  442,    0,  443,  441,  444,  411,  411,    0,  435,
      437,  439,  439,  445,  440,  440,  438,  442,  442,  443,

      443,  444,  444,  442,  443,  446,    0,  440,  439,  445,
      445,  447,    0,  445,  448,    0,  449,    0,  444,  451,
        0,  446,  446,  450,    0,  452,    0,  447,  447,  454,
      448,  448,  449,  449,  453,  451,  451,  448,    0,  450,
      450,  452,  452,  447,  455,  454,  454,  456,  451,    0,
      453,  453,  457,  453,  449,  452,  458,    0,  450,  459,
      455,  455,  460,  456,  456,  455,  461,    0,  457,  457,
      462,    0,  458,  458,  457,  459,  459,    0,  460,  460,
      459,  458,  461,  461,  463,    0,  462,  462,  457,  461,
      464,    0,  465,  460,  466,  462,  467,    0,  468,    0,

      463,  463,    0,  461,    0,  469,  464,  464,  465,  465,
      466,  466,  467,  467,  468,  468,    0,    0,  465,  470,
      468,  469,  469,    0,    0,  471,    0,  464,  472,    0,
        0,    0,  466,  473,  467,  470,  470,  474,    0,    0,
      469,  471,  471,  475,  472,  472,    0,  471,  476,  473,
      473,  477,    0,  474,  474,  473,  478,    0,  479,  475,
      475,  480,    0,  472,  476,  476,    0,  477,  477,  476,
      481,    0,  478,  478,  479,  479,  485,  480,  480,    0,
        0,  482,    0,  475,  484,    0,  481,  481,  477,    0,
        0,  483,  485,  485,  480,  479,  478,  482,  482,  485,

      484,  484,  486,    0,  484,  487,  481,  483,  483,  488,
        0,  482,  489,  483,  490,    0,  491,  483,  486,  486,
      492,  487,  487,  493,  487,  488,  488,    0,  489,  489,
      490,  490,  491,  491,    0,    0,  492,  492,  486,  493,
      493,  491,  598,  490,    0,  494,    0,  489,  498,  488,
        0,  492,  494,  602,    0,  498,    0,    0,  598,  598,
      493,  494,  494,  496,  498,  498,  496,    0,    0,  602,
      602,  496,  496,  496,  499,    0,  496,    0,  496,  598,
      498,  499,  500,  496,  496,    0,  496,  496,  496,  500,
      499,  499,  502,    0,  502,    0,    0,  503,  500,  500,

        0,    0,  502,    0,  503,  501,    0,  502,  502,    0,
      499,    0,  501,  503,  503,  496,  496,  497,    0,    0,
      497,  501,  501,    0,    0,  497,  497,  497,    0,  504,
      497,    0,  497,    0,    0,  501,  504,  497,  497,    0,
      497,  497,  497,  505,    0,  504,  504,  506,    0,  506,
      505,    0,    0,    0,    0,    0,  506,  506,  506,  505,
      505,  507,  506,  506,  504,  506,    0,    0,  507,  497,
      497,    0,  508,    0,  509,    0,    0,  507,  507,  508,
      505,  509,    0,  507,    0,    0,    0,    0,  508,  508,
      509,  509,    0,  510,    0,    0,  511,    0,  512,    0,

      510,    0,  508,  511,  509,  512,    0,    0,    0,  510,
      510,    0,  511,  511,  512,  512,  513,  509,  510,  514,
        0,  511,  515,  513,  516,    0,  514,  517,    0,  515,
        0,  516,  513,  513,  517,  514,  514,    0,  515,  515,
      516,  516,    0,  517,  517,  518,  513,  513,  514,  517,
        0,    0,  518,  519,    0,    0,  520,  515,  521,    0,
      519,  518,  518,  520,  522,  521,    0,  518,  605,  519,
      519,  522,  520,  520,  521,  521,  523,    0,    0,  524,
      522,  522,  522,  523,  605,  605,  524,    0,  520,  599,
      519,  525,  523,  523,  521,  524,  524,  526,  525,    0,

        0,  524,  527,  605,  526,  599,  599,  525,  525,  527,
      528,    0,  523,  526,  526,  529,  525,  528,  527,  527,
        0,  530,  529,    0,    0,  599,  528,  528,  530,    0,
      528,  529,  529,  531,    0,    0,    0,  530,  530,    0,
      531,  532,    0,    0,  527,    0,  530,  533,  532,  531,
      531,    0,  529,    0,  533,  534,    0,  532,  532,    0,
      535,  532,  534,  533,  533,  533,  536,  535,    0,    0,
      531,  534,  534,  536,    0,  534,  535,  535,  537,    0,
        0,    0,  536,  536,    0,  537,  538,    0,    0,  548,
      535,  534,  553,  538,  537,  537,  548,  536,    0,  553,

      552,    0,  538,  538,  557,  548,  548,  552,  553,  553,
        0,  557,    0,    0,  537,  540,  552,  552,  540,    0,
      557,  557,  553,  540,  540,  540,  554,    0,  540,  600,
      540,    0,  552,  554,  557,  540,  540,  556,  540,  540,
      540,  555,  554,  554,  556,  600,  600,    0,  555,  554,
        0,    0,    0,  556,  556,    0,    0,  555,  555,    0,
        0,    0,  554,    0,  558,  600,    0,  540,  540,  541,
      601,  558,  541,    0,  556,    0,  555,  541,  541,  541,
      558,  558,  541,    0,  541,  614,  601,  601,  559,  541,
      541,    0,  541,  541,  541,  559,  601,    0,    0,  560,

        0,  614,  614,  563,  559,  559,  560,  558,    0,  614,
      563,  561,    0,  559,    0,  560,  560,    0,  561,  563,
      563,  541,  541,  550,    0,  563,  550,  561,  561,    0,
        0,  550,  550,  550,    0,    0,  550,    0,  550,    0,
        0,  561,  561,  550,  550,  564,  550,  550,  550,  562,
        0,  565,  564,  566,    0,  610,  562,  568,  565,    0,
      566,  564,  564,    0,  568,  562,  562,  565,  565,  566,
      566,  610,  610,  568,  568,  550,  550,  551,    0,  568,
      551,  610,  564,  565,  562,  551,  551,  551,  567,  566,
      551,    0,  551,    0,  611,  567,  569,  551,  551,    0,

      551,  551,  551,  569,  567,  567,  567,  570,    0,  571,
      611,  611,  569,  569,  570,  572,  571,    0,    0,    0,
      611,    0,  572,  570,  570,  571,  571,  570,  613,  551,
      551,  572,  572,  573,  571,  572,  574,    0,  569,  580,
      573,    0,  603,  574,  613,  613,  580,    0,    0,  573,
      573,  573,  574,  574,  576,  580,  580,  576,  603,  603,
        0,  580,  576,  576,  576,  578,  613,  576,  607,  576,
      603,    0,  578,  581,  576,  576,  582,  576,  576,  576,
      581,  578,  578,  582,  607,  607,  607,  583,    0,  581,
      581,    0,  582,  582,  583,    0,    0,    0,  584,    0,

        0,  578,  581,  583,  583,  584,  576,  576,  577,  604,
        0,  577,  582,    0,  584,  584,  577,  577,  577,    0,
      585,  577,    0,  577,  583,  604,  604,  585,  577,  577,
        0,  577,  577,  577,  586,  584,  585,  585,  587,    0,
      585,  586,  606,    0,    0,  587,  604,    0,    0,    0,
      586,  586,    0,    0,  587,  587,  585,    0,  606,  606,
      577,  577,  579,    0,  608,  586,  609,  594,  594,  579,
      594,    0,    0,  594,  587,  594,    0,  606,  579,  579,
      608,  608,  609,  609,    0,  579,    0,  612,  609,  594,
      608,  615,  579,    0,  579,    0,  608,  616,  579,  579,

      617,  579,  595,  612,  612,  595,    0,  615,  615,    0,
      595,  595,  595,  616,  616,  595,  617,  617,    0,    0,
      615,    0,  618,  595,  612,  595,  595,  595,  622,    0,
      619,    0,    0,  620,    0,  617,  627,    0,  618,  618,
        0,    0,    0,    0,  622,  622,  619,  619,    0,  620,
      620,  623,  627,  627,  595,  595,  597,  621,    0,  597,
      618,  619,    0,  622,  597,  597,  597,  623,  623,  597,
      620,    0,  624,  621,  621,  621,  623,  597,  625,  597,
      597,  597,  626,    0,  628,    0,    0,  629,  624,  624,
      630,    0,    0,    0,  625,  625,    0,    0,  626,  626,

      628,  628,  631,  629,  629,  632,  630,  630,  597,  597,
      624,  626,  629,  633,  625,  634,    0,    0,  631,  631,
      635,  632,  632,  637,    0,    0,  636,    0,  631,  633,
      633,  634,  634,  638,  632,  639,  635,  635,  635,  637,
      637,  634,  636,  636,  640,  633,  641,    0,  636,  638,
      638,  639,  639,  642,    0,  643,    0,  639,  644,    0,
      640,  640,  641,  641,  638,    0,  645,    0,  646,  642,
      642,  643,  643,    0,  644,  644,  647,    0,  648,    0,
      644,  643,  645,  645,  646,  646,  649,  645,  650,    0,
      642,    0,  647,  647,  648,  648,  651,    0,  648,    0,

        0,  652,  649,  649,  650,  650,  650,  653,  647,  654,
        0,    0,  651,  651,  655,    0,  649,  652,  652,  656,
        0,    0,  651,  653,  653,  654,  654,  653,  657,  654,
      655,  655,  658,    0,  659,  656,  656,  652,    0,    0,
      660,    0,  661,    0,  657,  657,    0,    0,  658,  658,
      659,  659,    0,  662,    0,  656,  660,  660,  661,  661,
      661,    0,  663,  657,  664,    0,  665,    0,  658,  662,
      662,  666,    0,  667,    0,  668,    0,  660,  663,  663,
      664,  664,  665,  665,  669,    0,  664,  666,  666,  667,
      667,  668,  668,  663,    0,    0,  670,    0,  671,    0,

      669,  669,    0,  672,    0,  667,  669,  673,  665,    0,
        0,  668,  670,  670,  671,  671,    0,    0,  670,  672,
      672,  672,  682,  673,  673,  677,  677,  673,  677,  682,
        0,  677,    0,  677,    0,    0,    0,  684,  682,  682,
        0,    0,  682,  683,  684,    0,    0,  677,  679,  795,
      683,  679,    0,  684,  684,    0,  679,  679,  679,  683,
      683,  679,    0,  679,    0,  795,  795,  685,    0,  679,
      686,  679,  679,  679,  685,  684,    0,  686,  687,  683,
        0,  688,    0,  685,  685,  687,  686,  686,  688,    0,
        0,    0,  689,  685,  687,  687,    0,  688,  688,  689,

      679,  679,  681,    0,    0,  681,    0,  686,  689,  689,
      681,  681,  681,  688,  690,  681,    0,  691,    0,    0,
      799,  690,  689,  681,  691,  681,  681,  681,    0,  689,
      690,  690,  692,  691,  691,  693,  799,  799,    0,  692,
        0,  799,  693,  694,  690,    0,  695,  691,  692,  692,
      694,  693,  693,  695,  681,  681,    0,  692,    0,  694,
      694,  696,  695,  695,  695,  697,    0,  800,  696,  698,
        0,    0,  697,  699,  694,    0,  698,  696,  696,    0,
      699,  697,  697,  800,  800,  698,  698,  697,    0,  699,
      699,  698,  700,  800,  701,    0,  702,    0,  797,  700,

      703,  701,    0,  702,    0,  699,    0,  703,  700,  700,
      701,  701,  702,  702,  797,  797,  703,  703,  703,  704,
      797,  705,    0,  706,    0,  700,  704,    0,  705,  801,
      706,  701,    0,    0,  702,  704,  704,  705,  705,  706,
      706,    0,  707,    0,  710,  801,  801,  708,  704,  707,
      709,  710,    0,    0,  708,    0,    0,  709,  707,  707,
      710,  710,  705,  708,  708,  708,  709,  709,  711,    0,
      712,  709,    0,  713,    0,  711,  714,  712,    0,  802,
      713,    0,    0,  714,  711,  711,  712,  712,  711,  713,
      713,    0,  714,  714,  715,  802,  802,  716,  714,    0,

        0,  715,  712,  713,  716,  717,    0,    0,  720,    0,
      715,  715,  717,  716,  716,  720,  715,    0,    0,  718,
        0,  717,  717,  719,  720,  720,  718,  798,    0,    0,
      719,  721,    0,    0,  716,  718,  718,  720,  721,  719,
      719,  717,    0,  798,  798,  718,  798,  721,  721,  722,
        0,  723,    0,    0,  724,  722,  722,    0,  723,    0,
      719,  724,    0,  721,    0,  722,  722,  723,  723,    0,
      724,  724,    0,  728,  728,  723,  728,    0,    0,  728,
        0,  728,    0,    0,  804,  739,  739,    0,  739,    0,
        0,  739,    0,  739,    0,  728,  730,    0,    0,  730,

      804,  804,    0,    0,  730,  730,  730,  739,  744,  730,
        0,  730,    0,  804,  809,  744,  745,  730,    0,  730,
      730,  730,  811,  745,  744,  744,    0,  747,  744,  746,
      809,  809,  745,  745,  747,  748,  746,    0,  811,  811,
      750,    0,  748,  747,  747,  746,  746,  750,  730,  730,
      732,  748,  748,  732,  745,  746,  750,  750,  732,  732,
      732,  749,  750,  732,  747,  751,    0,  748,  749,  813,
        0,  732,  751,  732,  732,  732,  752,  749,  749,  749,
        0,  751,  751,  752,  753,  813,  813,  751,    0,  755,
        0,  753,  752,  752,  796,  813,  755,    0,    0,    0,

      753,  753,  732,  732,  741,  755,  755,  741,    0,  752,
      796,  796,  741,  741,  741,  754,  796,  741,    0,  741,
      810,  753,  754,    0,    0,  741,  796,  741,  741,  741,
      755,  754,  754,  754,  756,    0,  810,  810,  757,    0,
      810,  756,    0,    0,    0,  757,    0,  803,    0,    0,
      756,  756,  756,  758,  757,  757,  741,  741,  743,  757,
      758,  743,    0,  803,  803,    0,  743,  743,  743,  758,
      758,  743,    0,  758,  818,    0,    0,  759,  803,  743,
      760,  743,  743,  743,  759,    0,    0,  760,  761,    0,
      818,  818,  762,  759,  759,  761,  760,  760,    0,  762,

      818,    0,  760,    0,  761,  761,  763,  759,  762,  762,
      743,  743,    0,  763,  772,    0,    0,    0,  762,    0,
      805,  772,  763,  763,  806,  761,  767,  767,  774,  767,
      772,  772,  767,    0,  767,  774,  805,  805,    0,  775,
      806,  806,  806,  763,  774,  774,  775,    0,  767,  769,
      772,  805,  769,    0,    0,  775,  775,  769,  769,  769,
      776,    0,  769,    0,  769,    0,    0,  776,  777,  775,
      769,  779,  769,  769,  769,  777,  776,  776,  779,  778,
        0,    0,  780,    0,  777,  777,  778,  779,  779,  780,
      776,  819,    0,  777,    0,  778,  778,    0,  780,  780,

        0,  769,  769,  771,  780,    0,  771,  819,  819,  779,
      778,  771,  771,  771,  781,    0,  771,    0,  782,    0,
        0,  781,  783,    0,  771,  782,  771,  771,  771,  783,
      781,  781,  821,    0,  782,  782,  784,    0,  783,  783,
        0,    0,    0,  784,    0,    0,  807,  782,  821,  821,
      781,    0,  784,  784,  783,  771,  771,    0,  785,  785,
      784,  785,  807,  807,  785,    0,  785,  786,  786,  786,
      786,  789,  789,  786,  789,    0,    0,  789,    0,  789,
      785,  788,  808,  807,  788,    0,    0,    0,    0,  788,
      788,  788,    0,  789,  788,  814,  792,  792,  808,  808,

      792,    0,  788,    0,  788,  788,  788,  812,  792,  815,
      792,  814,  814,  808,  794,  794,  814,  794,    0,    0,
      794,    0,  794,  812,  812,  815,  815,    0,    0,  812,
      815,    0,    0,  788,  788,  791,  794,  817,  791,  792,
      792,    0,    0,  791,  791,  791,  816,    0,  791,  820,
        0,    0,    0,  817,  817,  822,  791,    0,  791,  791,
      791,  823,  816,  816,  824,  820,  820,  825,  816,  826,
      820,  822,  822,    0,  817,    0,  827,  823,  823,  828,
      824,  824,  829,  825,  825,  826,  826,  791,  791,  825,
        0,  822,  827,  827,  830,  828,  828,  831,  829,  829,

        0,    0,  832,    0,  833,  824,  834,  827,  828,  826,
      830,  830,  835,  831,  831,    0,    0,  829,  832,  832,
      833,  833,  834,  834,  836,    0,  834,  837,  835,  835,
      830,  830,    0,  833,  838,    0,  839,    0,    0,    0,
      836,  836,  840,  837,  837,  841,    0,  842,    0,  837,
      838,  838,  839,  839,    0,  836,  838,  843,  840,  840,
      844,  841,  841,  842,  842,  839,  845,    0,    0,    0,
      841,  846,    0,  843,  843,  847,  844,  844,  848,  840,
        0,    0,  845,  845,  842,    0,  844,  846,  846,  849,
        0,  847,  847,    0,  848,  848,  850,  846,  851,    0,

      852,    0,  848,  853,    0,  849,  849,  854,    0,  855,
      847,  856,  850,  850,  851,  851,  852,  852,    0,  853,
      853,    0,    0,  854,  854,  855,  855,  856,  856,  857,
      857,  867,  857,  961,  851,  857,  856,  857,  867,  858,
      858,  858,  858,    0,  855,  858,    0,  867,  867,  961,
      961,  857,  859,    0,    0,  859,    0,  867,    0,    0,
      859,  859,  859,  860,  860,  859,  860,  859,    0,  860,
        0,  860,    0,  859,    0,  859,  859,  859,  864,  864,
      866,  866,  864,  866,  868,  860,  866,    0,  866,    0,
      864,  868,  864,    0,  965,    0,  869,    0,    0,    0,

      868,  868,  866,  869,  859,  859,  863,  966,    0,  863,
      965,  965,  869,  869,  863,  863,  863,    0,  870,  863,
        0,  864,  864,  966,  966,  870,  965,  863,  963,  863,
      863,  863,  871,  869,  870,  870,  872,    0,  966,  871,
      873,    0,  870,  872,  963,  963,    0,  873,  871,  871,
        0,    0,  872,  872,    0,  874,  873,  873,  863,  863,
      865,  977,  874,  865,  963,  873,    0,  871,  865,  865,
      865,  874,  874,  865,    0,  865,  874,  977,  977,  875,
        0,  865,  877,  865,  865,  865,  875,  876,    0,  877,
      878,    0,    0,  879,  876,  875,  875,  878,  877,  877,

      879,    0,    0,  876,  876,    0,  878,  878,    0,  879,
      879,    0,  865,  865,  880,    0,  875,  877,  876,    0,
      881,  880,  878,    0,    0,  879,  882,  881,  883,    0,
      880,  880,  884,  882,    0,  883,  881,  881,    0,  884,
      880,  881,  882,  882,  883,  883,    0,    0,  884,  884,
      885,    0,  886,    0,    0,  887,    0,  885,    0,  886,
        0,    0,  887,  882,    0,    0,  885,  885,  886,  886,
      886,  887,  887,  888,  885,    0,    0,  889,    0,  890,
      888,  891,    0,    0,  889,    0,  890,    0,  891,  888,
      888,    0,  887,  889,  889,  890,  890,  891,  891,  892,

      890,  891,    0,  893,    0,  888,  892,  894,    0,  889,
      893,  895,    0,    0,  894,  892,  892,    0,  895,  893,
      893,    0,  896,  894,  894,  894,    0,  895,  895,  896,
      897,    0,  970,  895,  898,    0,  899,  897,  896,  896,
      896,  898,    0,  899,    0,    0,  897,  897,  970,  970,
      898,  898,  899,  899,  900,  900,    0,  900,    0,  898,
      900,  970,  900,    0,    0,  897,  901,  901,  901,  901,
      907,  907,  901,    0,  907,    0,  900,  902,    0,    0,
      902,    0,  907,    0,  907,  902,  902,  902,  903,  903,
      902,  903,  902,    0,  903,    0,  903,    0,  902,    0,

      902,  902,  902,  909,  909,    0,  909,    0,    0,  909,
      903,  909,    0,  907,  907,  910,  910,    0,  910,  922,
        0,  910,    0,  910,    0,  909,  922,    0,    0,  902,
      902,  906,    0,  971,  906,  922,  922,  910,    0,  906,
      906,  906,    0,  922,  906,  911,  911,  911,  911,  971,
      971,  911,  906,    0,  906,  906,  906,  913,  913,  971,
      913,    0,    0,  913,    0,  913,    0,    0,  917,  917,
      919,  919,  917,  919,  925,    0,  919,    0,  919,  913,
      917,  925,  917,  906,  906,  908,  962,    0,  908,    0,
      925,  925,  919,  908,  908,  908,    0,  920,  908,    0,

      908,    0,  962,  962,  920,  925,  908,    0,  908,  908,
      908,  917,  917,  920,  920,  923,    0,    0,  921,    0,
        0,  962,  923,  920,    0,  921,    0,  979,    0,  924,
        0,  923,  923,    0,  921,  921,  924,  908,  908,  912,
      967,    0,  912,  979,  979,  924,  924,  912,  912,  912,
      923,  926,  912,  968,  912,  921,  967,  967,  926,    0,
      912,  967,  912,  912,  912,  927,  924,  926,  926,  968,
      968,  964,  927,  928,    0,  968,    0,    0,  929,    0,
      928,  927,  927,    0,    0,  929,  926,  964,  964,  928,
      928,  912,  912,  914,  929,  929,  914,  927,    0,  928,

        0,  914,  914,  914,  930,    0,  914,    0,  914,  964,
        0,  930,    0,    0,  914,  929,  914,  914,  914,  931,
      930,  930,  932,    0,  935,    0,  931,  934,  930,  932,
        0,  935,    0,    0,  934,  931,  931,  931,  932,  932,
      935,  935,  935,  934,  934,  914,  914,  916,  934,    0,
      916,    0,    0,    0,    0,  916,  916,  916,  933,  932,
      916,    0,  936,    0,    0,  933,    0,    0,  916,  936,
      916,  916,  916,    0,  933,  933,    0,    0,  936,  936,
      937,  937,    0,  937,  936,    0,  937,    0,  937,  952,
      933,  938,  938,  938,  938,    0,  952,  938,    0,  916,

      916,  918,  937,    0,  918,  952,  952,  952,    0,  918,
      918,  918,  940,  940,  918,  940,  918,    0,  940,    0,
      940,    0,  918,    0,  918,  918,  918,    0,  944,  944,
      946,  946,  944,  946,  940,    0,  946,    0,  946,    0,
      944,    0,  944,    0,  947,    0,    0,    0,    0,    0,
        0,  947,  946,  918,  918,  939,    0,    0,  939,    0,
      947,  947,    0,  939,  939,  939,  947,  948,  939,  969,
      939,  944,  944,    0,  948,    0,  939,  972,  939,  939,
      939,  949,    0,  948,  948,  969,  969,  982,  949,  950,
        0,  969,  948,  972,  972,    0,  950,  949,  949,    0,

        0,    0,  949,  982,  982,  950,  950,  939,  939,  941,
      950,    0,  941,    0,    0,  972,    0,  941,  941,  941,
      951,    0,  941,    0,  941,    0,    0,  951,    0,    0,
      941,    0,  941,  941,  941,  953,  951,  951,  954,  954,
      951,  954,  953,    0,  954,    0,  954,  955,  955,  955,
      955,  953,  953,  955,    0,  956,  956,    0,    0,  956,
      954,  941,  941,  943,    0,    0,  943,  956,    0,  956,
      953,  943,  943,  943,  958,  958,  943,  958,    0,    0,
      958,    0,  958,    0,  943,    0,  943,  943,  943,  959,
      959,  973,  959,  978,    0,  959,  958,  959,  956,  956,

      960,  960,  960,  960,    0,  983,  960,  973,  973,  978,
      978,  959,  975,  973,    0,  943,  943,  945,    0,  974,
      945,  983,  983,    0,  978,  945,  945,  945,  975,  975,
      945,  976,  945,    0,  981,  974,  974,    0,  945,  974,
      945,  945,  945,  985,    0,  980,    0,  976,  976,  975,
      981,  981,    0,  976,    0,    0,  981,    0,    0,  985,
      985,  980,  980,    0,    0,    0,    0,    0,    0,  945,
      945,  957,  984,    0,  957,    0,    0,    0,    0,  957,
      957,  957,  980,  986,  957,  987,    0,  988,  984,  984,
      989,    0,  957,  990,  957,  957,  957,  991,    0,  986,

      986,  987,  987,  988,  988,  986,  989,  989,  984,  990,
      990,  987,  992,  991,  991,  993,    0,    0,  990,  991,
      994,    0,  995,  957,  957,  996,    0,  998,  992,  992,
      997,  993,  993,  993,  999,    0,  994,  994,  995,  995,
     1000,  996,  996,  998,  998, 1001,  997,  997, 1002,  992,
      999,  999,  997, 1003,    0, 1006, 1000, 1000, 1004,    0,
        0, 1001, 1001,    0, 1002, 1002,    0, 1005,    0, 1003,
     1003, 1006, 1006,    0, 1004, 1004,    0, 1000,    0,    0,
     1004,    0, 1001, 1005, 1005, 1007, 1007,    0, 1007,    0,
     1002, 1007,    0, 1007, 1008, 1008, 1008, 1008,    0,    0,

     1008,    0, 1005,    0, 1009, 1009,    0, 1007, 1009, 1011,
     1011,    0, 1011, 1082,    0, 1011, 1009, 1011, 1009, 1012,
     1012,    0, 1012,    0,    0, 1012,    0, 1012,    0, 1082,
     1082, 1011, 1013, 1013, 1013, 1013, 1014,    0, 1013, 1015,
        0, 1012, 1016, 1014, 1017,    0, 1015, 1009, 1009, 1016,
        0, 1017, 1014, 1014, 1014, 1015, 1015, 1015, 1016, 1016,
     1017, 1017, 1018,    0,    0,    0,    0, 1019,    0, 1018,
     1020,    0,    0,    0, 1019,    0,    0, 1020, 1018, 1018,
     1016,    0, 1017, 1019, 1019, 1021, 1020, 1020, 1018, 1022,
        0, 1023, 1021, 1024,    0, 1085, 1022, 1025, 1023,    0,

     1024, 1021, 1021, 1086, 1025, 1022, 1022, 1023, 1023, 1024,
     1024, 1085, 1085, 1025, 1025, 1026,    0, 1022, 1027, 1086,
     1086,    0, 1026, 1025,    0, 1027, 1028,    0, 1023, 1029,
     1024, 1026, 1026, 1028, 1027, 1027, 1029, 1026, 1086,    0,
     1027, 1030, 1028, 1028, 1031, 1029, 1029,    0, 1030, 1032,
        0, 1031,    0,    0,    0,    0, 1032, 1030, 1030,    0,
     1031, 1031,    0, 1028,    0, 1032, 1032, 1033,    0, 1030,
     1034, 1032,    0, 1035, 1033, 1036,    0, 1034, 1037, 1031,
     1035,    0, 1036, 1033, 1033, 1037, 1034, 1034,    0, 1035,
     1035, 1036, 1036, 1038, 1037, 1037,    0, 1035,    0, 1034,

     1038, 1055,    0,    0, 1033,    0, 1088,    0, 1055, 1038,
     1038, 1036,    0, 1039, 1039, 1037, 1039, 1055, 1055, 1039,
        0, 1039, 1088, 1088,    0, 1038, 1040, 1040, 1040, 1040,
     1041, 1041, 1040,    0, 1041, 1039,    0, 1043, 1043, 1055,
     1043,    0, 1041, 1043, 1041, 1043, 1044, 1044,    0, 1044,
        0,    0, 1044,    0, 1044, 1045, 1045, 1045, 1045, 1043,
        0, 1045,    0, 1046, 1046,    0, 1046,    0, 1044, 1046,
        0, 1046,    0, 1041, 1041, 1047, 1047, 1047, 1047, 1048,
     1048, 1047,    0, 1048,    0, 1046, 1050, 1050,    0, 1050,
        0, 1048, 1050, 1048, 1050, 1051, 1051,    0, 1051, 1083,

        0, 1051, 1053, 1051, 1052, 1052, 1052, 1052, 1050, 1053,
     1052,    0,    0,    0, 1054, 1083, 1083, 1051, 1053, 1053,
     1053, 1054, 1048, 1048,    0,    0, 1056,    0, 1057,    0,
     1054, 1054, 1054, 1056, 1058, 1057, 1083, 1091,    0, 1059,
        0, 1058, 1056, 1056, 1057, 1057, 1059,    0,    0,    0,
     1058, 1058, 1060, 1091, 1091, 1059, 1059,    0,    0, 1060,
     1061, 1059,    0, 1062, 1056, 1057, 1063, 1061, 1060, 1060,
     1062, 1058,    0, 1063, 1060,    0, 1061, 1061, 1064, 1062,
     1062,    0, 1063, 1063, 1065, 1064,    0,    0, 1063,    0,
        0, 1065,    0,    0, 1064, 1064,    0, 1061, 1062,    0,

     1065, 1065,    0, 1066, 1066,    0, 1066, 1064, 1065, 1066,
        0, 1066, 1067, 1067, 1067, 1067, 1068, 1068, 1067, 1073,
     1068, 1070, 1070,    0, 1070, 1066, 1073, 1070, 1068, 1070,
     1068, 1071, 1071,    0, 1071, 1073, 1073, 1071,    0, 1071,
        0, 1074,    0, 1070, 1072, 1072, 1072, 1072, 1074, 1075,
     1072,    0,    0, 1071, 1076, 1073, 1075, 1074, 1074, 1068,
     1068, 1076, 1077,    0,    0, 1075, 1075, 1074,    0, 1077,
     1076, 1076,    0, 1078,    0, 1075,    0,    0, 1077, 1077,
     1078, 1080, 1080, 1080, 1080,    0, 1081, 1080, 1087, 1078,
     1078, 1076, 1084, 1079, 1079,    0, 1079, 1089, 1077, 1079,

     1090, 1079, 1081, 1081, 1087, 1087,    0, 1092, 1084, 1084,
     1078,    0, 1081, 1089, 1089, 1079, 1090, 1090, 1093, 1087,
     1094,    0, 1090, 1092, 1092, 1095,    0,    0, 1081, 1089,
        0,    0, 1084, 1096, 1093, 1093, 1094, 1094,    0,    0,
     1093, 1095, 1095, 1097, 1092, 1098,    0, 1095, 1099, 1096,
     1096, 1100,    0, 1101,    0, 1096, 1102,    0,    0, 1097,
     1097, 1098, 1098, 1103, 1099, 1099, 1104, 1100, 1100, 1101,
     1101, 1105, 1102, 1102, 1106, 1101, 1107,    0,    0, 1103,
     1103, 1108, 1104, 1104, 1109,    0, 1110, 1105, 1105,    0,
     1106, 1106, 1107, 1107, 1100, 1104, 1106, 1108, 1108, 1113,

     1109, 1109, 1110, 1110, 1111, 1111, 1113, 1111,    0,    0,
     1111,    0, 1111,    0, 1107, 1113, 1113, 1114, 1110, 1112,
     1112, 1112, 1112, 1115, 1114, 1112, 1111,    0, 1116,    0,
     1115,    0,    0, 1114, 1114, 1116, 1113,    0,    0, 1115,
     1115,    0,    0, 1117, 1116, 1116, 1118,    0, 1116, 1119,
     1117,    0,    0, 1118, 1114,    0, 1119,    0, 1115, 1117,
     1117, 1120, 1118, 1118,    0, 1119, 1119, 1159, 1120, 1121,
        0, 1119, 1122,    0, 1117, 1123, 1121, 1120, 1120, 1122,
     1124,    0, 1123, 1159, 1159, 1121, 1121, 1124, 1122, 1122,
        0, 1123, 1123, 1122, 1125,    0, 1124, 1124, 1124, 1126,

     1121, 1125, 1127, 1120,    0, 1128, 1126, 1129,    0, 1127,
     1125, 1125, 1128, 1130, 1129, 1126, 1126,    0, 1127, 1127,
     1130, 1128, 1128, 1129, 1129,    0,    0, 1131,    0, 1130,
     1130, 1128, 1126, 1127, 1131, 1132,    0, 1160,    0,    0,
     1133,    0, 1132, 1131, 1131,    0,    0, 1133,    0,    0,
        0, 1132, 1132, 1160, 1160, 1130, 1133, 1133, 1134, 1134,
        0, 1134,    0, 1131, 1134,    0, 1134, 1135, 1135, 1135,
     1135, 1132, 1133, 1135, 1160, 1136, 1136,    0, 1136,    0,
     1134, 1136, 1138, 1136, 1137, 1137, 1137, 1137, 1139, 1138,
     1137,    0,    0, 1140,    0, 1139, 1141, 1136, 1138, 1138,

     1140, 1142,    0, 1141, 1139, 1139,    0,    0, 1142, 1140,
     1140,    0, 1141, 1141, 1143,    0, 1141, 1142, 1142, 1138,
     1144, 1143, 1145, 1142,    0, 1139, 1146, 1144, 1140, 1145,
     1143, 1143,    0, 1146,    0,    0, 1144, 1144, 1145, 1145,
     1145, 1144, 1146, 1146, 1147,    0, 1148,    0,    0, 1149,
     1149, 1147, 1149, 1148,    0, 1149, 1143, 1149,    0, 1146,
     1147, 1147, 1148, 1148, 1150, 1150, 1150, 1150,    0, 1151,
     1150, 1149,    0, 1152,    0, 1147, 1151, 1153,    0,    0,
     1152,    0,    0,    0, 1153, 1151, 1151,    0, 1148, 1152,
     1152, 1154,    0, 1153, 1153, 1155,    0, 1156, 1154, 1157,

     1151, 1158, 1155, 1153, 1152,    0, 1161, 1154, 1154, 1162,
        0, 1155, 1155, 1156, 1156, 1157, 1157, 1158, 1158, 1156,
        0, 1157, 1161, 1161, 1163, 1162, 1162, 1154, 1164,    0,
     1165, 1155, 1158, 1166,    0,    0, 1167, 1161, 1168,    0,
     1163, 1163,    0, 1169, 1164, 1164, 1165, 1165, 1170, 1166,
     1166, 1165, 1167, 1167, 1168, 1168, 1171,    0, 1167, 1169,
     1169, 1172,    0, 1173, 1170, 1170, 1203,    0, 1174,    0,
     1173,    0, 1171, 1171, 1168, 1174,    0, 1172, 1172, 1173,
     1173, 1175, 1203, 1203, 1174, 1174,    0,    0, 1175, 1173,
        0,    0, 1204, 1171, 1174, 1176,    0, 1175, 1175, 1175,

     1177, 1172, 1176, 1178,    0,    0, 1180, 1177, 1204, 1204,
     1178, 1176, 1176, 1180,    0,    0, 1177, 1177,    0, 1178,
     1178, 1179, 1180, 1180, 1177,    0, 1181,    0, 1179, 1182,
     1180, 1179, 1176, 1181, 1178,    0, 1182, 1179, 1179,    0,
     1183,    0, 1181, 1181, 1184, 1182, 1182, 1183,    0,    0,
     1202, 1184, 1185,    0,    0, 1186, 1183, 1183,    0, 1185,
     1184, 1184, 1186, 1187, 1184, 1183, 1202, 1202, 1185, 1185,
     1187, 1186, 1186,    0, 1188,    0,    0, 1189,    0, 1187,
     1187, 1188, 1190, 1185, 1189, 1187, 1202,    0,    0, 1190,
     1188, 1188,    0, 1189, 1189, 1191,    0, 1192, 1190, 1190,

     1193,    0, 1191, 1194, 1192, 1189,    0, 1193, 1190,    0,
     1194, 1191, 1191, 1192, 1192, 1192, 1193, 1193,    0, 1194,
     1194, 1191, 1195,    0, 1196,    0, 1197,    0, 1198, 1195,
        0, 1196, 1195, 1197, 1194, 1198,    0, 1193, 1195, 1195,
     1196, 1196, 1197, 1197, 1198, 1198, 1197, 1199,    0, 1196,
     1200,    0, 1198, 1201, 1199,    0, 1205, 1200,    0,    0,
     1201, 1206,    0, 1199, 1199,    0, 1200, 1200, 1207, 1201,
     1201, 1199, 1205, 1205, 1208, 1201,    0, 1206, 1206, 1209,
        0, 1200, 1210,    0, 1207, 1207, 1211,    0,    0,    0,
     1208, 1208, 1205, 1212,    0, 1209, 1209, 1213, 1210, 1210,

     1212, 1209, 1211, 1211, 1213, 1214,    0,    0, 1210, 1212,
     1212, 1215, 1214, 1213, 1213,    0,    0, 1216, 1215,    0,
        0, 1214, 1214, 1217, 1216,    0,    0, 1215, 1215, 1252,
     1217, 1218, 1212, 1216, 1216,    0, 1213,    0, 1218, 1217,
     1217,    0, 1214, 1215, 1219, 1252, 1252, 1218, 1218, 1217,
     1220, 1219,    0, 1218, 1216, 1221,    0, 1220, 1222,    0,
     1219, 1219, 1221, 1223,    0, 1222, 1220, 1220, 1219,    0,
     1223, 1221, 1221,    0, 1222, 1222, 1224,    0, 1225, 1223,
     1223,    0, 1226, 1224,    0, 1225, 1220,    0,    0, 1226,
        0,    0, 1224, 1224, 1225, 1225,    0, 1222, 1226, 1226,

     1227,    0, 1223,    0,    0, 1228,    0, 1227, 1229,    0,
     1225,    0, 1228, 1224,    0, 1229, 1227, 1227, 1231, 1226,
     1232, 1228, 1228, 1230, 1229, 1229, 1227, 1228,    0,    0,
     1230, 1233, 1229,    0, 1231, 1231, 1232, 1232, 1233, 1230,
     1230,    0,    0,    0, 1234,    0,    0, 1233, 1233,    0,
        0, 1234, 1232, 1233, 1231, 1235,    0, 1236,    0, 1230,
     1234, 1234, 1235, 1237, 1236,    0, 1234,    0, 1238,    0,
     1237, 1235, 1235, 1236, 1236, 1238,    0,    0,    0, 1237,
     1237, 1235, 1239,    0, 1238, 1238, 1240,    0, 1238, 1239,
     1241,    0, 1236, 1240, 1242,    0,    0, 1241, 1239, 1239,

        0, 1242, 1240, 1240,    0,    0, 1241, 1241, 1243,    0,
     1242, 1242, 1241, 1244,    0, 1243, 1242,    0,    0, 1245,
     1244, 1246,    0,    0, 1243, 1243, 1245,    0,    0, 1244,
     1244,    0,    0, 1247, 1243, 1245, 1245, 1246, 1246, 1245,
     1247,    0,    0,    0, 1248,    0, 1249,    0, 1244, 1247,
     1247, 1248, 1246, 1249,    0,    0,    0, 1250,    0, 1251,
     1248, 1248, 1249, 1249, 1250, 1253, 1251,    0,    0,    0,
     1254,    0, 1253, 1250, 1250, 1251, 1251, 1254, 1249,    0,
        0, 1253, 1253, 1255,    0,    0, 1254, 1254,    0,    0,
     1255, 1251,    0,    0,    0,    0, 1253,    0,    0, 1255,

     1255, 1254, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1262, 1262,    0,
        0, 1262, 1262, 1262, 1263,    0, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1264, 1264,    0,    0, 1264, 1264,
     1264, 1265,    0, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1266, 1266,    0,    0, 1266, 1266, 1266, 1267,    0,

     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1268, 1268,
        0,    0, 1268, 1268, 1268, 1269,    0, 1269, 1269, 1269,
     1269, 1269, 1269, 1269, 1269, 1270, 1270,    0,    0, 1270,
     1270, 1270, 1271,    0, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1272,    0,    0,    0, 1272,    0, 1272, 1272,
        0, 1272, 1272, 1273,    0,    0, 1273, 1273,    0, 1273,
     1273, 1273, 1273, 1273, 1274, 1274,    0, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1275,    0, 1275, 1275,    0,
        0, 1275,    0, 1275, 1276, 1276, 1276, 1276, 1276,    0,
     1276, 1277, 1277, 1277, 1277, 1277,    0, 1277, 1278, 1278,

     1278, 1278, 1278,    0, 1278, 1279, 1279, 1279, 1279, 1279,
        0, 1279, 1280, 1280, 1280, 1280, 1280,    0, 1280, 1281,
        0, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1282,
        0,    0,    0, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1283,    0, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1284,    0,    0,    0, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1285,    0, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1286,    0,    0,    0, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1287,    0,    0,    0, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1288,    0, 1288, 1288, 1288, 1288, 1288,

     1288, 1288, 1288, 1289,    0,    0,    0, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1290,    0, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1291,    0,    0,    0, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1292, 1292,    0, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1293,    0,    0,    0,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1294,    0,    0,
        0, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1295, 1295,
        0, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1296,
        0,    0,    0, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1297,    0,    0,    0, 1297, 1297, 1297, 1297, 1297, 1297,

     1297, 1298, 1298,    0, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1299,    0,    0,    0, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1300,    0,    0,    0, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1301,    0,    0,    0, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1302, 1302,    0, 1302, 1302,
     1302, 1302, 1302, 1302, 1302, 1302, 1303,    0,    0,    0,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1304,    0,    0,
        0, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1305, 1305,
        0, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1306,
        0,    0,    0, 1306, 1306, 1306, 1306, 1306, 1306, 1306,

     1307,    0,    0,    0, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1308, 1308,    0, 1308, 1308, 1308, 1308, 1308, 1308,
     1308, 1308, 1309,    0,    0,    0, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1310, 1310,    0, 1310, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1311, 1311,    0, 1311, 1311, 1311,
     1311, 1311, 1311, 1311, 1311, 1312,    0,    0,    0, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1313,    0,    0,    0,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1314, 1314,    0,
     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1315, 1315,
        0,    0, 1315, 1315, 1315, 1316, 1316,    0, 1316, 1316,

     1316, 1316, 1316, 1316, 1316, 1316, 1317,    0,    0,    0,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1318,    0,    0,
        0, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1319, 1319,
        0, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1320,
     1320,    0, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,
     1321,    0,    0,    0, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1322, 1322,    0, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1323,    0,    0,    0, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1324,    0,    0,    0, 1324, 1324, 1324,
     1324, 1324, 1324, 1324, 1325, 1325,    0, 1325, 1325, 1325,

     1325, 1325, 1325, 1325, 1325, 1326, 1326,    0,    0, 1326,
     1326, 1326, 1327, 1327,    0, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1328,    0,    0,    0, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1329, 1329,    0, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1330,    0,    0,    0, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1331,    0,    0,    0,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1332, 1332,    0,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1333, 1333,
        0,    0, 1333, 1333, 1333, 1334, 1334,    0, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1335,    0,    0,    0,

     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1336,    0,    0,
        0, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1337, 1337,
        0, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1338,
     1338,    0, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1339, 1339,    0,    0, 1339, 1339, 1339, 1340, 1340,    0,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1341, 1341,
        0, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1342,
     1342,    0, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1343, 1343,    0, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,

     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2010 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "strategyLanguage.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
//#include "preModule.hh"
#include "lexerAux.hh"
#include "global.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

#define YY_INPUT(buf, result, max_size)		getInput(buf, result, max_size)

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define RETURN_FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

#define SAVE(token) \
  { savedToken.tokenize(yytext, lineNumber); savedReturn = token; }

#define SAVE_FIX_UP(token) \
  { savedToken.fixUp(yytext, lineNumber); savedReturn = token; }

#define RETURN_SAVED(token) \
  { lvalp->yyToken = savedToken; return (token); }

#define STORE \
  { Token t; t.tokenize(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored " << t);*/ }
#define STORE_FIX_UP \
  { Token t; t.fixUp(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored fixUp " << t);*/ }

#define EXIT(token) \
  { yy_pop_state(); RETURN(token) }

Token savedToken;
int savedReturn;
int braceCount;
int parenCount;
int terminationSet;
string accumulator;
string fileName;

//int terminationCondition;
int minLength;
extern Vector<Token> lexerBubble;










#line 2853 "<stdout>"

#define INITIAL 0
#define ID_MODE 1
#define CMD_MODE 2
#define SEEN_DOT 3
#define BUBBLE_MODE 4
#define END_STATEMENT_MODE 5
#define END_COMMAND_MODE 6
#define FILE_NAME_MODE 7
#define FILE_NAME_QUOTE_MODE 8
#define STRING_MODE 9
#define LATEX_MODE 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 114 "../../../src/Mixfix/lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();

#line 3065 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1257 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8392 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 118 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 122 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 128 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 129 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 133 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 137 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 138 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 139 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VIEW);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 140 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 141 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 142 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 143 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_SREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_XG_NARROW;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_BODY;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_BUILTIN;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_ATTRIBUTE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_NEWLINE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 193 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 194 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 195 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 196 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 197 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 198 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 199 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 200 "../../../src/Mixfix/lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 201 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 202 "../../../src/Mixfix/lexer.ll"
return KW_OPS2;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 203 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 204 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 205 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 206 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 207 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 208 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 209 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 210 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 211 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 212 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 213 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 214 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 215 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 216 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 217 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 218 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 219 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 220 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 221 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 222 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 223 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 224 "../../../src/Mixfix/lexer.ll"
return KW_LABEL;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 225 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 226 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 227 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 228 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 229 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 234 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 248 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 252 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 253 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 254 "../../../src/Mixfix/lexer.ll"
RETURN(IDENTIFIER)
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 255 "../../../src/Mixfix/lexer.ll"
{
					  SAVE_FIX_UP(ENDS_IN_DOT)
					  BEGIN(SEEN_DOT);
					}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 259 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK


case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 263 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 268 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(IDENTIFIER)
					}
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 108:
YY_RULE_SETUP
#line 280 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 281 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 282 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 283 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 284 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 285 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 286 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 287 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 288 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 289 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 290 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 291 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 292 "../../../src/Mixfix/lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 293 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 294 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 295 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 296 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 297 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 298 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 299 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 300 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 301 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 302 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 303 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 304 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 305 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 306 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 307 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 308 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 309 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 310 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 311 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 312 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 313 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 314 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 315 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 316 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 317 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 318 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 319 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 320 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 321 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 322 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 323 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 324 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 325 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 326 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 327 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 328 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 329 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 330 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 331 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Bubble mode squirrels tokens away in lexerBubble until some termination criteria is met.
  */

case 160:
YY_RULE_SETUP
#line 338 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COLON) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 344 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COMMA) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 350 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_LEFT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 356 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_RIGHT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 362 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_EQUALS) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 368 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_ARROW2) && lexerBubble.length() >= minLength)
					    EXIT(KW_ARROW2)
					  else
					    STORE
					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 374 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_TO) && lexerBubble.length() >= minLength)
					    EXIT(KW_TO)
					  else
					    STORE
					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 380 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_IF) && lexerBubble.length() >= minLength)
					    EXIT(KW_IF)
					  else
					    STORE
					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 386 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_OP_ATTRIBUTE) && lexerBubble.length() >= minLength)
					    {
					      yyless(0);  // need to re-lex it to get the correct return value
					      yy_pop_state();
					    }
					  else
					    STORE
					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 395 "../../../src/Mixfix/lexer.ll"
{
					  ++parenCount;
					  STORE
					}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 399 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0)
					    {
					      if ((terminationSet & BAR_RIGHT_PAREN) && lexerBubble.length() >= minLength)
					        EXIT(*yytext)
					      IssueWarning(LineNumber(lineNumber) << ": mismatched parentheses.");
					    }
					  else
					    --parenCount;
					  STORE
					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 410 "../../../src/Mixfix/lexer.ll"
STORE
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 411 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() >= minLength &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE(*yytext)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE
					}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 422 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() + 1 >= minLength  &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE_FIX_UP(ENDS_IN_DOT)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE_FIX_UP
					}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 433 "../../../src/Mixfix/lexer.ll"
STORE_FIX_UP
	YY_BREAK

/*
  *	We have saved something that looks like a statement terminating period. We now lex the next
  *	token to see if it ends a module or starts a new statement, and if so push the lexed token back
  *	on to the input stream to be re-lexed in a new mode.
  */

case 175:
YY_RULE_SETUP
#line 442 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // BUG - need to deal with white space and comments after the .
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 450 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 177:
YY_RULE_SETUP
#line 458 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE(*yytext);
					}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 462 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE_FIX_UP(ENDS_IN_DOT)
					}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 466 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  yyless(0);
					  BEGIN(BUBBLE_MODE);
					}
	YY_BREAK


case 180:
YY_RULE_SETUP
#line 474 "../../../src/Mixfix/lexer.ll"
{
					  if (accumulator.empty())
					    BEGIN(FILE_NAME_QUOTE_MODE);
					  else
					    accumulator += '"';
					}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 480 "../../../src/Mixfix/lexer.ll"
accumulator += ' ';
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 481 "../../../src/Mixfix/lexer.ll"
accumulator += '"';
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 482 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 483 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 484 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 485 "../../../src/Mixfix/lexer.ll"
{
					  if (!accumulator.empty())
					    {
					      yy_pop_state();
					      lvalp->yyString = accumulator.c_str();
					      eatComment(false);
					      return FILE_NAME_STRING;
					    }
					}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 494 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 188:
YY_RULE_SETUP
#line 503 "../../../src/Mixfix/lexer.ll"
{
					   yy_pop_state();
					   lvalp->yyString = accumulator.c_str();
					   eatComment(false);
					   return FILE_NAME_STRING;
					}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 509 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 510 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 191:
YY_RULE_SETUP
#line 519 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 524 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 193:
YY_RULE_SETUP
#line 533 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 534 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 539 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = accumulator.c_str();
						  return LATEX_STRING;
						}
					    }
					  accumulator += yytext;
					}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 553 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 557 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 561 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  accumulator += yytext;
					}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 565 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(SEEN_DOT):
case YY_STATE_EOF(BUBBLE_MODE):
case YY_STATE_EOF(END_STATEMENT_MODE):
case YY_STATE_EOF(END_COMMAND_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(FILE_NAME_QUOTE_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 568 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 574 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 575 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 576 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 581 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK
#line 4436 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1257 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1257 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1256);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 581 "../../../src/Mixfix/lexer.ll"



#include "lexerAux.cc"

