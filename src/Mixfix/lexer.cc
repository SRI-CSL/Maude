
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 208
#define YY_END_OF_BUFFER 209
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1278] =
    {   0,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,    0,    0,    0,    0,  196,  196,
        0,    0,  209,  207,  205,  206,  206,  104,  207,  102,
      104,  104,  104,  102,  103,  103,  104,  207,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,   15,  104,  104,  104,  104,  104,  104,  104,
      164,  207,  162,  162,  162,  164,  162,  162,  164,  207,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  110,  207,
      106,  110,  110,  108,  107,  106,  110,  207,  110,  108,

      112,  112,  111,  112,  112,  112,  112,  179,  207,  174,
      175,  179,  166,  179,  177,  165,  169,  167,  168,  179,
      207,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  176,  184,  184,  184,  184,  184,
      182,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  205,  181,  207,  206,  190,  191,
      192,  185,  189,  194,  193,  195,  196,  197,  204,  198,
      203,  203,  199,  200,  198,  201,  202,  205,  104,    0,
      104,    0,    0,    0,  104,  104,  103,    0,  104,  104,
      104,  104,  104,  104,  104,   11,  104,  104,  104,  104,

      104,   44,  104,  104,   78,  104,  104,  104,  104,  104,
      104,  104,   65,  104,  104,    5,  104,  104,  104,  104,
       14,  104,   77,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,   39,   75,  104,  104,  104,  104,  104,
      104,  104,  104,   79,  104,  104,  104,  104,  104,  104,
      104,  104,    6,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  164,    0,  163,  164,    0,    0,    0,
      164,  164,  158,  161,  159,    0,  164,  164,  164,  164,
      164,  153,  164,  164,  164,  164,  152,  141,  164,  164,
      164,  164,  140,  164,  139,  164,  164,  164,  164,  150,

      164,  164,  164,  146,  164,  141,  164,  154,  164,  164,
      164,  164,  164,  113,  141,  164,  160,  110,    0,  109,
      110,    0,    0,    0,  110,  110,    0,  105,  107,    0,
        5,  205,  111,    0,    0,    0,    0,    0,  179,    0,
      178,  179,    0,    0,    0,  179,  179,  170,    0,  179,
      179,  179,  179,  179,  179,  179,  179,  172,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  171,
      184,    0,  183,  184,    0,    0,    0,  184,  184,    0,
      184,  184,  184,  180,  184,  184,  180,  184,  184,  184,
      180,  180,  184,  184,  180,  184,  205,  181,    0,    0,

        0,  190,  186,  187,  188,  194,  196,  198,  198,  104,
        0,    2,    2,  104,  104,  104,   70,  104,  104,  104,
      104,  104,   69,  104,  104,  104,  104,  104,  104,  104,
      104,   16,   78,  104,  104,  104,  104,  104,  104,  104,
       30,  104,  104,  104,  104,  104,  104,  104,  104,   77,
      104,  104,    6,   28,  104,  104,  104,   40,  104,   75,
      104,  104,  104,  104,  104,  104,   10,  104,  101,   19,
      104,  104,   22,   79,  104,  104,  104,   37,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,   76,
      104,  104,  104,  104,  104,  104,  104,  164,    0,    2,

        2,  164,  164,  151,  164,  164,  155,  164,  164,  164,
      164,  164,  164,  164,  164,  118,  164,  141,  164,  156,
      164,  164,  164,  164,  164,  164,  134,  133,  164,  147,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      149,  110,    0,    2,    2,    0,    0,    0,    0,    2,
        2,  179,    0,    2,    2,  179,  179,  179,  179,  179,
      179,  179,  179,  173,  179,  179,  179,  179,  179,  179,
      179,  173,  179,  179,  179,  179,  179,  184,    0,    2,
        2,  184,  184,  184,  180,  180,  184,  184,  184,  184,
      180,    0,    0,    0,    0,    2,    2,    2,    1,    2,

        2,  104,  104,  104,   56,   46,  104,  104,  104,  104,
      104,  104,  104,   53,   27,  104,   20,  104,  104,   94,
       23,  104,  104,   61,  104,   24,  104,  104,  104,  104,
      104,    9,   26,  104,    3,  104,  104,  104,  104,   18,
      104,    7,  104,  104,   97,   13,  104,  104,  104,  104,
       15,  104,  104,  104,  104,  104,   79,  104,  104,   38,
       74,   21,   25,  104,   92,  104,  104,   66,  104,  104,
      104,  104,   76,  104,    8,  104,  104,   62,  104,  104,
        0,    0,    2,    2,    2,    1,    2,    2,  164,  164,
      117,  164,  164,  129,  164,  164,  156,  164,  164,  157,

      164,  164,  114,  164,  164,  164,  119,  164,  164,  120,
      164,  164,  121,    3,  164,  164,  148,  164,  164,  128,
      123,  164,  164,  142,  164,  164,  164,  164,  164,  164,
      149,    0,    0,    2,    2,    2,    1,    2,    2,    0,
        0,    1,    0,    0,    2,    2,    2,    1,    2,    2,
      179,  173,  179,  179,  179,  179,  179,  179,  173,  179,
      173,  179,  179,  179,  179,  173,  173,  179,  179,  179,
        0,    0,    2,    2,    2,    1,    2,    2,  184,  184,
      180,  180,  184,  184,  184,  184,  184,  180,  184,  184,
      184,    2,    2,    1,    1,    1,    1,    1,    2,    2,

        2,   91,  104,   64,  104,   95,  104,   45,   58,  104,
      104,  104,  104,  104,  104,   83,  104,   88,  104,  104,
      104,  104,  104,  104,  104,   59,  104,  104,   81,   98,
       33,  104,  104,  104,  104,  104,  104,   63,   17,   55,
      104,  104,   12,  104,  104,  104,  104,  104,  104,  104,
       74,  104,  104,   67,   54,  104,  104,   41,   36,  104,
      104,   73,   93,   48,  104,  104,    2,    2,    1,    1,
        1,    1,    1,    2,    2,    2,  116,  144,  164,  164,
      164,  135,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  115,  130,  164,  164,  164,  164,  164,  164,

      164,  122,  142,  164,  126,  164,  164,  164,  141,    2,
        2,    1,    1,    1,    1,    1,    2,    2,    2,    2,
        2,    1,    1,    1,    1,    1,    2,    2,    2,  173,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  173,    2,    2,    1,    1,
        1,    1,    1,    2,    2,    2,  180,  184,  184,  184,
      184,  184,  184,    1,    1,    1,    1,    1,    2,    2,
       42,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,   85,  104,    4,  104,
      104,  104,   98,   60,   72,   28,  104,  104,  100,   63,

      104,  104,  104,  104,   19,   90,   52,  104,   35,   49,
      104,  104,  104,  104,   68,  104,  104,  104,   34,    1,
        1,    1,    1,    1,    2,    2,  164,  164,  132,  164,
      164,    4,  127,  124,  164,  164,  164,  164,  164,  164,
      164,  133,  164,  164,  164,  164,  164,  164,  164,  164,
      164,    1,    1,    1,    1,    1,    2,    2,    1,    1,
        1,    1,    1,    2,    2,  179,  179,  173,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,    1,    1,
        1,    1,    1,    2,    2,  184,  184,  184,  184,  184,
      184,    1,    1,  104,   64,  104,  104,   47,   82,  104,

       51,  104,  104,   20,  104,  104,   87,  104,  104,   86,
      104,   71,   57,  104,  104,   99,   84,  104,   22,   21,
      104,  104,   80,   32,   43,  104,    1,    1,  164,  164,
      164,  164,  164,  136,  164,  164,  164,  164,  134,  164,
      137,  164,  164,  164,  131,  164,  164,  143,  164,    1,
        1,    1,    1,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,    1,    1,  184,  184,  184,  184,
      180,  104,  104,  104,   82,  104,  104,   27,   50,   23,
      104,   24,  104,  104,  104,  101,   25,  104,   31,  104,
      164,  164,  164,  164,  164,  164,  164,  164,  120,  125,

      164,  164,  164,  126,  145,  143,  164,  179,  179,  179,
      179,  179,  179,  179,  179,  184,  184,  184,  180,  104,
       56,   96,  104,   53,   61,  104,   18,  104,  104,   29,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  138,
      179,  179,  179,  179,  179,  179,  179,  184,  184,  104,
      104,  104,  164,  164,  164,  164,  119,  164,  123,  145,
      179,  179,  179,  179,  179,   89,  104,  116,  117,  164,
      128,  179,   54,  164,  179,  132,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   24,    8,   25,   26,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   13,   54,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56
    } ;

static yyconst flex_int32_t yy_meta[57] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    9,    8,   10,   10,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    7,    5,   11
    } ;

static yyconst flex_int16_t yy_base[1365] =
    {   0,
        0,    0,   56,    0,  112,    0,  167,  181,  196,    0,
      252,    0,  307,    0,  314,  322,  354,  359,  172,  186,
      368,  424,  700, 8541,  174, 8541, 8541,  309,  317, 8541,
      341, 8541,  361,  371,  373,  375,  379,  392,  385,  411,
      423,  434,  445,  459,  465,  467,  431,  490,  493,  513,
      517,  521,  527,  546,  585,  541,  555,  573,  580,  608,
      587,  321, 8541,  611,  619,  633,  637,  648,  651,  661,
      671,  708,  673,  679,  677,  685,  746,  716,  734,  754,
      768,  772,  786,  792,  806,  711,  748,  819,  827,  324,
     8541,  839,  841,  866,  868,  833,  871,  888,  879, 8541,

     8541,  911, 8541,  925,  941,  679,  666,  941,  366, 8541,
     8541,  943, 8541,  945,  949,  963,  969, 8541, 8541,  967,
      986,  989,  995,  993, 1007, 1028, 1033, 1041, 1055, 1066,
     1079, 1081, 1087, 1036, 8541, 8541, 1092,  372, 1110, 1112,
     1115, 1123, 1132, 1178, 1113, 1149, 1151, 1155, 1181, 1186,
     1189, 1209, 1215, 1217, 1259, 8541, 1273, 1287,    0, 8541,
     8541, 8541,  518,    0, 8541, 8541,    0, 8541, 8541,    0,
     8541, 8541, 8541, 8541,  397, 8541, 8541,  188,  613,  403,
      681, 1259,  460,  415,  778, 1084, 1211, 1286,  800,  853,
     1289,  955,  881, 1004,  899,  780, 1223, 1136, 1278, 1297,

     1310,  913, 1317, 1320, 1089, 1322, 1325, 1332, 1335, 1340,
     1354, 1361, 1363, 1365, 1372, 1383, 1391, 1393, 1368, 1395,
     1398, 1401, 1404, 1406, 1416, 1425, 1428, 1431, 1434, 1437,
     1439, 1458, 1460, 1462, 1468, 1470, 1473, 1482, 1480, 1494,
     1501, 1503, 1509, 1521, 1512, 1534, 1542, 1544, 1553, 1556,
     1564, 1568, 1575, 1577, 1579, 1583, 1589, 1601, 1603, 1610,
     1612, 1631, 1622, 1634,  464, 1645, 1653, 1663,  514,  436,
     1672, 1667, 1680, 1685, 1693, 1710, 1713, 1717, 1719, 1731,
     1745, 1753, 1756, 1764, 1767, 1782, 1790, 1793, 1801, 1795,
     1815, 1828, 1826, 1839, 1841, 1847, 1860, 1865, 1871, 1873,

     1870, 1879, 1897, 1905, 1909, 1920, 1923, 1928, 1943, 1946,
     1948, 1954, 1969, 1972, 1974, 1977, 1980, 1992,  560, 1998,
     2003, 2016,  569,  439, 2023, 2027, 2052, 8541, 2056, 2023,
     2035, 2081, 8541, 2095,  667,  653,  649,  628, 2095,  578,
     2097, 2099, 2081,  579,  510, 2117, 2121, 2123, 2130, 2141,
     2149, 2144, 2146, 2152, 2178, 2181, 2186, 2184, 2199, 2207,
     2212, 2220, 2225, 2231, 2245, 2253, 2264, 2276, 2278, 2284,
     2289,  598, 2302, 2304, 2322,  642,  530, 2325, 2333, 2342,
      968, 2345, 2353, 2358, 2364, 2378, 2384, 2389, 2397, 2403,
     2408, 2416, 2430, 2434, 2438, 2442, 2473, 8541, 2487,  628,

      603,    0, 8541, 8541, 8541,    0,    0,    0, 8541, 1682,
      643, 2502, 2556, 1705, 1742, 1915, 1727, 2154, 2217, 2053,
     2457, 2299, 2251, 2314, 2475, 2506, 2513, 2495, 2472, 2520,
     2533, 2524, 2538, 2559, 2562, 2564, 2567, 2577, 2589, 2592,
     2595, 2597, 2607, 2617, 2610, 2621, 2625, 2628, 2635, 2640,
     2647, 2649, 2653, 2658, 2660, 2667, 2671, 2678, 2682, 2685,
     2692, 2696, 2706, 2700, 2718, 2720, 2726, 2730, 2732, 2740,
     2744, 2752, 2754, 2759, 2763, 2777, 2781, 2783, 2788, 2790,
     2792, 2801, 2810, 2815, 2819, 2821, 2823, 2842, 2844, 2852,
     2854, 2863, 2865, 2875, 2877, 2889, 2895, 2901,  661, 2941,

     2995, 2907, 2909, 2921, 2944, 2941, 2952, 2963, 2966, 2983,
     3009, 3017, 3021, 3029, 3041, 3043, 3055, 3061, 3063, 3067,
     3075, 3087, 3089, 3095, 3100, 3113, 3108, 3121, 3132, 3134,
     3145, 3147, 3153, 3158, 3172, 3177, 3185, 3191, 3199, 3205,
     3217, 3223,  669, 3262, 3316,  597,  582,  574,  564,  540,
      530, 3225,  700, 3370, 3424, 3228, 3231, 3249, 3280, 3276,
     3282, 3284, 3319, 3288, 3338, 3341, 3330, 3373, 3381, 3384,
     3405, 3411, 3392, 3435, 3446, 3450, 3458, 3472,  717, 3498,
     3552, 3480, 3598, 3485, 3512, 3520, 3518, 3523, 3563, 3571,
     3574,  517,  499,  722,  588,    0,  489, 3608, 3646,  364,

     3700, 2913, 3286, 3576, 2975, 3334, 3378, 3444, 3607, 3609,
     3532, 3639, 3432, 3478, 3650, 3545, 3616, 3636, 3657, 3664,
     3668, 3672, 3677, 3682, 3704, 3707, 3709, 3711, 3714, 3736,
     3738, 3740, 3743, 3746, 3748, 3758, 3761, 3766, 3769, 3776,
     3780, 3787, 3789, 3791, 3799, 3801, 3809, 3811, 3814, 3822,
     3824, 3832, 3834, 3842, 3844, 3852, 3857, 3863, 3865, 3870,
     3875, 3884, 3888, 3890, 3896, 3898, 3902, 3908, 3916, 3921,
     3928, 3934, 3939, 3941, 3946, 3949, 3959, 3961, 3967, 3972,
      744,  766,  487, 3998,  483, 4021,  480, 4075, 3987, 4008,
     4002, 4032, 4035, 4043, 4046, 4057, 4079, 4082, 4097, 4100,

     4108, 4111, 4126, 4130, 4134, 4138, 4157, 4159, 4161, 4165,
     4184, 4186, 4188, 4207, 4212, 4215, 4209, 4233, 4235, 4238,
     4241, 4259, 4262, 4270, 4284, 4288, 4273, 4296, 4314, 4316,
     4319,  791,  817,  461, 4346,  458, 4369,  537, 4423,  460,
      448,    0,  837,  827,  423, 4358,  398, 4477,  604, 4531,
     4373, 4381, 4394, 4392, 4400, 4426, 4405, 4430, 4441, 4449,
     4480, 4454, 4499, 4503, 4518, 4542, 4545, 4553, 4557, 4571,
      880,  918,  388, 4599,  362, 4622,  629, 4676, 4579, 1028,
     4593, 4604, 4625, 4633, 4644, 4636, 4647, 4679, 4683, 4687,
     4701, 4731, 2892,    0, 4754, 4743,  332, 4808, 4760,  320,

     4787, 4014, 4459, 4163, 4292, 4085, 4132, 4194, 4244, 4512,
     4349, 4585, 4589, 4697, 4711, 4379, 4485, 4387, 4772, 4434,
     4716, 4747, 4774, 4760, 4539, 4656, 4795, 4802, 4814, 4820,
     4817, 4822, 4826, 4828, 4841, 4849, 4854, 4859, 4864, 4867,
     4869, 4874, 4887, 4892, 4897, 4899, 4901, 4910, 4912, 4922,
     4924, 4932, 4934, 4945, 4953, 4955, 4957, 4966, 4968, 4975,
     4977, 4980, 4986, 4988, 4995, 4998, 5024, 5033, 5047, 5058,
        0,  313, 5101, 5031, 5155, 5073, 5078, 5067, 5082, 5105,
     5108, 5120, 5123, 5142, 5166, 5174, 5169, 5177, 5180, 5201,
     5207, 5213, 5215, 5219, 5237, 5239, 5242, 5260, 5264, 5266,

     5268, 5286, 5290, 5294, 5298, 5309, 5317, 5321, 5323, 5349,
     5140, 5372, 5361,    0,  306, 5426, 5379, 5480, 5398, 5408,
     5440, 5534, 5452, 5588,  296, 5642, 5454, 5696, 5465, 5484,
     5505, 5413, 5502, 5516, 5461, 5538, 5552, 5560, 5565, 5591,
     5606, 5609, 5645, 5614, 5611, 5649, 5675, 5686, 5750, 5707,
     5804,  289, 5858, 5714, 5912, 5725, 5731, 5754, 5768, 5776,
     5807, 5676, 5822, 5833, 5842, 5841, 5966, 5869, 5884, 5895,
     5018, 5473, 5319, 5366, 5511, 5540, 5756, 5764, 5878, 5546,
     5774, 5880, 5899, 5906, 5932, 5920, 5514, 5924, 5892, 5935,
     5943, 5946, 5970, 5973, 5976, 5978, 5980, 5988, 5984, 5991,

     5999, 6003, 6006, 6013, 6017, 6021, 6028, 6032, 6035, 6039,
     6041, 6050, 6053, 6059, 6061, 6065, 6072, 6068, 6079, 6112,
     6121, 6116,    0, 6130, 6140, 6153, 6149, 6152, 6120, 6155,
     6157, 6092, 6175, 6178, 6180, 6198, 6200, 6202, 6204, 6222,
     6224, 6236, 6242, 6247, 6250, 6262, 6268, 6274, 6276, 6287,
     6289, 6315, 6324, 6325,    0, 6339, 6349, 6362, 6366, 6379,
     6374,    0, 6390, 6399, 6408, 6398, 6410, 6422, 6424, 6430,
     6435, 6448, 6459, 6461, 6473, 6479, 6487, 6493, 6520, 6490,
     6520,    0, 6531, 6544, 6554, 6543, 6554, 6556, 6567, 6569,
     6581, 6601, 6597, 6600, 6335, 6395, 6511, 6433, 6603, 6606,

     6608, 6611, 6613, 6631, 6633, 6636, 6639, 6644, 6646, 6657,
     6659, 6665, 6667, 6669, 6671, 6678, 6689, 6691, 6697, 6699,
     6701, 6709, 6711, 6719, 6721, 6724, 6750, 6759, 6758, 6760,
     6763, 6766, 6771, 6784, 6789, 6792, 6807, 6810, 6812, 6825,
     6830, 6833, 6844, 6848, 6852, 6856, 6870, 6876, 6878, 6904,
     6921, 6928, 6937, 6917, 6936, 6939, 6941, 6959, 6962, 6884,
     6970, 6982, 6985, 6990, 7019, 7028, 6993, 7018, 7029, 7031,
     7037, 7040, 7042, 6804, 6947, 7052, 7060, 6951, 7063, 7065,
     7071, 7078, 7083, 7086, 7090, 7093, 7096, 7098, 7104, 7111,
     7116, 7122, 7136, 7124, 7149, 7155, 7160, 7168, 7130, 7174,

     7180, 7182, 7193, 7201, 7204, 7206, 7212, 7225, 7227, 7230,
     7238, 7249, 7252, 7257, 7270, 7272, 7276, 7278, 7291, 7178,
     7299, 7301, 7303, 7305, 7310, 7312, 7314, 7324, 7332, 7334,
     7337, 7345, 7356, 7364, 7370, 7375, 7378, 7397, 7399, 7402,
     7410, 7422, 7425, 7436, 7430, 7448, 7456, 7459, 7470, 7434,
     7479, 7428, 7481, 7485, 7493, 7504, 7516, 7518, 7524, 7529,
     7537, 7548, 7550, 7556, 7561, 7526, 7558, 7579, 7583, 7585,
     7587, 7598, 7593, 7606, 7611, 7619, 8541, 7651, 7662, 7673,
     7684, 7695, 7702, 7712, 7719, 7729, 7736, 7746, 7753, 7763,
     7770, 7780, 7791, 7802, 7813, 7823, 7829, 7836, 7843, 7850,

     7857, 7867, 7878, 7888, 7899, 7909, 7920, 7931, 7941, 7952,
     7962, 7973, 7984, 7995, 8006, 8017, 8028, 8039, 8050, 8061,
     8072, 8083, 8094, 8105, 8116, 8127, 8138, 8149, 8160, 8171,
     8182, 8193, 8204, 8215, 8226, 8233, 8244, 8255, 8266, 8277,
     8288, 8299, 8310, 8321, 8332, 8343, 8350, 8361, 8372, 8383,
     8394, 8405, 8416, 8423, 8434, 8445, 8456, 8467, 8478, 8485,
     8496, 8507, 8518, 8529
    } ;

static yyconst flex_int16_t yy_def[1365] =
    {   0,
     1277,    1, 1277,    3, 1277,    5, 1278, 1278, 1277,    9,
     1277,   11,   11,   13, 1279, 1279, 1280, 1280, 1281, 1281,
     1282, 1282, 1277, 1277, 1277, 1277, 1277, 1283, 1284, 1277,
     1283, 1277, 1283, 1283, 1283, 1283, 1283, 1277, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1285, 1286, 1277, 1285, 1285, 1285, 1285, 1285, 1285, 1277,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1287, 1288,
     1277, 1287, 1287, 1287, 1287, 1287, 1287, 1277, 1287, 1277,

     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1289, 1290, 1277,
     1277, 1289, 1277, 1289, 1289, 1289, 1289, 1277, 1277, 1289,
     1277, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1277, 1277, 1291, 1292, 1291, 1291,
     1291, 1291, 1277, 1291,  144, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1277, 1277, 1277, 1277, 1293, 1277,
     1277, 1277, 1277, 1294, 1277, 1277, 1295, 1277, 1277, 1296,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1283, 1284,
     1283, 1297, 1284, 1284, 1283, 1283, 1283, 1277, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,

     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1285, 1286, 1285, 1285, 1298, 1286, 1286,
     1285, 1285, 1285, 1285, 1285, 1277, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,

       77, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1287, 1288, 1287,
     1287, 1299, 1288, 1288, 1287, 1287, 1277, 1277, 1287, 1277,
     1287, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1289, 1290,
     1289, 1289, 1300, 1290, 1290, 1289, 1289, 1289, 1277, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1291, 1292, 1291, 1291, 1301, 1292, 1292, 1291, 1291, 1277,
      144, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1277, 1277, 1277, 1277,

     1277, 1293, 1277, 1277, 1277, 1294, 1295, 1296, 1277, 1283,
     1302, 1303, 1303, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1285, 1304, 1305,

     1305, 1285, 1285, 1285, 1285,   77, 1285, 1285, 1285,   77,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1287, 1306, 1307, 1307, 1277, 1277, 1277, 1277, 1308,
     1308, 1289, 1309, 1310, 1310, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1291, 1311, 1312,
     1312, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1277, 1277, 1302, 1302, 1308,  413, 1313, 1314,  413,

     1315, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1304, 1304,  501, 1316,  501, 1317,  501, 1318, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,

     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1306, 1306,  545, 1319,  545, 1320,  545, 1321, 1277,
     1277, 1322, 1309, 1309,  555, 1323,  555, 1324,  555, 1325,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1311, 1311,  581, 1326,  581, 1327,  581, 1328, 1291,  583,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1313, 1313, 1322, 1314, 1329,  795, 1330, 1308,  413,

     1331, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1316, 1316, 1317, 1332,
      869,  869, 1333, 1308, 1334, 1335, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,

     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1319,
     1319, 1320, 1337,  912,  912, 1338, 1308, 1339, 1340, 1341,
     1341, 1342, 1343, 1342,  924, 1344, 1308, 1345, 1346, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1348, 1348, 1349, 1350,
     1349,  951, 1351, 1308, 1352, 1353, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1355, 1355, 1356, 1357, 1358, 1359, 1359,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,

     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1332,
     1332, 1356,  869, 1361, 1335, 1335, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1337, 1337, 1356,  912, 1362, 1340, 1340, 1343, 1343,
     1356,  924, 1363, 1346, 1346, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1350, 1350,
     1356,  951, 1364, 1353, 1353, 1354, 1354, 1354, 1354, 1354,
     1354, 1358, 1358, 1360, 1360, 1360, 1360, 1360, 1360, 1360,

     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1361, 1361, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1362,
     1362, 1363, 1363, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1364, 1364, 1354, 1354, 1354, 1354,
     1354, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,

     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1354, 1354, 1354, 1354, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1354, 1354, 1360,
     1360, 1360, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1347, 1347, 1347, 1347, 1347, 1360, 1360, 1336, 1336, 1336,
     1336, 1347, 1360, 1336, 1347, 1336,    0, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,

     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277
    } ;

static yyconst flex_int16_t yy_nxt[8598] =
    {   0,
       24,   25,   26,   24,   27,   25,   25,   28,   29,   30,
       30,   31,   28,   32,   33,   34,   35,   36,   28,   28,
       28,   30,   28,   30,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   28,   46,   28,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       28,   28,   32,   32,   28,   28,   24,   25,   26,   24,
       27,   25,   25,   61,   62,   63,   63,   64,   65,   63,
       66,   65,   61,   61,   67,   68,   61,   63,   61,   63,
       69,   70,   71,   61,   72,   73,   74,   75,   76,   61,
       77,   78,   61,   79,   80,   61,   81,   82,   61,   83,

       84,   85,   86,   87,   61,   61,   61,   61,   63,   63,
       88,   61,   24,   25,   26,   24,   27,   25,   25,   89,
       90,   91,   91,   92,   89,   91,   93,   94,   89,   95,
       96,   89,   89,   91,   89,   91,   97,   98,   89,   89,
       89,   89,   89,   89,   89,   89,   99,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,  100,  100,   89,   89,  102,  103,
      104,  105,  102,  102,  168,  178,  168,  168,  106,  178,
      178,  107,  102,  103,  104,  105,  102,  102,  168,  178,
      168,  168,  106,  178,  178,  107,   24,   25,   26,   24,

       27,   25,   25,  108,  109,  110,  111,  112,  108,  113,
      114,  115,  108,  108,  116,  117,  108,  118,  108,  119,
      120,  121,  122,  108,  123,  124,  108,  125,  126,  108,
      127,  108,  108,  128,  129,  108,  130,  131,  108,  132,
      133,  134,  108,  108,  108,  108,  108,  108,  135,  135,
      108,  108,  136,   25,   26,   24,   27,   25,   25,  137,
      138,  136,  136,  139,  137,  136,  140,  141,  137,  137,
      137,  137,  137,  136,  137,  136,  142,  143,  137,  137,
      144,  137,  145,  137,  137,  137,  146,  147,  137,  137,
      148,  137,  149,  150,  137,  151,  152,  137,  153,  154,

      137,  137,  137,  137,  136,  136,  137,  137,  155,  156,
      157,  158,  155,  155, 1081,  160,  161,  180,  161,  160,
      160, 1061,  162,  160,  161,  179,  161,  160,  160,  264,
      162, 1054,  318,  181,  182,  137,  163,  137, 1022,  184,
      597,  137,  137,  270,  163,  137,  324,  137,  137,  180,
      137,  137,  185,  137,  137,  165,  166,  966,  166,  165,
      165,  166,  165,  166,  165,  181,  182,  165,  169,  180,
      171,  169,  172,  169,  339,  186,  169,  173,  174,  180,
      371,  180,  773,  180,  597,  181,  182,  180,  345,  799,
      175,  187,  187,  180,  377,  181,  182,  181,  182,  181,

      182,  181,  181,  181,  188,  181,  409,  409,  773,  181,
      182,  179,  189,  181,  190,  181, 1277,  183,  745,  180,
      176,  177,  191,  169,  169,  184,  171,  169,  172,  169,
      192,  180,  169,  173,  174,  181,  182, 1277,  269,  180,
     1277,  323,  180,  745,  181,  181,  175,  181,  182,  409,
      409,  193,  196,  180,  194,  181,  182,  195,  181,  182,
      197,  198,  328,  199,  201,  218,  200,  180,  179,  181,
      182,  328,  264,  180,  202,  180,  176,  177,  734,  169,
      203,  734,  184,  181,  182,  204,  270,  205,  206,  181,
      182,  181,  182,  213,  207,  214,  208,  209,  180,  210,

      683,  180,  211,  683,  212,  874,  216,  683,  215,  597,
      217, 1277,  344,  398,  181,  182,  219,  181,  182,  222,
      223,  180,  264,  224,  403,  180,  404,  225,  398,  180,
      220, 1277,  376,  226,  221,  180,  270,  181,  182,  227,
      405,  181,  182,  228,  231,  181,  182,  236,  232,  180,
      742,  181,  182,  229,  180,  233,  234,  734,  235,  230,
      742,  237,  917,  180,  238,  181,  182,  239,  318,  240,
      181,  182,  242,  241,  253,  254,  243,  318,  333,  181,
      182,  180,  324,  244,  255,  333,  339,  339,  180, 1277,
      594,  324,  245,  180,  256,  265,  741,  181,  182,  257,

      345,  345,  266,  258,  181,  182,  371,  259,  740,  181,
      182,  267,  268,  260,  261,  246,  180,  593,  247,  265,
      377,  180,  271,  248,  745,  249,  266,  265,  250,  927,
      251,  252,  181,  182,  266,  267,  268,  181,  182,  592,
      262,  265,  551,  267,  268,  265,  263,  272,  266,  773,
      371,  410,  266,  273,  954,  274,  265,  267,  268,  265,
      550,  267,  268,  266,  377,  595,  266,  549,  275,  498,
      267,  267,  267,  268,  267,  267,  276,  542,  548,  265,
      338,  265,  267,  682,  267,  265,  266,  265,  266,  180,
      337,  733,  266,  265,  266,  267,  268,  267,  268, 1277,

      266,  267,  268,  267,  268,  181,  188,  285,  552,  267,
      268,  291, 1277,  267,  267,  277,  265,  289,  286,  265,
      290,  287,  744,  266,  265,  578,  266, 1277,  288, 1277,
      410,  266,  267,  268, 1277,  267,  268, 1277,  278,  772,
      267,  268,  265,  297,  595,  279,  280, 1277,  281,  266,
      282,  283,  498,  284,  265,  315,  265, 1277,  267,  268,
      298,  266,  265,  266,  299, 1277,  682, 1277,  681,  266,
      267,  268,  267,  268,  316,  292,  265,  293,  267,  268,
      265,  300, 1277,  266,  301,  294,  180,  266,  180,  412,
      295,  296,  267,  268,  265,  303,  267,  268,  302,  542,

      265,  266,  181,  182,  181,  182, 1277,  266,  180,  304,
      267,  268,  305,  733,  265,  306,  267,  268, 1277,  732,
      307,  266, 1277,  308,  181,  182, 1277,  265, 1277,  743,
      267,  268,  309,  310,  266,  319,  313,  311,  312,  317,
      414,  319,  320,  267,  268,  552,  314,  319,  320,  319,
      325,  321,  322, 1277,  320,  326,  320,  321,  322,  744,
     1277,  180, 1277,  321,  322,  321,  322,  327,  328,  327,
      327,  327,  327, 1277,  319, 1277,  319,  181,  182,  319,
     1277,  320, 1277,  320,  329,  329,  320,  319,  578,  180,
      321,  322,  321,  322,  320,  321,  330,  321,  321, 1277,

      415,  321,  772,  321,  322,  181,  182,  180, 1277,  321,
      419,  321,  332,  333,  334,  334,  332,  332,  331, 1277,
      771,  180,  335,  181,  182,  336,  334,  333,  334,  334,
      334,  334, 1277,  421, 1277, 1277,  335,  181,  182,  336,
      321,  321,  334,  333,  334,  334,  334,  334, 1277,  340,
     1277,  340,  335,  340,  346,  336,  341,  340,  341,  347,
      341, 1277, 1277,  180,  341,  342,  343,  342,  343,  342,
      343,  340, 1277,  342,  343,  340, 1277,  340,  341,  181,
      182, 1277,  341, 1277,  341, 1277, 1277,  342,  343,  348,
     1277,  342,  349,  342,  343,  342,  342,  340,  371,  342,

      418,  340, 1277,  340,  341,  371,  371,  342,  341,  342,
      341,  371,  180,  342,  343,  340, 1277,  342,  343,  342,
      343, 1277,  341, 1277, 1277, 1277, 1277,  353,  181,  182,
     1277,  342,  343,  350,  420,  351,  340, 1277,  342,  342,
      352,  340, 1277,  341,  340, 1277, 1277,  354,  341,  340,
      355,  341,  342,  343,  356, 1277,  341,  342,  343,  371,
      342,  343,  357,  340,  358,  342,  343,  360,  371, 1277,
      341,  361,  371,  958,  340,  371,  370, 1277,  359,  342,
      343,  341, 1277, 1277, 1277,  362, 1277,  340, 1277,  340,
      342,  343,  180,  364,  341,  340,  341,  180,  413,  363,

      372, 1277,  341,  342,  343,  342,  343,  373,  181,  182,
     1277,  342,  343,  181,  182,  367,  374,  375,  372,  365,
      372,  378,  366,  372, 1277,  373,  379,  373,  368, 1277,
      373,  372,  369,  433,  374,  375,  374,  375,  373,  374,
      375,  374,  374,  371,  180,  374, 1277,  374,  380, 1277,
      371,  371,  386,  374, 1277,  374,  371,  372, 1277,  372,
      181,  182,  387,  372,  373,  423,  373, 1277, 1277, 1277,
      373, 1277, 1277,  374,  375,  374,  375, 1277,  389,  374,
      375, 1277,  384, 1277,  374,  374,  372, 1277,  388,  372,
     1277, 1277, 1277,  373,  372, 1277,  373,  372, 1277,  390,

     1277,  373,  374,  375,  373,  374,  375, 1277,  381, 1277,
      374,  375, 1277,  374,  375,  382,  383,  372, 1277,  180,
      384,  385,  391,  372,  373,  372,  384,  187,  187,  392,
      373,  180,  373,  374,  375,  181,  182, 1277, 1277,  374,
      375,  374,  375,  396, 1277, 1277, 1277,  181,  182,  393,
     1277, 1277, 1277,  422, 1277,  394, 1277, 1277, 1277,  395,
      397,  398,  399,  399,  397,  397, 1277,  411,  181,  181,
      400, 1277,  181,  401,  399,  398,  399,  399,  399,  399,
      181, 1277,  181, 1277,  400, 1277,  180,  401,  399,  398,
      399,  399,  399,  399, 1277,  181,  181,  180,  400,  181,

     1277,  401,  181,  182, 1277,  180, 1277,  181, 1277,  181,
     1277,  181,  181,  181,  182,  424,  425,  426,  180, 1277,
     1277,  181,  182,  416,  427,  180,  417,  428,  180, 1277,
      180, 1277, 1277,  180,  181,  182, 1277,  429,  181,  181,
      180,  181,  182,  180,  181,  182,  181,  182,  180,  181,
      182,  432,  434,  435,  430,  431,  181,  182,  437,  181,
      182, 1277,  180, 1277,  181,  182, 1277, 1277, 1277,  180,
      436,  180, 1277,  180, 1277,  438,  180, 1277,  181,  182,
      180, 1277, 1277,  439,  440,  181,  182,  181,  182,  181,
      182,  180,  181,  182,  253,  446,  181,  182,  442,  180,

     1277,  180, 1277,  180, 1277, 1277,  180,  181,  182,  180,
      441,  443,  180, 1277,  180,  181,  182,  181,  182,  181,
      182,  447,  181,  182,  180,  181,  182, 1277,  181,  182,
      181,  182,  445,  180,  444,  448,  180, 1277, 1277,  180,
      181,  182,  180, 1277,  451,  180,  449,  180,  450,  181,
      182, 1277,  181,  182,  453,  181,  182, 1277,  181,  182,
     1277,  181,  182,  181,  182,  452,  180, 1277,  180, 1277,
      180,  454, 1277, 1277,  253,  457,  180,  456,  180,  455,
     1277,  180,  181,  182,  181,  182,  181,  182,  180,  458,
      180, 1277,  181,  182,  181,  182, 1277,  181,  182, 1277,

      459, 1277,  180, 1277,  181,  182,  181,  182, 1277,  180,
     1277,  180,  460,  461,  463,  462,  464,  180,  181,  182,
      180, 1277,  465,  467,  466,  181,  182,  181,  182,  180,
     1277, 1277, 1277,  181,  182,  468,  181,  182,  470, 1277,
     1277, 1277,  180, 1277, 1277,  181,  182, 1277,  469,  475,
      180, 1277,  180,  471, 1277, 1277,  472,  473,  181,  182,
      476,  180, 1277, 1277,  180,  474,  181,  182,  181,  182,
     1277,  477,  180, 1277, 1277, 1277,  180,  181,  182,  478,
      181,  182,  479,  180,  480,  180,  482,  180,  181,  182,
      483,  180,  181,  182,  484,  485,  481,  180, 1277,  181,

      182,  181,  182,  181,  182,  488,  486,  181,  182,  180,
     1277,  180, 1277,  181,  182,  487, 1277,  489,  180, 1277,
      180, 1277, 1277, 1277, 1277,  181,  182,  181,  182, 1277,
      180, 1277,  490,  492,  181,  182,  181,  182, 1277,  180,
      493, 1277,  265, 1277,  491,  496,  181,  182,  497,  266,
      494, 1277, 1277,  265, 1277,  181,  182,  495,  267,  268,
      266,  265, 1277, 1277, 1277, 1277, 1277, 1277,  266,  267,
      268,  499,  267,  267, 1277,  265,  267,  267,  276, 1277,
      265,  501,  266,  500,  267, 1277,  267,  266,  265, 1277,
      180,  267,  268,  265, 1277,  266,  267,  268, 1277, 1277,

      266,  265, 1277, 1277,  267,  268,  181,  182,  266,  267,
      268, 1277, 1277,  180, 1277,  267,  267,  267,  268,  267,
      267,  265, 1277,  267, 1277,  265, 1277,  265,  266,  181,
      182,  267,  266,  267,  266,  180, 1277,  267,  268,  265,
     1277,  267,  268,  267,  268,  503,  266, 1277,  602, 1277,
      180,  181,  182,  265, 1277,  267,  268,  502,  504,  282,
      266,  265,  267,  267,  265, 1277,  181,  182,  266,  267,
      268,  266,  265, 1277, 1277,  265,  603,  267,  268,  266,
      267,  268,  266,  505,  506, 1277, 1277, 1277,  267,  268,
      265,  267,  268,  507, 1277, 1277, 1277,  266,  265, 1277,

     1277,  265, 1277,  265,  508,  266,  267,  268,  266,  265,
      266,  510,  509, 1277,  267,  268,  266,  267,  268,  267,
      268, 1277, 1277,  265, 1277,  267,  268, 1277, 1277, 1277,
      266, 1277, 1277, 1277,  265,  513,  265, 1277,  511,  267,
      268,  266,  515,  266,  512, 1277,  516,  265, 1277,  265,
      267,  268,  267,  268,  266,  265,  266, 1277,  517, 1277,
      514, 1277,  266,  267,  268,  267,  268,  518,  265, 1277,
     1277,  267,  268,  265, 1277,  266, 1277,  519, 1277,  265,
      266,  265, 1277, 1277,  267,  268,  266,  265,  266,  267,
      268, 1277,  521, 1277,  266,  267,  268,  267,  268,  264,

      520,  264,  523,  267,  268,  265, 1277, 1277,  524,  264,
      522,  527,  266,  265,  525,  526, 1277,  265, 1277,  529,
      266,  267,  268,  180,  266, 1277, 1277, 1277,  265,  267,
      268,  265,  528,  267,  268,  266,  265, 1277,  266,  181,
      182,  604, 1277,  266,  267,  268,  531,  267,  268,  530,
      532,  265,  267,  268,  265,  534,  265, 1277,  266, 1277,
      533,  266,  265,  266, 1277, 1277, 1277,  267,  268,  266,
      267,  268,  267,  268, 1277, 1277,  536,  265,  267,  268,
      265,  538,  265, 1277,  266,  265,  535,  266,  265,  266,
     1277,  537,  266,  267,  268,  266,  267,  268,  267,  268,

      319,  267,  268, 1277,  267,  268,  319,  320,  540, 1277,
     1277,  319,  539,  320, 1277, 1277,  321,  322,  320, 1277,
      541, 1277,  321,  322,  543,  321,  321,  321,  330,  321,
     1277,  319,  321,  321,  544,  319,  321,  321,  320,  321,
     1277,  545,  320,  319,  321, 1277,  321,  321,  322, 1277,
      320,  321,  322,  327,  328,  327,  327,  327,  327,  321,
      322,  180, 1277,  546,  319, 1277,  547, 1277,  321,  321,
     1277,  320,  329,  329, 1277,  321,  321,  181,  182,  607,
      321,  322,  332,  333,  334,  334,  332,  332, 1277,  553,
      342,  342,  335, 1277,  342,  336,  334,  333,  334,  334,

      334,  334,  342,  340,  342,  340,  335,  340, 1277,  336,
      341, 1277,  341, 1277,  341, 1277, 1277, 1277, 1277,  342,
      343,  342,  343,  342,  349,  340, 1277, 1277,  554,  340,
     1277,  340,  341,  342,  342,  555,  341, 1277,  341,  342,
      342,  342,  343,  342, 1277,  342,  343,  342,  343,  340,
     1277,  342,  340,  342,  340, 1277,  341,  340, 1277,  341,
      340,  341,  180, 1277,  341,  342,  343,  341,  342,  343,
      342,  343, 1277,  342,  343, 1277,  342,  343,  181,  182,
     1277, 1277,  342,  342,  559,  556,  340,  557,  558,  340,
     1277,  560,  340,  341,  340,  561,  341,  605, 1277,  341,

     1277,  341,  342,  343,  564,  342,  343,  340,  342,  343,
      342,  343, 1277, 1277,  341,  340,  565, 1277,  562, 1277,
      340, 1277,  341,  342,  343,  180,  563,  341,  340,  566,
     1277,  342,  343,  340, 1277,  341,  342,  343, 1277,  340,
      341,  181,  182,  568,  342,  343,  341, 1277, 1277,  342,
      343, 1277,  567,  340, 1277,  342,  343,  564,  569,  180,
      341,  340, 1277, 1277,  570,  571,  572,  606,  341,  342,
      343, 1277,  340, 1277, 1277,  181,  182,  342,  343,  341,
     1277, 1277,  573,  574,  340, 1277,  340, 1277,  342,  343,
     1277,  341,  340,  341, 1277, 1277,  575,  372, 1277,  341,

      342,  343,  342,  343,  373, 1277,  576,  180,  342,  343,
      372, 1277,  372,  374,  375, 1277, 1277,  373, 1277,  373,
     1277,  577,  180,  181,  182,  609,  374,  375,  374,  380,
      579,  374,  374,  372, 1277,  374,  580, 1277,  181,  182,
      373,  372, 1277,  374, 1277,  374, 1277,  581,  373,  374,
      375,  374,  374,  372,  610,  374, 1277,  374,  375, 1277,
      373,  372, 1277,  374, 1277,  374,  372, 1277,  373,  374,
      375,  582,  372,  373,  374,  374, 1277,  374,  375,  373,
      384, 1277,  374,  375, 1277, 1277,  372, 1277,  374,  375,
     1277, 1277,  372,  373,  374,  374, 1277,  372, 1277,  373,

     1277,  384,  374,  375,  373,  372, 1277,  583,  374,  375,
     1277,  372,  373,  374,  375, 1277,  372,  585,  373, 1277,
     1277,  374,  375,  373,  372, 1277, 1277,  374,  375,  584,
     1277,  373,  374,  375, 1277,  586, 1277,  384,  372, 1277,
      374,  375,  372, 1277, 1277,  373,  372, 1277, 1277,  373,
      372, 1277,  384,  373,  374,  375,  587,  373,  374,  375,
     1277,  589,  374,  375, 1277,  180,  374,  375, 1277, 1277,
     1277, 1277,  590,  588,  397,  398,  399,  399,  397,  397,
      180,  181,  182,  180,  400,  591, 1277,  401,  399,  398,
      399,  399,  399,  399,  608, 1277,  181,  182,  400,  181,

      182,  401,  596,  180, 1277,  596, 1277, 1277, 1277, 1277,
      598,  596,  596,  611,  180,  596,  612, 1277,  618,  181,
      182,  180,  599,  596,  617,  596,  600,  601,  180, 1277,
      181,  182,  180, 1277,  613,  614, 1277,  181,  182, 1277,
     1277,  180, 1277, 1277,  181,  182,  180, 1277,  181,  182,
      619,  615,  616, 1277,  596,  596,  596,  181,  182,  596,
     1277, 1277,  181,  182,  598,  596,  596,  180, 1277,  596,
      180, 1277,  180, 1277,  620,  180,  599,  596, 1277,  596,
      600,  601, 1277,  181,  182,  180,  181,  182,  181,  182,
     1277,  181,  182, 1277,  623, 1277, 1277,  180, 1277,  622,

      180,  181,  182,  180, 1277,  180,  253,  621,  596,  596,
     1277, 1277,  624,  181,  182,  180,  181,  182,  180,  181,
      182,  181,  182, 1277, 1277,  180, 1277,  625, 1277,  180,
     1277,  181,  182,  180,  181,  182,  180, 1277,  627,  630,
      626,  181,  182,  180,  628,  181,  182,  629,  180,  181,
      182,  631,  181,  182,  632,  180, 1277,  180, 1277,  181,
      182,  180, 1277,  634,  181,  182,  180, 1277,  180,  633,
     1277,  181,  182,  181,  182,  180, 1277,  181,  182,  180,
      636, 1277,  181,  182,  181,  182,  180,  635, 1277, 1277,
      180,  181,  182,  180, 1277,  181,  182,  639,  641,  637,

      180,  638,  181,  182,  180,  640,  181,  182,  180,  181,
      182,  642, 1277, 1277,  180, 1277,  181,  182, 1277, 1277,
      181,  182,  643, 1277,  181,  182,  180, 1277,  180,  645,
      181,  182, 1277, 1277,  180,  646,  644, 1277,  180,  647,
      180, 1277,  181,  182,  181,  182, 1277, 1277,  180,  648,
      181,  182,  180,  650,  181,  182,  181,  182, 1277, 1277,
      180, 1277,  180,  649,  181,  182,  652,  180,  181,  182,
     1277,  180, 1277, 1277, 1277,  651,  181,  182,  181,  182,
     1277, 1277,  655,  181,  182,  180,  653,  181,  182,  180,
      654,  180, 1277,  657, 1277, 1277,  180,  656,  180, 1277,

      180,  181,  182, 1277, 1277,  181,  182,  181,  182,  180,
     1277,  659,  181,  182,  181,  182,  181,  182,  180,  253,
      658, 1277, 1277,  180, 1277,  181,  182,  180, 1277,  180,
      662,  180, 1277, 1277,  181,  182,  660,  661, 1277,  181,
      182, 1277, 1277,  181,  182,  181,  182,  181,  182,  663,
      180, 1277,  180,  668, 1277,  664,  665,  669, 1277,  667,
      180, 1277,  180,  666, 1277, 1277,  181,  182,  181,  182,
      670,  180, 1277,  180, 1277,  671,  181,  182,  181,  182,
     1277,  674, 1277,  180, 1277,  180,  672,  181,  182,  181,
      182, 1277,  596, 1277,  183,  596,  673,  180,  183,  181,

      182,  181,  182,  180, 1277, 1277, 1277, 1277,  676,  265,
      678,  675,  677,  181,  182,  265,  266,  265, 1277,  181,
      182,  180,  266, 1277,  266,  267,  268, 1277,  679,  265,
     1277,  267,  268,  267,  268, 1277,  266,  181,  182, 1277,
      680,  596, 1277, 1277,  596,  267,  268,  689, 1277,  684,
      596,  596,  265,  690,  596, 1277,  685, 1277,  802,  266,
      265,  686,  596, 1277,  596,  687,  688,  266,  267,  268,
      264,  265,  692, 1277,  265, 1277,  267,  268,  266, 1277,
      264,  266,  691,  180, 1277,  693,  264,  267,  268, 1277,
      267,  268, 1277,  596,  596,  596, 1277, 1277,  596,  181,

      182, 1277, 1277,  684,  596,  596,  694, 1277,  596,  805,
      685,  695,  264, 1277,  696,  686,  596,  265,  596,  687,
      688,  520,  264,  697,  266,  265, 1277,  698,  699,  265,
      700, 1277,  266,  267,  268, 1277,  266,  265, 1277,  701,
     1277,  267,  268, 1277,  266,  267,  268,  596,  596,  265,
     1277,  265, 1277,  267,  268,  702,  266, 1277,  266,  703,
     1277, 1277,  705,  265, 1277,  267,  268,  267,  268,  265,
      266,  265,  704, 1277,  706,  265,  266, 1277,  266,  267,
      268, 1277,  266,  265, 1277,  267,  268,  267,  268, 1277,
      266,  267,  268,  707,  708,  265, 1277,  265,  709,  267,

      268, 1277,  266,  265,  266,  711,  710, 1277,  265, 1277,
      266,  267,  268,  267,  268,  266,  265,  712, 1277,  267,
      268,  265, 1277,  266,  267,  268, 1277, 1277,  266,  265,
     1277, 1277,  267,  268,  713,  714,  266,  267,  268,  716,
      265, 1277,  265, 1277,  715,  267,  268,  266, 1277,  266,
     1277,  718,  717,  265, 1277,  265,  267,  268,  267,  268,
      266,  265,  266, 1277, 1277,  719,  265, 1277,  266,  267,
      268,  267,  268,  266, 1277,  721, 1277,  267,  268, 1277,
      265, 1277,  267,  268, 1277,  265, 1277,  266, 1277, 1277,
     1277,  723,  266,  265, 1277,  720,  267,  268,  722,  265,

      266,  267,  268, 1277, 1277,  725,  266,  265, 1277,  267,
      268,  726, 1277,  265,  266,  267,  268,  724, 1277,  727,
      266, 1277, 1277,  267,  268,  265, 1277, 1277, 1277,  267,
      268,  319,  266,  340, 1277,  728,  340,  729,  320,  340,
      341,  267,  268,  341,  730, 1277,  341,  321,  322,  342,
      343, 1277,  342,  343, 1277,  342,  343,  340, 1277, 1277,
     1277,  731,  596, 1277,  341,  596, 1277, 1277,  751,  752,
      735,  596,  596,  342,  343,  596, 1277,  736, 1277, 1277,
      753, 1277,  737,  596,  340,  596,  738,  739,  340, 1277,
      340,  341,  340,  754,  180,  341,  340,  341, 1277,  341,

      342,  343, 1277,  341,  342,  343,  342,  343,  342,  343,
      181,  182,  342,  343,  596,  596,  596, 1277, 1277,  596,
      756,  755, 1277,  564,  735,  596,  596,  340, 1277,  596,
      803,  736, 1277, 1277,  341,  757,  737,  596,  340,  596,
      738,  739,  180,  342,  343,  341,  340, 1277, 1277,  340,
     1277, 1277,  758,  341,  342,  343,  341, 1277,  181,  182,
      762, 1277,  342,  343, 1277,  342,  343, 1277,  596,  596,
      596, 1277, 1277,  596, 1277, 1277,  759,  760,  746,  596,
      596,  340, 1277,  596,  761,  747,  180, 1277,  341,  340,
      748,  596,  340,  596,  749,  750,  341,  342,  343,  341,

      340, 1277,  181,  182, 1277,  342,  343,  341,  342,  343,
     1277, 1277, 1277,  340,  806, 1277,  342,  343,  564,  340,
      341,  564,  596,  596,  596, 1277,  341,  596,  763,  342,
      343,  764,  746,  596,  596,  342,  343,  596, 1277,  747,
      180,  765,  766,  340,  748,  596, 1277,  596,  749,  750,
      341, 1277,  180, 1277,  340, 1277,  181,  182,  340,  342,
      343,  341,  813,  767, 1277,  341,  340, 1277,  181,  182,
      342,  343, 1277,  341,  342,  343,  596,  596,  769,  768,
      372, 1277,  342,  343,  770, 1277,  180,  373,  372,  807,
     1277, 1277, 1277,  372, 1277,  373,  374,  375,  596, 1277,

      373,  596,  181,  182,  374,  375,  774,  596,  596,  374,
      375,  596,  814,  775, 1277,  785, 1277, 1277,  776,  596,
      372,  596,  777,  778,  779, 1277,  372,  373,  372, 1277,
     1277,  372, 1277,  373, 1277,  373,  374,  375,  373, 1277,
      180, 1277,  374,  375,  374,  375, 1277,  374,  375,  786,
      596,  596,  596,  180, 1277,  596,  181,  182,  810, 1277,
      774,  596,  596,  787,  384,  596, 1277,  775,  788,  181,
      182,  372,  776,  596, 1277,  596,  777,  778,  373,  372,
     1277, 1277,  372, 1277,  180, 1277,  373,  374,  375,  373,
      816,  789, 1277, 1277, 1277,  374,  375, 1277,  374,  375,

      181,  182, 1277, 1277,  596,  596,  372,  790,  596,  183,
      791,  596, 1277,  373,  183,  180,  597,  180,  384, 1277,
      804, 1277,  374,  375,  180, 1277, 1277, 1277, 1277,  780,
      793,  181,  182,  181,  182, 1277,  781, 1277,  782, 1277,
      181,  182,  783,  784,  180,  781,  794,  180, 1277,  794,
      808, 1277,  809, 1277,  796,  794,  794, 1277,  180,  794,
      181,  182,  817,  181,  182,  180, 1277,  794,  818,  794,
      797,  798,  180,  811,  181,  182,  180, 1277, 1277,  812,
      180,  181,  182, 1277,  815,  180, 1277, 1277,  181,  182,
      180, 1277,  181,  182,  819, 1277,  181,  182,  794,  794,

      596,  181,  182,  596, 1277, 1277,  181,  182,  801,  600,
      600,  820,  180,  600, 1277,  180,  822,  180,  821,  180,
     1277,  600,  180,  600,  596,  596, 1277,  823,  181,  182,
      824,  181,  182,  181,  182,  181,  182, 1277,  181,  182,
     1277, 1277,  826,  828,  180, 1277,  180, 1277,  180, 1277,
      825,  180,  600,  600,  180, 1277,  180,  827, 1277, 1277,
      181,  182,  181,  182,  181,  182,  180,  181,  182,  180,
      181,  182,  181,  182,  180,  830, 1277,  180, 1277,  831,
      829, 1277,  181,  182,  180,  181,  182, 1277,  180, 1277,
      181,  182,  832,  181,  182,  180, 1277,  180,  833,  180,

      181,  182,  836,  835,  181,  182,  834,  180, 1277,  180,
      837,  181,  182,  181,  182,  181,  182,  180, 1277,  180,
     1277,  839,  180,  181,  182,  181,  182, 1277,  838, 1277,
      180, 1277,  180,  181,  182,  181,  182, 1277,  181,  182,
      180, 1277,  180, 1277,  842,  841,  181,  182,  181,  182,
      180,  843,  180, 1277,  840, 1277,  181,  182,  181,  182,
      180, 1277,  845, 1277, 1277,  180,  181,  182,  181,  182,
      847,  180,  844,  180, 1277, 1277,  181,  182,  180, 1277,
      846,  181,  182,  180, 1277, 1277,  848,  181,  182,  181,
      182,  849,  180,  850,  181,  182,  180, 1277,  180,  181,

      182,  474, 1277, 1277,  180, 1277,  180, 1277,  181,  182,
      180, 1277,  181,  182,  181,  182,  180, 1277, 1277,  851,
      181,  182,  181,  182,  180, 1277,  181,  182,  856,  180,
      852,  853,  181,  182,  854, 1277,  180, 1277, 1277, 1277,
      181,  182,  180,  855, 1277,  181,  182,  180, 1277,  180,
     1277,  858,  181,  182,  180,  857, 1277,  180,  181,  182,
      860, 1277, 1277,  181,  182,  181,  182,  180, 1277,  180,
      181,  182, 1277,  181,  182,  180, 1277, 1277,  859,  863,
      180,  861, 1277,  181,  182,  181,  182, 1277, 1277,  864,
      862,  181,  182,  865, 1277,  265,  181,  182,  596,  269,

      866,  596,  266, 1277,  269, 1277,  683, 1277, 1277, 1277,
      265,  267,  268, 1277, 1277,  877,  265,  266, 1277, 1277,
      868,  794,  180,  266,  794, 1277,  267,  268, 1277,  870,
      794,  794,  267,  268,  794, 1277,  871, 1277,  181,  182,
      265, 1277,  794,  265,  794,  872,  873,  266,  879, 1277,
      266,  265,  878, 1277,  265, 1277,  267,  268,  266,  267,
      268,  266, 1277, 1277, 1277,  265,  880,  267,  268, 1277,
      267,  268,  266,  794,  794,  596, 1277, 1277,  596, 1277,
      881,  267,  268,  876,  687,  687,  882,  265,  687, 1277,
      265, 1277, 1277,  180,  266,  520,  687,  266,  687,  596,

      596, 1277,  883,  267,  268,  265,  267,  268,  265,  181,
      182, 1277,  266, 1277,  975,  266,  265,  520, 1277,  265,
      520,  267,  268,  266,  267,  268,  266,  687,  687, 1277,
      520, 1277,  267,  268,  265,  267,  268,  885,  265, 1277,
      180,  266,  265, 1277, 1277,  266,  265,  884, 1277,  266,
      267,  268, 1277,  266,  267,  268,  181,  182,  267,  268,
      886, 1277,  267,  268,  887,  265,  976,  265, 1277,  265,
     1277,  180,  266,  265,  266, 1277,  266, 1277,  888, 1277,
      266,  267,  268,  267,  268,  267,  268,  181,  182,  267,
      268,  892,  265,  973,  265, 1277,  265, 1277,  889,  266,

     1277,  266,  180,  266,  890, 1277, 1277,  891,  267,  268,
      267,  268,  267,  268, 1277,  265, 1277,  265,  181,  182,
      265,  893,  266,  265,  266, 1277, 1277,  266, 1277, 1277,
      266,  267,  268,  267,  268,  894,  267,  268,  895,  267,
      268,  265, 1277,  265,  896, 1277,  265, 1277,  266,  265,
      266, 1277,  180,  266, 1277, 1277,  266,  267,  268,  267,
      268,  897,  267,  268, 1277,  267,  268,  265,  181,  182,
      265,  900, 1277, 1277,  266,  898,  899,  266,  265, 1277,
     1277,  265, 1277,  267,  268,  266,  267,  268,  266,  901,
     1277, 1277,  265, 1277,  267,  268,  265,  267,  268,  266,

      180, 1277, 1277,  266,  265, 1277, 1277,  902,  267,  268,
      906,  266,  267,  268,  903, 1277,  181,  182,  904,  974,
      267,  268,  265, 1277,  265, 1277, 1277,  265,  908,  266,
     1277,  266, 1277,  905,  266, 1277,  907, 1277,  267,  268,
      267,  268, 1277,  267,  268, 1277,  596,  323,  909,  596,
     1277, 1277,  323, 1277,  734, 1277, 1277,  180,  596,  344,
     1277,  596, 1277, 1277,  344, 1277,  745, 1277,  911,  794,
     1277, 1277,  794,  181,  182, 1277, 1277,  913,  794,  794,
      921,  340,  794, 1277,  914, 1277,  978,  180,  341,  340,
      794, 1277,  794,  915,  916,  180,  341,  342,  343, 1277,

      340,  930,  340,  181,  182,  342,  343,  341,  340,  341,
     1277,  181,  182,  340, 1277,  341,  342,  343,  342,  343,
      341,  794,  794,  596,  342,  343,  596,  931,  932,  342,
      343,  919,  738,  738,  340,  935,  738,  933,  340, 1277,
      564,  341,  180, 1277,  738,  341,  738,  596,  596,  340,
      342,  343,  934, 1277,  342,  343,  341,  340,  181,  182,
      936, 1277,  340, 1277,  341,  342,  343,  180,  985,  341,
     1277, 1277, 1277,  342,  343,  738,  738,  794,  342,  343,
      794, 1277,  937,  181,  182,  923,  794,  794,  340,  971,
      794, 1277,  924,  180,  938,  341, 1277, 1277,  794,  972,

      794,  925,  926,  564,  342,  343,  939,  340, 1277,  181,
      182,  340, 1277,  983,  341, 1277, 1277, 1277,  341, 1277,
      180, 1277, 1277,  342,  343,  940,  340,  342,  343,  794,
      794,  596,  941,  341,  596, 1277,  181,  182, 1277,  929,
      749,  749,  342,  343,  749, 1277,  942,  180, 1277, 1277,
      340,  977,  749,  340,  749,  596,  596,  341, 1277, 1277,
      341,  340, 1277,  181,  182,  340,  342,  343,  341,  342,
      343, 1277,  341,  990, 1277,  944, 1277,  342,  343,  340,
      943,  342,  343,  749,  749, 1277,  341,  372, 1277, 1277,
     1277,  945, 1277,  180,  373,  342,  343,  180,  564,  596,

      376,  372,  596,  374,  375,  376, 1277,  773,  373,  181,
      182, 1277,  372,  181,  182,  980,  946,  374,  375,  373,
     1277,  948,  794,  957,  979,  794, 1277, 1277,  374,  375,
      950,  794,  794,  372, 1277,  794, 1277,  951, 1277, 1277,
      373,  372,  781,  794,  372,  794,  952,  953,  373,  374,
      375,  373,  372, 1277, 1277,  372, 1277,  374,  375,  373,
      374,  375,  373,  781,  180, 1277,  781, 1277,  374,  375,
     1277,  374,  375, 1277,  794,  794,  596,  961, 1277,  596,
      181,  182,  960,  959,  956,  777,  777,  372, 1277,  777,
     1277,  372, 1277, 1277,  373,  372, 1277,  777,  373,  777,

      596,  596,  373,  374,  375,  180, 1277,  374,  375,  372,
     1277,  374,  375, 1277, 1277, 1277,  373, 1277, 1277,  180,
      962,  181,  182,  384,  180,  374,  375,  963,  777,  777,
     1277,  596,  183,  384,  596,  181,  182,  183, 1277,  597,
      181,  182,  981,  794,  183,  986,  794, 1277, 1277,  183,
      982,  795, 1277,  793,  794,  180, 1277,  794, 1277, 1277,
     1277, 1277,  796,  794,  794,  965, 1277,  794,  180,  600,
      600,  181,  182,  600, 1277,  794,  987,  794,  797,  798,
      180,  600,  180,  600,  181,  182, 1277,  596,  594, 1277,
      596, 1277, 1277,  594, 1277,  800,  181,  182,  181,  182,

     1277, 1277,  984,  180,  988,  989,  794,  794,  794,  970,
      180,  794,  600,  600, 1277, 1277,  968,  797,  797,  181,
      182,  797,  180, 1277,  991,  180,  181,  182,  180,  797,
      180,  797,  794,  794,  180, 1277,  180, 1277,  181,  182,
     1277,  181,  182, 1277,  181,  182,  181,  182,  992,  180,
      181,  182,  181,  182, 1277, 1277,  995,  180, 1277, 1277,
      797,  797,  180, 1277,  993,  181,  182,  180, 1277, 1277,
     1277,  994,  180,  181,  182,  180,  996,  180,  181,  182,
      997, 1277,  180,  181,  182, 1277,  998, 1277,  181,  182,
     1277,  181,  182,  181,  182,  180, 1277,  999,  181,  182,

      180, 1277, 1003, 1000, 1001,  180, 1002,  180, 1277,  180,
     1277,  181,  182, 1277, 1277, 1277,  181,  182,  180, 1277,
      180,  181,  182,  181,  182,  181,  182, 1005, 1277, 1006,
      180, 1004,  180, 1277,  181,  182,  181,  182, 1007, 1277,
      180, 1277,  180, 1277, 1277, 1009,  181,  182,  181,  182,
     1277, 1277, 1277,  180, 1277, 1008,  181,  182,  181,  182,
     1011,  180, 1277,  180, 1277,  180, 1277, 1010, 1012,  181,
      182, 1277, 1277, 1277,  180, 1277,  180,  181,  182,  181,
      182,  181,  182,  180, 1277,  180, 1277, 1013,  180, 1015,
      181,  182,  181,  182,  180, 1277,  180, 1277, 1014,  181,

      182,  181,  182,  180,  181,  182,  180, 1277, 1277, 1277,
      181,  182,  181,  182, 1016, 1277, 1277, 1277, 1277,  181,
      182, 1017,  181,  182,  596,  269,  180,  596, 1277, 1277,
      269, 1019,  683,  596, 1277,  269,  596, 1277, 1018,  269,
      687,  687,  181,  182,  687, 1277,  868,  794, 1277, 1277,
      794, 1277,  687, 1277,  687,  870,  794,  794,  794,  269,
      794,  794,  871, 1277,  269, 1277,  869, 1277,  794, 1277,
      794,  872,  873,  596,  681,  265,  596, 1277, 1277,  681,
     1021,  875,  266,  687,  687, 1277,  265, 1277, 1277, 1277,
      265,  267,  268,  266, 1277, 1026, 1277,  266, 1277,  794,

      794,  794,  267,  268,  794, 1277,  267,  268, 1277, 1024,
      872,  872, 1027,  265,  872, 1277,  265, 1277, 1277, 1277,
      266, 1277,  872,  266,  872,  794,  794, 1028,  265,  267,
      268,  265,  267,  268, 1277,  266, 1277, 1029,  266, 1277,
      596, 1277,  323,  596,  267,  268,  323,  267,  268, 1277,
      265, 1030, 1277,  872,  872,  596,  520,  266,  596, 1277,
     1277, 1277, 1277,  684,  596,  596,  267,  268,  596, 1277,
      685, 1031, 1277, 1277,  265, 1277,  596,  265,  596,  687,
      688,  266,  265, 1277,  266,  265, 1277, 1277,  265,  266,
      267,  268,  266,  267,  268,  266, 1277, 1277,  267,  268,

     1277,  267,  268, 1277,  267,  268, 1277,  596,  596,  265,
     1277, 1032, 1034, 1033, 1277,  265,  266, 1035, 1277, 1277,
     1036,  265,  266,  265, 1277,  267,  268,  265,  266, 1277,
      266,  267,  268, 1277,  266, 1037, 1038,  267,  268,  267,
      268, 1277, 1277,  267,  268,  265, 1277,  265, 1277, 1277,
      265, 1277,  266, 1277,  266, 1277, 1277,  266, 1039, 1277,
     1277,  267,  268,  267,  268, 1041,  267,  268,  265, 1040,
     1277, 1277,  265, 1277,  265,  266,  265, 1277, 1277,  266,
     1277,  266, 1277,  266,  267,  268, 1277, 1042,  267,  268,
      267,  268,  267,  268,  265, 1045, 1046, 1277,  265, 1277,

     1043,  266,  265, 1277, 1044,  266,  265, 1277, 1277,  266,
      267,  268, 1277,  266,  267,  268, 1277,  265,  267,  268,
     1047, 1277,  267,  268,  266,  265, 1277,  180, 1048,  265,
     1277,  265,  266,  267,  268, 1049,  266, 1277,  266, 1277,
     1277,  267,  268,  181,  182,  267,  268,  267,  268,  596,
      323, 1277,  596, 1277, 1051,  323, 1277,  734, 1277, 1277,
     1050,  794,  323, 1095,  794, 1277, 1277,  323, 1277,  912,
     1277,  911,  794, 1277,  180,  794, 1277, 1277, 1277, 1277,
      913,  794,  794, 1053, 1277,  794, 1277,  914,  738,  738,
      181,  182,  738,  794, 1277,  794,  915,  916,  596,  732,

      738,  596,  738, 1277,  732, 1277,  918, 1277,  596,  344,
     1277,  596, 1096, 1277,  344, 1277,  745, 1277, 1277, 1277,
     1058,  340, 1277, 1277,  794,  794,  794, 1277,  341,  794,
      921,  738,  738, 1277, 1056,  915,  915,  342,  343,  915,
      596, 1277,  344,  596, 1277, 1068,  344,  915, 1277,  915,
      794,  794,  794,  344, 1277,  794, 1277, 1277,  344, 1277,
      922, 1277, 1277,  749,  749,  596,  743,  749,  596,  340,
     1277,  743, 1277,  928, 1060,  749,  341,  749,  915,  915,
      596,  180, 1277,  596, 1277,  342,  343, 1065,  735,  596,
      596, 1277,  340,  596, 1277,  736, 1277,  181,  182,  341,

      564,  596, 1277,  596,  738,  739,  749,  749,  342,  343,
      340, 1277, 1277,  340, 1277, 1277, 1094,  341, 1066,  180,
      341, 1277,  180, 1277,  340, 1277,  342,  343, 1277,  342,
      343,  341,  596,  596,  794,  181,  182,  794,  181,  182,
      342,  343,  923,  794,  794, 1069,  340,  794,  180,  924,
     1067, 1097, 1277,  341,  180,  794, 1277,  794,  925,  926,
      340,  564,  342,  343,  181,  182, 1277,  341,  340, 1277,
      181,  182, 1277,  340, 1277,  341,  342,  343, 1277, 1098,
      341,  564, 1277, 1101,  342,  343,  794,  794,  794,  342,
      343,  794, 1070, 1277, 1071, 1277,  923,  794,  794,  340,

     1277,  794, 1277,  924, 1277, 1277,  341, 1277, 1277,  794,
     1072,  794,  925,  926,  340,  342,  343,  340, 1277,  340,
     1277,  341,  340, 1073,  341, 1277,  341, 1277, 1277,  341,
      342,  343, 1074,  342,  343,  342,  343, 1077,  342,  343,
      794,  794,  794, 1076, 1277,  794, 1277, 1277, 1277, 1277,
     1063,  925,  925,  340,  564,  925, 1277,  340, 1277, 1277,
      341, 1277, 1277,  925,  341,  925,  794,  794, 1277,  342,
      343, 1277, 1277,  342,  343,  596,  376, 1277,  596, 1078,
     1277,  376, 1277,  773,  372, 1075,  596, 1277,  376,  596,
     1277,  373,  376, 1277,  925,  925,  596,  948, 1277,  596,

      374,  375, 1090, 1277,  746,  596,  596,  794,  376,  596,
      794,  747, 1277,  376, 1277,  949, 1277,  596, 1277,  596,
      749,  750, 1277,  777,  777,  596,  771,  777,  596, 1080,
     1277,  771, 1277,  955, 1277,  777, 1277,  777, 1277,  372,
     1277, 1277, 1277, 1277, 1277, 1277,  373, 1085,  596,  596,
      794, 1277, 1277,  794, 1277,  374,  375, 1277,  950,  794,
      794, 1086,  372,  794,  180,  951,  777,  777, 1277,  373,
     1277,  794,  180,  794,  952,  953,  372, 1277,  374,  375,
      181,  182,  180,  373,  372,  423, 1277,  781,  181,  182,
     1277,  373,  374,  375, 1099, 1277, 1277, 1087,  181,  182,

      374,  375,  794,  794,  794, 1088, 1277,  794, 1102, 1277,
     1277, 1277,  950,  794,  794,  372, 1277,  794, 1277,  951,
     1277, 1277,  373, 1277, 1277,  794, 1277,  794,  952,  953,
      372,  374,  375,  794,  183, 1089,  794,  373, 1277,  183,
     1277,  795,  794, 1277,  183,  794,  374,  375,  183, 1277,
      797,  797, 1277, 1277,  797,  965,  794,  794,  794, 1277,
     1277,  794,  797, 1277,  797, 1091, 1083,  952,  952,  794,
      594,  952,  794, 1277, 1277,  594, 1277,  967, 1277,  952,
     1277,  952,  794,  794,  596,  594,  180,  596,  180, 1277,
      594, 1093,  800,  797,  797,  596, 1277,  594,  596, 1277,

      180,  594,  181,  182,  181,  182,  970,  180, 1100, 1277,
      952,  952,  596, 1277,  180,  596,  181,  182, 1277, 1277,
      774,  596,  596,  181,  182,  596, 1103,  775,  180, 1104,
      181,  182,  180,  596, 1105,  596,  777,  778, 1277, 1277,
      180, 1277, 1277,  180,  181,  182, 1277, 1277,  181,  182,
     1107,  180, 1277, 1277,  180, 1277,  181,  182, 1277,  181,
      182, 1277, 1277, 1108,  596,  596,  794,  181,  182,  794,
      181,  182, 1277, 1110,  796,  794,  794, 1106,  180,  794,
     1109,  180, 1277, 1277,  180, 1111,  180,  794,  180,  794,
      797,  798,  180, 1277,  181,  182,  180,  181,  182,  180,

      181,  182,  181,  182,  181,  182, 1277,  180,  181,  182,
     1113,  180,  181,  182,  180,  181,  182, 1277,  794,  794,
     1112,  180, 1114,  181,  182,  180, 1277,  181,  182,  180,
      181,  182, 1115, 1116, 1277, 1277,  180,  181,  182, 1118,
      180,  181,  182,  180, 1277,  181,  182,  180, 1277,  180,
     1277, 1117,  181,  182, 1277, 1277,  181,  182,  180,  181,
      182,  180, 1119,  181,  182,  181,  182,  180, 1277,  180,
     1277, 1120, 1277,  180,  181,  182,  180,  181,  182, 1277,
      180, 1277, 1277,  181,  182,  181,  182,  180, 1277,  181,
      182, 1277,  181,  182, 1277, 1121,  181,  182, 1122, 1277,

      265, 1277, 1125,  181,  182, 1277, 1277,  266, 1277, 1123,
     1124, 1126,  794,  269, 1277,  794,  267,  268,  269, 1277,
      869,  794, 1277,  269,  794,  872,  872,  269,  265,  872,
      794,  681, 1277,  794, 1021,  266,  681,  872, 1023,  872,
      596,  681, 1277,  596,  267,  268,  681, 1277,  875, 1277,
     1277, 1277, 1128,  596, 1277,  681,  596,  265, 1277,  681,
      265, 1277, 1026,  265,  266,  265, 1131,  266,  872,  872,
      266, 1277,  266,  267,  268, 1129,  267,  268, 1130,  267,
      268,  267,  268,  265, 1277, 1277,  265, 1277,  265, 1277,
      266, 1133, 1277,  266, 1277,  266, 1277, 1277, 1277,  267,

      268, 1132,  267,  268,  267,  268,  265, 1277,  265, 1277,
      265, 1277,  265,  266, 1277,  266, 1134,  266, 1277,  266,
     1277, 1277,  267,  268,  267,  268,  267,  268,  267,  268,
      265, 1277,  265, 1277, 1138, 1277, 1137,  266, 1277,  266,
     1277, 1277, 1277, 1135,  265, 1136,  267,  268,  267,  268,
      265,  266, 1139, 1277, 1277,  265, 1277,  266,  265, 1277,
      267,  268,  266, 1277, 1277,  266,  267,  268, 1277, 1140,
      265,  267,  268, 1277,  267,  268,  265,  266, 1141, 1277,
     1143, 1277,  265,  266,  265, 1277,  267,  268, 1277,  266,
     1142,  266,  267,  268, 1277,  265, 1277,  265,  267,  268,

      267,  268,  266, 1277,  266, 1145, 1146, 1144, 1277, 1277,
     1277,  267,  268,  267,  268,  794,  323, 1277,  794, 1277,
     1147,  323, 1277,  912,  794, 1277,  323,  794, 1277, 1149,
      323, 1277, 1148, 1277,  915,  915, 1277, 1053,  915,  794,
      732, 1277,  794,  180, 1277,  732,  915, 1055,  915,  596,
      732, 1277,  596, 1277, 1277,  732, 1277,  918, 1277,  181,
      182, 1151,  596, 1277,  732,  596,  794,  344,  732,  794,
     1277, 1058,  344, 1277,  922, 1277, 1277,  915,  915,  794,
     1277,  344,  794,  925,  925,  344, 1277,  925, 1060, 1277,
      794,  743, 1277,  794, 1277,  925,  743,  925, 1062,  596,

      743, 1277,  596,  180, 1277,  743,  340,  928,  596, 1277,
      743,  596, 1153,  341,  743, 1277, 1277, 1277,  340,  181,
      182, 1065,  342,  343, 1154,  341,  925,  925, 1277, 1277,
      340, 1277,  340, 1277,  342,  343, 1155,  341,  340,  341,
     1173,  180, 1277,  340, 1277,  341,  342,  343,  342,  343,
      341, 1277, 1277, 1277,  342,  343,  340,  181,  182,  342,
      343, 1277, 1277,  341, 1277, 1277, 1277,  340, 1156,  340,
     1157, 1277,  342,  343,  341, 1158,  341, 1277, 1160, 1277,
     1159,  340, 1277,  342,  343,  342,  343,  340,  341,  564,
      794, 1277,  376,  794,  341,  340,  376,  342,  343, 1277,

     1277,  340,  341,  342,  343, 1277, 1161, 1277,  341, 1163,
     1277,  342,  343, 1277, 1277, 1277, 1162,  342,  343,  180,
      794,  376, 1277,  794,  564, 1164,  376, 1277,  949,  952,
      952,  794,  771,  952,  794,  181,  182,  771, 1277, 1082,
     1277,  952, 1080,  952,  596,  771, 1277,  596, 1277, 1277,
      771,  372,  955, 1166,  596, 1277,  771,  596,  373, 1174,
      771, 1277,  372, 1277,  372, 1277, 1085,  374,  375,  373,
     1277,  373,  952,  952, 1277,  372, 1277,  372,  374,  375,
      374,  375,  373, 1277,  373, 1277, 1277,  384, 1167,  372,
     1168,  374,  375,  374,  375, 1277,  373,  794, 1277,  594,

      794,  794,  594,  594,  794,  374,  375,  594,  180,  967,
     1277,  180, 1169, 1170,  180, 1277,  180, 1277, 1277,  180,
     1277,  180, 1277, 1093,  181,  182, 1171,  181,  182, 1277,
      181,  182,  181,  182, 1172,  181,  182,  181,  182,  180,
     1277,  180, 1277, 1178,  180, 1176, 1175,  180, 1277, 1277,
      971, 1177,  180, 1277,  180,  181,  182,  181,  182, 1277,
      181,  182, 1277,  181,  182,  180, 1180,  180,  181,  182,
      181,  182, 1277,  180, 1181,  180, 1182,  180, 1179,  180,
     1277,  181,  182,  181,  182, 1277,  180, 1277, 1183,  181,
      182,  181,  182,  181,  182,  181,  182,  180, 1277,  180,

     1277, 1185,  181,  182, 1277,  180, 1277,  180, 1277,  180,
     1277, 1277, 1277,  181,  182,  181,  182,  180, 1277,  180,
     1184,  181,  182,  181,  182,  181,  182,  180, 1186,  180,
     1277, 1187,  180,  181,  182,  181,  182, 1277, 1277, 1277,
     1277, 1277, 1277,  181,  182,  181,  182, 1277,  181,  182,
      794,  681, 1277,  794, 1277, 1188,  681, 1277, 1023,  794,
     1277,  681,  794, 1189, 1190,  681,  265, 1277,  265, 1277,
     1277,  265, 1128,  266,  265,  266, 1277, 1277,  266,  265,
     1277,  266,  267,  268,  267,  268,  266,  267,  268, 1277,
      267,  268,  265, 1277, 1194,  267,  268,  265, 1277,  266,

      265, 1277, 1277, 1191,  266, 1192, 1193,  266,  267,  268,
     1195, 1277,  180,  267,  268,  265,  267,  268,  265, 1196,
      265, 1277,  266, 1277, 1277,  266, 1277,  266,  181,  182,
     1277,  267,  268,  265,  267,  268,  267,  268,  265, 1199,
      266,  265, 1197, 1222, 1277,  266, 1198, 1277,  266,  267,
      268, 1200,  265, 1277,  267,  268,  265,  267,  268,  266,
      265, 1277, 1277,  266,  265, 1277, 1277,  266,  267,  268,
     1277,  266,  267,  268, 1201, 1277,  267,  268,  265, 1277,
      267,  268, 1203, 1202,  265,  266,  265, 1277, 1277, 1277,
     1277,  266,  340,  266,  267,  268, 1277, 1277, 1277,  341,

      267,  268,  267,  268,  794,  732, 1204,  794,  342,  343,
      732, 1277, 1055,  564, 1205, 1277, 1277, 1277, 1207, 1277,
     1206,  794, 1277,  732,  794,  340, 1151,  732,  794,  743,
     1277,  794,  341, 1277,  743, 1277, 1062,  794, 1277,  743,
      794,  342,  343,  743,  340, 1277, 1277,  340, 1277,  340,
     1153,  341, 1277, 1277,  341,  180,  341, 1277, 1277,  180,
      342,  343, 1208,  342,  343,  342,  343,  340, 1277, 1211,
      340,  181,  182, 1277,  341,  181,  182,  341,  340, 1277,
     1277, 1209, 1210,  342,  343,  341,  342,  343, 1277, 1212,
      340, 1277, 1277,  340,  342,  343,  564,  341,  340, 1277,

      341,  372, 1277, 1277, 1277,  341,  342,  343,  373,  342,
      343, 1277, 1213, 1277,  342,  343, 1277,  374,  375,  794,
      771, 1277,  794, 1214, 1215,  771,  372, 1082,  794, 1277,
      771,  794, 1216,  373,  771, 1277, 1277,  372, 1277,  372,
      564, 1166,  374,  375,  373,  372,  373, 1277,  180, 1277,
      180, 1277,  373,  374,  375,  374,  375, 1217, 1277, 1277,
      180,  374,  375, 1218,  181,  182,  181,  182,  180, 1277,
     1220,  180, 1221,  180, 1277, 1219,  181,  182, 1277,  180,
     1277,  384, 1277, 1277,  181,  182,  180,  181,  182,  181,
      182,  180, 1277, 1277,  180,  181,  182, 1223,  180, 1224,

     1225,  180,  181,  182,  180, 1277,  180,  181,  182, 1226,
      181,  182,  180, 1277,  181,  182, 1227,  181,  182,  180,
      181,  182,  181,  182,  265, 1277, 1277, 1277,  181,  182,
      265,  266,  265, 1277, 1228,  181,  182,  266,  265,  266,
      267,  268, 1277, 1229,  265,  266,  267,  268,  267,  268,
     1231,  266, 1277, 1277,  267,  268, 1232,  265, 1277, 1230,
      267,  268, 1233,  265,  266, 1277, 1277, 1277,  265, 1234,
      266, 1277, 1277,  267,  268,  266,  265, 1277,  516,  267,
      268,  909,  265,  266,  267,  268,  180, 1277,  265,  266,
      265, 1277,  267,  268, 1235,  266, 1277,  266,  267,  268,

      909,  265,  181,  182,  267,  268,  267,  268,  266,  265,
     1237, 1277,  265, 1236,  265, 1277,  266,  267,  268,  266,
      265,  266,  971, 1277, 1277,  267,  268,  266,  267,  268,
      267,  268, 1238,  340, 1239,  340,  267,  268,  340, 1277,
      341, 1277,  341, 1277, 1277,  341,  340, 1277, 1240,  342,
      343,  342,  343,  341,  342,  343, 1243,  340, 1277, 1241,
      340, 1242,  342,  343,  341,  340, 1277,  341, 1277, 1277,
      564, 1277,  341,  342,  343, 1277,  342,  343,  340, 1277,
      372,  342,  343, 1244,  372,  341,  372,  373, 1245, 1277,
     1246,  373, 1277,  373,  342,  343,  374,  375, 1247,  372,

      374,  375,  374,  375,  384, 1277,  373,  180,  384,  180,
     1277,  180, 1277,  180, 1277,  374,  375, 1248,  180, 1277,
      180, 1249,  180,  181,  182,  181,  182,  181,  182,  181,
      182, 1277,  180, 1277,  181,  182,  181,  182,  181,  182,
      180, 1277,  180, 1277, 1277,  265, 1277,  829,  181,  182,
     1277, 1250,  266,  265, 1251, 1277,  181,  182,  181,  182,
      266,  267,  268, 1277,  265, 1277, 1252, 1277, 1277,  267,
      268,  266,  265, 1277, 1277, 1277, 1277, 1277,  265,  266,
      267,  268, 1277,  265, 1253,  266,  265, 1277,  267,  268,
      266, 1277, 1254,  266,  267,  268, 1277, 1277, 1277,  267,

      268, 1255,  267,  268, 1256,  265, 1277,  265, 1259, 1258,
      265, 1277,  266, 1277,  266, 1257, 1277,  266,  340, 1277,
     1277,  267,  268,  267,  268,  341,  267,  268, 1277,  909,
      340, 1277, 1277,  340,  342,  343,  180,  341,  340, 1277,
      341, 1277,  180, 1260,  340,  341,  342,  343, 1277,  342,
      343,  341,  181,  182,  342,  343,  340, 1261,  181,  182,
      342,  343, 1277,  341,  340, 1277, 1277,  372, 1267, 1262,
     1263,  341,  342,  343,  373,  564, 1264, 1277,  372, 1266,
      342,  343, 1265,  374,  375,  373,  564,  180, 1277,  265,
     1277,  384, 1277,  265,  374,  375,  266, 1277, 1277, 1277,

      266,  265, 1277,  181,  182,  267,  268, 1277,  266,  267,
      268, 1268,  265, 1277,  384, 1269, 1277,  267,  268,  266,
     1277, 1277, 1277, 1000,  265, 1277,  265, 1270,  267,  268,
     1277,  266,  265,  266,  180, 1277, 1277,  265, 1277,  266,
      267,  268,  267,  268,  266,  340, 1271,  694,  267,  268,
      181,  182,  341,  267,  268, 1277,  340, 1277,  340, 1277,
     1277,  342,  343,  341,  340,  341,  180,  564, 1277,  340,
     1277,  341,  342,  343,  342,  343,  341, 1277,  564, 1277,
      342,  343,  181,  182, 1272,  342,  343,  265, 1277,  564,
     1277,  265, 1277,  265,  266,  265, 1277, 1273,  266,  564,

      266,  180,  266,  267,  268, 1277,  340,  267,  268,  267,
      268,  267,  268,  341,  265, 1277, 1277,  181,  182,  340,
     1277,  266,  342,  343, 1277, 1274,  341,  265, 1277, 1277,
      267,  268, 1277, 1277,  266,  342,  343, 1277, 1275, 1277,
     1277, 1277, 1277,  267,  268, 1276, 1277, 1277, 1277, 1277,
      564,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  170,  170,  170,  170,  170,

      170,  170,  170,  170,  170,  170,  179,  179, 1277, 1277,
      179,  179,  179,  183, 1277,  183,  183,  183,  183,  183,
      183,  183,  183,  264,  264, 1277, 1277,  264,  264,  264,
      269, 1277,  269,  269,  269,  269,  269,  269,  269,  269,
      318,  318, 1277, 1277,  318,  318,  318,  323, 1277,  323,
      323,  323,  323,  323,  323,  323,  323,  339,  339, 1277,
     1277,  339,  339,  339,  344, 1277,  344,  344,  344,  344,
      344,  344,  344,  344,  371,  371, 1277, 1277,  371,  371,
      371,  376, 1277,  376,  376,  376,  376,  376,  376,  376,
      376,  402, 1277, 1277, 1277,  402, 1277,  402,  402, 1277,

      402,  402,  406, 1277, 1277,  406,  406, 1277,  406,  406,
      406,  406,  406,  407,  407, 1277,  407,  407,  407,  407,
      407,  407,  407,  407,  408, 1277,  408,  408, 1277, 1277,
      408, 1277,  408,  410,  410,  410,  410,  410, 1277,  410,
      498,  498,  498,  498,  498, 1277,  498,  542,  542,  542,
      542,  542, 1277,  542,  552,  552,  552,  552,  552, 1277,
      552,  578,  578,  578,  578,  578, 1277,  578,  594, 1277,
      594,  594,  594,  594,  594,  594,  594,  594,  597, 1277,
     1277, 1277,  597,  597,  597,  597,  597,  597,  597,  681,
     1277,  681,  681,  681,  681,  681,  681,  681,  681,  683,

     1277, 1277, 1277,  683,  683,  683,  683,  683,  683,  683,
      732, 1277,  732,  732,  732,  732,  732,  732,  732,  732,
      734, 1277, 1277, 1277,  734,  734,  734,  734,  734,  734,
      734,  596, 1277, 1277, 1277,  596,  596,  596,  596,  596,
      596,  596,  743, 1277,  743,  743,  743,  743,  743,  743,
      743,  743,  745, 1277, 1277, 1277,  745,  745,  745,  745,
      745,  745,  745,  771, 1277,  771,  771,  771,  771,  771,
      771,  771,  771,  773, 1277, 1277, 1277,  773,  773,  773,
      773,  773,  773,  773,  792,  792, 1277,  792,  792,  792,
      792,  792,  792,  792,  792,  795, 1277, 1277, 1277,  795,

      795,  795,  795,  795,  795,  795,  800, 1277, 1277, 1277,
      800,  800,  800,  800,  800,  800,  800,  867,  867, 1277,
      867,  867,  867,  867,  867,  867,  867,  867,  869, 1277,
     1277, 1277,  869,  869,  869,  869,  869,  869,  869,  875,
     1277, 1277, 1277,  875,  875,  875,  875,  875,  875,  875,
      910,  910, 1277,  910,  910,  910,  910,  910,  910,  910,
      910,  912, 1277, 1277, 1277,  912,  912,  912,  912,  912,
      912,  912,  918, 1277, 1277, 1277,  918,  918,  918,  918,
      918,  918,  918,  794, 1277, 1277, 1277,  794,  794,  794,
      794,  794,  794,  794,  920,  920, 1277,  920,  920,  920,

      920,  920,  920,  920,  920,  922, 1277, 1277, 1277,  922,
      922,  922,  922,  922,  922,  922,  928, 1277, 1277, 1277,
      928,  928,  928,  928,  928,  928,  928,  947,  947, 1277,
      947,  947,  947,  947,  947,  947,  947,  947,  949, 1277,
     1277, 1277,  949,  949,  949,  949,  949,  949,  949,  955,
     1277, 1277, 1277,  955,  955,  955,  955,  955,  955,  955,
      964,  964, 1277,  964,  964,  964,  964,  964,  964,  964,
      964,  967, 1277, 1277, 1277,  967,  967,  967,  967,  967,
      967,  967,  969,  969, 1277,  969,  969,  969,  969,  969,
      969,  969,  969, 1020, 1020, 1277, 1020, 1020, 1020, 1020,

     1020, 1020, 1020, 1020, 1023, 1277, 1277, 1277, 1023, 1023,
     1023, 1023, 1023, 1023, 1023,  683, 1277, 1277, 1277,  683,
      683,  683,  683,  683,  683,  683, 1025, 1025, 1277, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025,  264,  264, 1277,
     1277,  264,  264,  264, 1052, 1052, 1277, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1055, 1277, 1277, 1277, 1055,
     1055, 1055, 1055, 1055, 1055, 1055,  734, 1277, 1277, 1277,
      734,  734,  734,  734,  734,  734,  734, 1057, 1057, 1277,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,  920,  920,
     1277,  920,  920,  920,  920,  920,  920,  920,  920,  922,

     1277, 1277, 1277,  922,  922,  922,  922,  922,  922,  922,
     1059, 1059, 1277, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1062, 1277, 1277, 1277, 1062, 1062, 1062, 1062, 1062,
     1062, 1062,  745, 1277, 1277, 1277,  745,  745,  745,  745,
      745,  745,  745, 1064, 1064, 1277, 1064, 1064, 1064, 1064,
     1064, 1064, 1064, 1064,  339,  339, 1277, 1277,  339,  339,
      339,  947,  947, 1277,  947,  947,  947,  947,  947,  947,
      947,  947,  949, 1277, 1277, 1277,  949,  949,  949,  949,
      949,  949,  949, 1079, 1079, 1277, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1082, 1277, 1277, 1277, 1082, 1082,

     1082, 1082, 1082, 1082, 1082,  773, 1277, 1277, 1277,  773,
      773,  773,  773,  773,  773,  773, 1084, 1084, 1277, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084,  371,  371, 1277,
     1277,  371,  371,  371,  964,  964, 1277,  964,  964,  964,
      964,  964,  964,  964,  964,  794, 1277, 1277, 1277,  794,
      794,  794,  794,  794,  794,  794,  795, 1277, 1277, 1277,
      795,  795,  795,  795,  795,  795,  795, 1092, 1092, 1277,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,  969,  969,
     1277,  969,  969,  969,  969,  969,  969,  969,  969,  179,
      179, 1277, 1277,  179,  179,  179, 1127, 1127, 1277, 1127,

     1127, 1127, 1127, 1127, 1127, 1127, 1127, 1150, 1150, 1277,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1152, 1152,
     1277, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1165,
     1165, 1277, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
       23, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277

    } ;

static yyconst flex_int16_t yy_chk[8598] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,   19,   25,   19,   19,    7,   25,
       25,    7,    8,    8,    8,    8,    8,    8,   20,  178,
       20,   20,    8,  178,  178,    8,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   13,   13,   13,  952,   15,   15,   28,   15,   15,
       15,  925,   15,   16,   16,   29,   16,   16,   16,   62,
       16,  915,   90,   28,   28,   13,   15,   13,  872,   29,
      800,   13,   13,   62,   16,   13,   90,   13,   13,   31,
       13,   13,   31,   13,   13,   17,   17,  797,   17,   17,
       18,   18,   17,   18,   18,   31,   31,   18,   21,   33,
       21,   21,   21,   21,  109,   33,   21,   21,   21,   34,
      138,   35,  775,   36,  600,   33,   33,   37,  109,  600,
       21,   36,   36,   39,  138,   34,   34,   35,   35,   36,

       36,   38,   38,   37,   37,   38,  175,  175,  773,   39,
       39,  180,   39,   38,   39,   38,  184,  184,  747,   40,
       21,   21,   39,   21,   22,  180,   22,   22,   22,   22,
       39,   41,   22,   22,   22,   40,   40,  270,  270,   47,
      324,  324,   42,  745,   38,   38,   22,   41,   41,  175,
      175,   40,   41,   43,   40,   47,   47,   40,   42,   42,
       41,   41,  741,   41,   42,   47,   41,   44,  183,   43,
       43,  740,  265,   45,   42,   46,   22,   22,  736,   22,
       42,  734,  183,   44,   44,   43,  265,   43,   43,   45,
       45,   46,   46,   45,   43,   45,   44,   44,   48,   44,

      687,   49,   44,  685,   44,  687,   46,  683,   45,  597,
       46,  345,  345,  593,   48,   48,   48,   49,   49,   49,
       49,   50,  269,   49,  163,   51,  163,   49,  592,   52,
       48,  377,  377,   49,   48,   53,  269,   50,   50,   50,
      163,   51,   51,   50,   51,   52,   52,   52,   51,   56,
      551,   53,   53,   50,   54,   51,   51,  738,   51,   50,
      550,   52,  738,   57,   52,   56,   56,   52,  319,   52,
       54,   54,   54,   53,   56,   56,   54,  323,  549,   57,
       57,   58,  319,   54,   56,  548,  340,  344,   59,  595,
      595,  323,   54,   55,   57,   61,  547,   58,   58,   58,

      340,  344,   61,   58,   59,   59,  372,   58,  546,   55,
       55,   61,   61,   59,   59,   55,   60,  401,   55,   64,
      372,  179,   64,   55,  749,   55,   64,   65,   55,  749,
       55,   55,   60,   60,   65,   64,   64,  179,  179,  400,
       60,   66,  338,   65,   65,   67,   60,   66,   66,  777,
      376,  411,   67,   66,  777,   67,   68,   66,   66,   69,
      337,   67,   67,   68,  376,  411,   69,  336,   68,  499,
       70,   70,   68,   68,   70,   69,   69,  543,  335,   71,
      107,   73,   70,  499,   70,   75,   71,   74,   73,  181,
      106,  543,   75,   76,   74,   71,   71,   73,   73,   23,

       76,   75,   75,   74,   74,  181,  181,   73,  553,   76,
       76,   76,    0,   70,   70,   71,   72,   75,   74,   86,
       75,   74,  553,   72,   78,  579,   86,    0,   74,    0,
      594,   78,   72,   72,    0,   86,   86,    0,   72,  579,
       78,   78,   79,   78,  594,   72,   72,    0,   72,   79,
       72,   72,  681,   72,   77,   86,   87,    0,   79,   79,
       79,   77,   80,   87,   79,    0,  681,  682,  682,   80,
       77,   77,   87,   87,   87,   77,   81,   77,   80,   80,
       82,   80,    0,   81,   80,   77,  185,   82,  196,  185,
       77,   77,   81,   81,   83,   81,   82,   82,   80,  732,

       84,   83,  185,  185,  196,  196,    0,   84,  189,   81,
       83,   83,   82,  732,   85,   82,   84,   84,  733,  733,
       83,   85,    0,   83,  189,  189,    0,   88,  744,  744,
       85,   85,   84,   84,   88,   89,   85,   84,   84,   88,
      189,   96,   89,   88,   88,  743,   85,   92,   96,   93,
       92,   89,   89,    0,   92,   93,   93,   96,   96,  743,
        0,  190,    0,   92,   92,   93,   93,   94,   94,   94,
       94,   94,   94,    0,   94,    0,   95,  190,  190,   97,
        0,   94,    0,   95,   95,   95,   97,   99,  771,  193,
       94,   94,   95,   95,   99,   97,   97,   98,   98,    0,

      190,   98,  771,   99,   99,  193,  193,  195,    0,   98,
      193,   98,  102,  102,  102,  102,  102,  102,   99,  772,
      772,  202,  102,  195,  195,  102,  104,  104,  104,  104,
      104,  104,    0,  195,    0,    0,  104,  202,  202,  104,
       98,   98,  105,  105,  105,  105,  105,  105,    0,  108,
        0,  112,  105,  114,  112,  105,  108,  115,  112,  114,
      114,    0,    0,  192,  115,  108,  108,  112,  112,  114,
      114,  116,    0,  115,  115,  120,    0,  117,  116,  192,
      192,    0,  120,    0,  117,    0,    0,  116,  116,  117,
        0,  120,  120,  117,  117,  121,  121,  122,  381,  121,

      192,  124,    0,  123,  122,  381,  381,  121,  124,  121,
      123,  381,  194,  122,  122,  125,    0,  124,  124,  123,
      123,    0,  125,    0,    0,    0,    0,  124,  194,  194,
        0,  125,  125,  122,  194,  123,  126,    0,  121,  121,
      123,  127,    0,  126,  134,    0,    0,  125,  127,  128,
      125,  134,  126,  126,  126,    0,  128,  127,  127,  780,
      134,  134,  127,  129,  127,  128,  128,  128,  780,    0,
      129,  128,  780,  780,  130,  780,  134,    0,  127,  129,
      129,  130,    0,    0,    0,  129,    0,  131,    0,  132,
      130,  130,  186,  130,  131,  133,  132,  205,  186,  129,

      137,    0,  133,  131,  131,  132,  132,  137,  186,  186,
        0,  133,  133,  205,  205,  132,  137,  137,  139,  131,
      140,  139,  131,  141,    0,  139,  140,  140,  133,    0,
      141,  142,  133,  205,  139,  139,  140,  140,  142,  141,
      141,  143,  143,  145,  198,  143,    0,  142,  142,    0,
      145,  145,  145,  143,    0,  143,  145,  146,    0,  147,
      198,  198,  145,  148,  146,  198,  147,    0,    0,    0,
      148,    0,    0,  146,  146,  147,  147,    0,  147,  148,
      148,    0,  148,    0,  143,  143,  144,    0,  146,  149,
        0,    0,    0,  144,  150,    0,  149,  151,    0,  148,

        0,  150,  144,  144,  151,  149,  149,    0,  144,    0,
      150,  150,    0,  151,  151,  144,  144,  152,    0,  187,
      144,  144,  149,  153,  152,  154,  151,  187,  187,  150,
      153,  197,  154,  152,  152,  187,  187,    0,    0,  153,
      153,  154,  154,  154,    0,    0,    0,  197,  197,  152,
        0,    0,    0,  197,    0,  152,    0,    0,    0,  153,
      155,  155,  155,  155,  155,  155,    0,  182,  182,  182,
      155,    0,  182,  155,  157,  157,  157,  157,  157,  157,
      182,    0,  182,    0,  157,    0,  199,  157,  158,  158,
      158,  158,  158,  158,    0,  188,  188,  191,  158,  188,

        0,  158,  199,  199,    0,  200,    0,  188,    0,  188,
        0,  182,  182,  191,  191,  199,  199,  199,  201,    0,
        0,  200,  200,  191,  199,  203,  191,  200,  204,    0,
      206,    0,    0,  207,  201,  201,    0,  201,  188,  188,
      208,  203,  203,  209,  204,  204,  206,  206,  210,  207,
      207,  204,  206,  207,  201,  203,  208,  208,  208,  209,
      209,    0,  211,    0,  210,  210,    0,    0,    0,  212,
      207,  213,    0,  214,    0,  209,  219,    0,  211,  211,
      215,    0,    0,  210,  211,  212,  212,  213,  213,  214,
      214,  216,  219,  219,  212,  219,  215,  215,  215,  217,

        0,  218,    0,  220,    0,    0,  221,  216,  216,  222,
      214,  216,  223,    0,  224,  217,  217,  218,  218,  220,
      220,  220,  221,  221,  225,  222,  222,    0,  223,  223,
      224,  224,  218,  226,  217,  220,  227,    0,    0,  228,
      225,  225,  229,    0,  224,  230,  222,  231,  223,  226,
      226,    0,  227,  227,  226,  228,  228,    0,  229,  229,
        0,  230,  230,  231,  231,  225,  232,    0,  233,    0,
      234,  227,    0,    0,  231,  230,  235,  229,  236,  228,
        0,  237,  232,  232,  233,  233,  234,  234,  239,  232,
      238,    0,  235,  235,  236,  236,    0,  237,  237,    0,

      233,    0,  240,    0,  239,  239,  238,  238,    0,  241,
        0,  242,  235,  236,  237,  236,  238,  243,  240,  240,
      245,    0,  238,  240,  239,  241,  241,  242,  242,  244,
        0,    0,    0,  243,  243,  241,  245,  245,  243,    0,
        0,    0,  246,    0,    0,  244,  244,    0,  242,  245,
      247,    0,  248,  243,    0,    0,  243,  243,  246,  246,
      246,  249,    0,    0,  250,  244,  247,  247,  248,  248,
        0,  246,  251,    0,    0,    0,  252,  249,  249,  246,
      250,  250,  247,  253,  248,  254,  250,  255,  251,  251,
      251,  256,  252,  252,  251,  252,  249,  257,    0,  253,

      253,  254,  254,  255,  255,  255,  252,  256,  256,  258,
        0,  259,    0,  257,  257,  254,    0,  256,  260,    0,
      261,    0,    0,    0,    0,  258,  258,  259,  259,    0,
      263,    0,  257,  259,  260,  260,  261,  261,    0,  262,
      260,    0,  264,    0,  258,  262,  263,  263,  263,  264,
      260,    0,    0,  266,    0,  262,  262,  261,  264,  264,
      266,  267,    0,    0,    0,    0,    0,    0,  267,  266,
      266,  268,  268,  268,    0,  272,  268,  267,  267,    0,
      271,  272,  272,  271,  268,    0,  268,  271,  273,    0,
      410,  272,  272,  274,    0,  273,  271,  271,    0,    0,

      274,  275,    0,    0,  273,  273,  410,  410,  275,  274,
      274,    0,    0,  414,    0,  268,  268,  275,  275,  276,
      276,  277,    0,  276,    0,  278,    0,  279,  277,  414,
      414,  276,  278,  276,  279,  417,    0,  277,  277,  280,
        0,  278,  278,  279,  279,  279,  280,    0,  414,    0,
      415,  417,  417,  281,    0,  280,  280,  277,  280,  278,
      281,  282,  276,  276,  283,    0,  415,  415,  282,  281,
      281,  283,  284,    0,    0,  285,  415,  282,  282,  284,
      283,  283,  285,  281,  281,    0,    0,    0,  284,  284,
      286,  285,  285,  283,    0,    0,    0,  286,  287,    0,

        0,  288,    0,  290,  284,  287,  286,  286,  288,  289,
      290,  286,  285,    0,  287,  287,  289,  288,  288,  290,
      290,    0,    0,  291,    0,  289,  289,    0,    0,    0,
      291,    0,    0,    0,  293,  290,  292,    0,  288,  291,
      291,  293,  292,  292,  289,    0,  292,  294,    0,  295,
      293,  293,  292,  292,  294,  296,  295,    0,  292,    0,
      291,    0,  296,  294,  294,  295,  295,  294,  297,    0,
        0,  296,  296,  298,    0,  297,    0,  296,    0,  299,
      298,  300,    0,    0,  297,  297,  299,  302,  300,  298,
      298,    0,  298,    0,  302,  299,  299,  300,  300,  301,

      297,  301,  299,  302,  302,  303,    0,    0,  301,  301,
      298,  302,  303,  304,  301,  301,    0,  305,    0,  304,
      304,  303,  303,  416,  305,    0,    0,    0,  306,  304,
      304,  307,  303,  305,  305,  306,  308,    0,  307,  416,
      416,  416,    0,  308,  306,  306,  305,  307,  307,  304,
      306,  309,  308,  308,  310,  307,  311,    0,  309,    0,
      306,  310,  312,  311,    0,    0,    0,  309,  309,  312,
      310,  310,  311,  311,    0,    0,  310,  313,  312,  312,
      314,  312,  315,    0,  313,  316,  309,  314,  317,  315,
        0,  311,  316,  313,  313,  317,  314,  314,  315,  315,

      318,  316,  316,    0,  317,  317,  320,  318,  315,    0,
        0,  321,  313,  320,    0,    0,  318,  318,  321,    0,
      316,    0,  320,  320,  322,  322,  322,  321,  321,  322,
        0,  325,  330,  330,  325,  326,  330,  322,  325,  322,
        0,  326,  326,  331,  330,    0,  330,  325,  325,    0,
      331,  326,  326,  327,  327,  327,  327,  327,  327,  331,
      331,  420,    0,  327,  329,    0,  327,    0,  322,  322,
        0,  329,  329,  329,    0,  330,  330,  420,  420,  420,
      329,  329,  332,  332,  332,  332,  332,  332,    0,  343,
      343,  343,  332,    0,  343,  332,  334,  334,  334,  334,

      334,  334,  343,  339,  343,  341,  334,  342,    0,  334,
      339,    0,  341,    0,  342,    0,    0,    0,    0,  339,
      339,  341,  341,  342,  342,  346,    0,    0,  346,  347,
        0,  348,  346,  343,  343,  347,  347,    0,  348,  349,
      349,  346,  346,  349,    0,  347,  347,  348,  348,  350,
        0,  349,  352,  349,  353,    0,  350,  351,    0,  352,
      354,  353,  418,    0,  351,  350,  350,  354,  352,  352,
      353,  353,    0,  351,  351,    0,  354,  354,  418,  418,
        0,    0,  349,  349,  352,  350,  355,  351,  351,  356,
        0,  353,  358,  355,  357,  354,  356,  418,    0,  358,

        0,  357,  355,  355,  357,  356,  356,  359,  358,  358,
      357,  357,    0,    0,  359,  360,  357,    0,  355,    0,
      361,    0,  360,  359,  359,  419,  356,  361,  362,  359,
        0,  360,  360,  363,    0,  362,  361,  361,    0,  364,
      363,  419,  419,  361,  362,  362,  364,    0,    0,  363,
      363,    0,  360,  365,    0,  364,  364,  363,  362,  423,
      365,  366,    0,    0,  362,  362,  364,  419,  366,  365,
      365,    0,  367,    0,    0,  423,  423,  366,  366,  367,
        0,    0,  365,  366,  368,    0,  369,    0,  367,  367,
        0,  368,  370,  369,    0,    0,  367,  371,    0,  370,

      368,  368,  369,  369,  371,    0,  368,  422,  370,  370,
      373,    0,  374,  371,  371,    0,    0,  373,    0,  374,
        0,  369,  424,  422,  422,  422,  373,  373,  374,  374,
      375,  375,  375,  378,    0,  375,  378,    0,  424,  424,
      378,  379,    0,  375,    0,  375,    0,  379,  379,  378,
      378,  380,  380,  382,  424,  380,    0,  379,  379,    0,
      382,  383,    0,  380,    0,  380,  384,    0,  383,  382,
      382,  382,  385,  384,  375,  375,    0,  383,  383,  385,
      383,    0,  384,  384,    0,    0,  386,    0,  385,  385,
        0,    0,  387,  386,  380,  380,    0,  388,    0,  387,

        0,  385,  386,  386,  388,  389,    0,  386,  387,  387,
        0,  390,  389,  388,  388,    0,  391,  388,  390,    0,
        0,  389,  389,  391,  392,    0,    0,  390,  390,  387,
        0,  392,  391,  391,    0,  390,    0,  389,  393,    0,
      392,  392,  394,    0,    0,  393,  395,    0,    0,  394,
      396,    0,  391,  395,  393,  393,  392,  396,  394,  394,
        0,  394,  395,  395,    0,  421,  396,  396,    0,    0,
        0,    0,  395,  393,  397,  397,  397,  397,  397,  397,
      429,  421,  421,  425,  397,  396,    0,  397,  399,  399,
      399,  399,  399,  399,  421,    0,  429,  429,  399,  425,

      425,  399,  412,  428,    0,  412,    0,    0,    0,    0,
      412,  412,  412,  425,  426,  412,  425,    0,  429,  428,
      428,  427,  412,  412,  428,  412,  412,  412,  430,    0,
      426,  426,  432,    0,  426,  426,    0,  427,  427,    0,
        0,  431,    0,    0,  430,  430,  433,    0,  432,  432,
      430,  426,  427,    0,  412,  412,  413,  431,  431,  413,
        0,    0,  433,  433,  413,  413,  413,  434,    0,  413,
      435,    0,  436,    0,  431,  437,  413,  413,    0,  413,
      413,  413,    0,  434,  434,  438,  435,  435,  436,  436,
        0,  437,  437,    0,  436,    0,    0,  439,    0,  435,

      440,  438,  438,  441,    0,  442,  438,  434,  413,  413,
        0,    0,  437,  439,  439,  443,  440,  440,  445,  441,
      441,  442,  442,    0,    0,  444,    0,  439,    0,  446,
        0,  443,  443,  447,  445,  445,  448,    0,  442,  445,
      440,  444,  444,  449,  443,  446,  446,  444,  450,  447,
      447,  446,  448,  448,  447,  451,    0,  452,    0,  449,
      449,  453,    0,  449,  450,  450,  454,    0,  455,  448,
        0,  451,  451,  452,  452,  456,    0,  453,  453,  457,
      452,    0,  454,  454,  455,  455,  458,  451,    0,    0,
      459,  456,  456,  460,    0,  457,  457,  455,  457,  453,

      461,  454,  458,  458,  462,  456,  459,  459,  464,  460,
      460,  459,    0,    0,  463,    0,  461,  461,    0,    0,
      462,  462,  461,    0,  464,  464,  465,    0,  466,  462,
      463,  463,    0,    0,  467,  463,  461,    0,  468,  464,
      469,    0,  465,  465,  466,  466,    0,    0,  470,  465,
      467,  467,  471,  466,  468,  468,  469,  469,    0,    0,
      472,    0,  473,  465,  470,  470,  469,  474,  471,  471,
        0,  475,    0,    0,    0,  468,  472,  472,  473,  473,
        0,    0,  472,  474,  474,  476,  470,  475,  475,  477,
      471,  478,    0,  475,    0,    0,  479,  473,  480,    0,

      481,  476,  476,    0,    0,  477,  477,  478,  478,  482,
        0,  477,  479,  479,  480,  480,  481,  481,  483,  480,
      476,    0,    0,  484,    0,  482,  482,  485,    0,  486,
      482,  487,    0,    0,  483,  483,  479,  481,    0,  484,
      484,    0,    0,  485,  485,  486,  486,  487,  487,  482,
      488,    0,  489,  487,    0,  483,  484,  487,    0,  486,
      490,    0,  491,  485,    0,    0,  488,  488,  489,  489,
      488,  492,    0,  493,    0,  489,  490,  490,  491,  491,
        0,  491,    0,  494,    0,  495,  490,  492,  492,  493,
      493,    0,  793,  793,  793,  793,  490,  496,  793,  494,

      494,  495,  495,  497,    0,    0,    0,    0,  493,  498,
      495,  492,  494,  496,  496,  502,  498,  503,    0,  497,
      497,  602,  502,    0,  503,  498,  498,    0,  496,  504,
        0,  502,  502,  503,  503,    0,  504,  602,  602,    0,
      497,  500,    0,    0,  500,  504,  504,  502,    0,  500,
      500,  500,  505,  503,  500,    0,  500,    0,  602,  505,
      507,  500,  500,    0,  500,  500,  500,  507,  505,  505,
      506,  508,  506,    0,  509,    0,  507,  507,  508,    0,
      506,  509,  505,  605,    0,  506,  506,  508,  508,    0,
      509,  509,    0,  500,  500,  501,    0,    0,  501,  605,

      605,    0,    0,  501,  501,  501,  508,    0,  501,  605,
      501,  509,  510,    0,  510,  501,  501,  511,  501,  501,
      501,  510,  510,  510,  511,  512,    0,  510,  510,  513,
      510,    0,  512,  511,  511,    0,  513,  514,    0,  511,
        0,  512,  512,    0,  514,  513,  513,  501,  501,  515,
        0,  516,    0,  514,  514,  512,  515,    0,  516,  513,
        0,    0,  514,  517,    0,  515,  515,  516,  516,  518,
      517,  519,  513,    0,  515,  520,  518,    0,  519,  517,
      517,    0,  520,  521,    0,  518,  518,  519,  519,    0,
      521,  520,  520,  517,  517,  522,    0,  523,  518,  521,

      521,    0,  522,  524,  523,  521,  519,    0,  525,    0,
      524,  522,  522,  523,  523,  525,  527,  522,    0,  524,
      524,  526,    0,  527,  525,  525,    0,    0,  526,  528,
        0,    0,  527,  527,  523,  524,  528,  526,  526,  526,
      529,    0,  530,    0,  525,  528,  528,  529,    0,  530,
        0,  528,  527,  531,    0,  532,  529,  529,  530,  530,
      531,  533,  532,    0,    0,  529,  534,    0,  533,  531,
      531,  532,  532,  534,    0,  532,    0,  533,  533,    0,
      535,    0,  534,  534,    0,  536,    0,  535,    0,    0,
        0,  534,  536,  537,    0,  531,  535,  535,  533,  538,

      537,  536,  536,    0,    0,  536,  538,  539,    0,  537,
      537,  537,    0,  540,  539,  538,  538,  535,    0,  538,
      540,    0,    0,  539,  539,  541,    0,    0,    0,  540,
      540,  542,  541,  552,    0,  538,  556,  539,  542,  557,
      552,  541,  541,  556,  540,    0,  557,  542,  542,  552,
      552,    0,  556,  556,    0,  557,  557,  558,    0,    0,
        0,  541,  544,    0,  558,  544,    0,    0,  556,  557,
      544,  544,  544,  558,  558,  544,    0,  544,    0,    0,
      558,    0,  544,  544,  560,  544,  544,  544,  559,    0,
      561,  560,  562,  558,  603,  559,  564,  561,    0,  562,

      560,  560,    0,  564,  559,  559,  561,  561,  562,  562,
      603,  603,  564,  564,  544,  544,  545,    0,    0,  545,
      561,  560,    0,  559,  545,  545,  545,  563,    0,  545,
      603,  545,    0,    0,  563,  562,  545,  545,  567,  545,
      545,  545,  606,  563,  563,  567,  565,    0,    0,  566,
        0,    0,  563,  565,  567,  567,  566,    0,  606,  606,
      567,    0,  565,  565,    0,  566,  566,    0,  545,  545,
      554,    0,    0,  554,    0,    0,  565,  565,  554,  554,
      554,  568,    0,  554,  566,  554,  607,    0,  568,  569,
      554,  554,  570,  554,  554,  554,  569,  568,  568,  570,

      573,    0,  607,  607,    0,  569,  569,  573,  570,  570,
        0,    0,    0,  571,  607,    0,  573,  573,  568,  572,
      571,  569,  554,  554,  555,    0,  572,  555,  570,  571,
      571,  571,  555,  555,  555,  572,  572,  555,    0,  555,
      613,  572,  573,  574,  555,  555,    0,  555,  555,  555,
      574,    0,  608,    0,  575,    0,  613,  613,  576,  574,
      574,  575,  613,  574,    0,  576,  577,    0,  608,  608,
      575,  575,    0,  577,  576,  576,  555,  555,  576,  575,
      578,    0,  577,  577,  577,    0,  614,  578,  582,  608,
        0,    0,    0,  584,    0,  582,  578,  578,  580,    0,

      584,  580,  614,  614,  582,  582,  580,  580,  580,  584,
      584,  580,  614,  580,    0,  584,    0,    0,  580,  580,
      585,  580,  580,  580,  582,    0,  587,  585,  586,    0,
        0,  588,    0,  587,    0,  586,  585,  585,  588,    0,
      611,    0,  587,  587,  586,  586,    0,  588,  588,  585,
      580,  580,  581,  616,    0,  581,  611,  611,  611,    0,
      581,  581,  581,  587,  586,  581,    0,  581,  588,  616,
      616,  589,  581,  581,    0,  581,  581,  581,  589,  590,
        0,    0,  591,    0,  604,    0,  590,  589,  589,  591,
      616,  589,    0,    0,    0,  590,  590,    0,  591,  591,

      604,  604,    0,    0,  581,  581,  583,  589,  598,  598,
      590,  598,    0,  583,  598,  609,  598,  610,  591,    0,
      604,    0,  583,  583,  617,    0,    0,    0,    0,  583,
      598,  609,  609,  610,  610,    0,  583,    0,  583,    0,
      617,  617,  583,  583,  618,  583,  599,  612,    0,  599,
      609,    0,  610,    0,  599,  599,  599,    0,  615,  599,
      618,  618,  617,  612,  612,  619,    0,  599,  618,  599,
      599,  599,  620,  612,  615,  615,  621,    0,    0,  612,
      622,  619,  619,    0,  615,  623,    0,    0,  620,  620,
      624,    0,  621,  621,  619,    0,  622,  622,  599,  599,

      601,  623,  623,  601,    0,    0,  624,  624,  601,  601,
      601,  621,  625,  601,    0,  626,  623,  627,  622,  628,
        0,  601,  629,  601,  601,  601,    0,  624,  625,  625,
      625,  626,  626,  627,  627,  628,  628,    0,  629,  629,
        0,    0,  627,  629,  630,    0,  631,    0,  632,    0,
      626,  633,  601,  601,  634,    0,  635,  628,    0,    0,
      630,  630,  631,  631,  632,  632,  636,  633,  633,  637,
      634,  634,  635,  635,  638,  631,    0,  639,    0,  634,
      630,    0,  636,  636,  640,  637,  637,    0,  641,    0,
      638,  638,  636,  639,  639,  642,    0,  643,  637,  644,

      640,  640,  640,  639,  641,  641,  638,  645,    0,  646,
      641,  642,  642,  643,  643,  644,  644,  647,    0,  648,
        0,  644,  649,  645,  645,  646,  646,    0,  643,    0,
      650,    0,  651,  647,  647,  648,  648,    0,  649,  649,
      652,    0,  653,    0,  649,  648,  650,  650,  651,  651,
      654,  650,  655,    0,  647,    0,  652,  652,  653,  653,
      656,    0,  653,    0,    0,  657,  654,  654,  655,  655,
      655,  658,  652,  659,    0,    0,  656,  656,  660,    0,
      654,  657,  657,  661,    0,    0,  656,  658,  658,  659,
      659,  658,  662,  659,  660,  660,  663,    0,  664,  661,

      661,  657,    0,    0,  665,    0,  666,    0,  662,  662,
      667,    0,  663,  663,  664,  664,  668,    0,    0,  661,
      665,  665,  666,  666,  669,    0,  667,  667,  667,  670,
      662,  663,  668,  668,  664,    0,  671,    0,    0,    0,
      669,  669,  672,  666,    0,  670,  670,  673,    0,  674,
        0,  670,  671,  671,  675,  669,    0,  676,  672,  672,
      672,    0,    0,  673,  673,  674,  674,  677,    0,  678,
      675,  675,    0,  676,  676,  679,    0,    0,  671,  676,
      680,  674,    0,  677,  677,  678,  678,    0,    0,  677,
      675,  679,  679,  679,    0,  689,  680,  680,  684,  684,

      680,  684,  689,    0,  684,    0,  684,    0,    0,    0,
      691,  689,  689,    0,    0,  689,  690,  691,    0,    0,
      684,  686,  802,  690,  686,    0,  691,  691,    0,  686,
      686,  686,  690,  690,  686,    0,  686,    0,  802,  802,
      692,    0,  686,  693,  686,  686,  686,  692,  691,    0,
      693,  694,  690,    0,  695,    0,  692,  692,  694,  693,
      693,  695,    0,    0,    0,  696,  692,  694,  694,    0,
      695,  695,  696,  686,  686,  688,    0,    0,  688,    0,
      693,  696,  696,  688,  688,  688,  695,  697,  688,    0,
      698,    0,    0,  806,  697,  696,  688,  698,  688,  688,

      688,    0,  696,  697,  697,  699,  698,  698,  700,  806,
      806,    0,  699,    0,  806,  700,  701,  697,    0,  702,
      698,  699,  699,  701,  700,  700,  702,  688,  688,    0,
      699,    0,  701,  701,  703,  702,  702,  702,  704,    0,
      807,  703,  705,    0,    0,  704,  706,  701,    0,  705,
      703,  703,    0,  706,  704,  704,  807,  807,  705,  705,
      704,    0,  706,  706,  705,  707,  807,  708,    0,  709,
        0,  804,  707,  710,  708,    0,  709,    0,  706,    0,
      710,  707,  707,  708,  708,  709,  709,  804,  804,  710,
      710,  710,  711,  804,  712,    0,  713,    0,  707,  711,

        0,  712,  808,  713,  708,    0,    0,  709,  711,  711,
      712,  712,  713,  713,    0,  714,    0,  717,  808,  808,
      715,  711,  714,  716,  717,    0,    0,  715,    0,    0,
      716,  714,  714,  717,  717,  712,  715,  715,  715,  716,
      716,  718,    0,  719,  716,    0,  720,    0,  718,  721,
      719,    0,  809,  720,    0,    0,  721,  718,  718,  719,
      719,  718,  720,  720,    0,  721,  721,  722,  809,  809,
      723,  721,    0,    0,  722,  719,  720,  723,  724,    0,
        0,  727,    0,  722,  722,  724,  723,  723,  727,  722,
        0,    0,  725,    0,  724,  724,  726,  727,  727,  725,

      805,    0,    0,  726,  728,    0,    0,  723,  725,  725,
      727,  728,  726,  726,  724,    0,  805,  805,  725,  805,
      728,  728,  729,    0,  730,    0,    0,  731,  729,  729,
        0,  730,    0,  726,  731,    0,  728,    0,  729,  729,
      730,  730,    0,  731,  731,    0,  735,  735,  730,  735,
        0,    0,  735,    0,  735,    0,    0,  811,  746,  746,
        0,  746,    0,    0,  746,    0,  746,    0,  735,  737,
        0,    0,  737,  811,  811,    0,    0,  737,  737,  737,
      746,  751,  737,    0,  737,    0,  811,  816,  751,  752,
      737,    0,  737,  737,  737,  818,  752,  751,  751,    0,

      754,  751,  753,  816,  816,  752,  752,  754,  755,  753,
        0,  818,  818,  757,    0,  755,  754,  754,  753,  753,
      757,  737,  737,  739,  755,  755,  739,  752,  753,  757,
      757,  739,  739,  739,  756,  757,  739,  754,  758,    0,
      755,  756,  820,    0,  739,  758,  739,  739,  739,  759,
      756,  756,  756,    0,  758,  758,  759,  760,  820,  820,
      758,    0,  762,    0,  760,  759,  759,  803,  820,  762,
        0,    0,    0,  760,  760,  739,  739,  748,  762,  762,
      748,    0,  759,  803,  803,  748,  748,  748,  761,  803,
      748,    0,  748,  817,  760,  761,    0,    0,  748,  803,

      748,  748,  748,  762,  761,  761,  761,  763,    0,  817,
      817,  764,    0,  817,  763,    0,    0,    0,  764,    0,
      810,    0,    0,  763,  763,  763,  765,  764,  764,  748,
      748,  750,  764,  765,  750,    0,  810,  810,    0,  750,
      750,  750,  765,  765,  750,    0,  765,  825,    0,    0,
      766,  810,  750,  767,  750,  750,  750,  766,    0,    0,
      767,  768,    0,  825,  825,  769,  766,  766,  768,  767,
      767,    0,  769,  825,    0,  767,    0,  768,  768,  770,
      766,  769,  769,  750,  750,    0,  770,  779,    0,    0,
        0,  769,    0,  812,  779,  770,  770,  813,  768,  774,

      774,  781,  774,  779,  779,  774,    0,  774,  781,  812,
      812,    0,  782,  813,  813,  813,  770,  781,  781,  782,
        0,  774,  776,  779,  812,  776,    0,    0,  782,  782,
      776,  776,  776,  783,    0,  776,    0,  776,    0,    0,
      783,  784,  782,  776,  786,  776,  776,  776,  784,  783,
      783,  786,  785,    0,    0,  787,    0,  784,  784,  785,
      786,  786,  787,  783,  826,    0,  784,    0,  785,  785,
        0,  787,  787,    0,  776,  776,  778,  787,    0,  778,
      826,  826,  786,  785,  778,  778,  778,  788,    0,  778,
        0,  789,    0,    0,  788,  790,    0,  778,  789,  778,

      778,  778,  790,  788,  788,  814,    0,  789,  789,  791,
        0,  790,  790,    0,    0,    0,  791,    0,    0,  815,
      789,  814,  814,  788,  821,  791,  791,  790,  778,  778,
        0,  792,  792,  791,  792,  815,  815,  792,    0,  792,
      821,  821,  814,  796,  796,  821,  796,    0,    0,  796,
      815,  796,    0,  792,  795,  822,    0,  795,    0,    0,
        0,    0,  795,  795,  795,  796,    0,  795,  824,  799,
      799,  822,  822,  799,    0,  795,  822,  795,  795,  795,
      819,  799,  823,  799,  824,  824,    0,  801,  801,    0,
      801,    0,    0,  801,    0,  801,  819,  819,  823,  823,

        0,    0,  819,  827,  823,  824,  795,  795,  798,  801,
      828,  798,  799,  799,    0,    0,  798,  798,  798,  827,
      827,  798,  829,    0,  827,  831,  828,  828,  830,  798,
      832,  798,  798,  798,  833,    0,  834,    0,  829,  829,
        0,  831,  831,    0,  830,  830,  832,  832,  828,  835,
      833,  833,  834,  834,    0,    0,  833,  836,    0,    0,
      798,  798,  837,    0,  830,  835,  835,  838,    0,    0,
        0,  832,  839,  836,  836,  840,  834,  841,  837,  837,
      835,    0,  842,  838,  838,    0,  836,    0,  839,  839,
        0,  840,  840,  841,  841,  843,    0,  837,  842,  842,

      844,    0,  842,  838,  838,  845,  841,  846,    0,  847,
        0,  843,  843,    0,    0,    0,  844,  844,  848,    0,
      849,  845,  845,  846,  846,  847,  847,  845,    0,  846,
      850,  844,  851,    0,  848,  848,  849,  849,  847,    0,
      852,    0,  853,    0,    0,  849,  850,  850,  851,  851,
        0,    0,    0,  854,    0,  848,  852,  852,  853,  853,
      852,  855,    0,  856,    0,  857,    0,  850,  853,  854,
      854,    0,    0,    0,  858,    0,  859,  855,  855,  856,
      856,  857,  857,  860,    0,  861,    0,  855,  862,  857,
      858,  858,  859,  859,  863,    0,  864,    0,  856,  860,

      860,  861,  861,  865,  862,  862,  866,    0,    0,    0,
      863,  863,  864,  864,  860,    0,    0,    0,    0,  865,
      865,  861,  866,  866,  867,  867,  971,  867,    0,    0,
      867,  866,  867,  868,  868,  868,  868,    0,  865,  868,
      874,  874,  971,  971,  874,    0,  867,  869,    0,    0,
      869,    0,  874,    0,  874,  869,  869,  869,  870,  870,
      869,  870,  869,    0,  870,    0,  870,    0,  869,    0,
      869,  869,  869,  876,  876,  878,  876,    0,    0,  876,
      870,  876,  878,  874,  874,    0,  877,    0,    0,    0,
      879,  878,  878,  877,    0,  876,    0,  879,    0,  869,

      869,  873,  877,  877,  873,    0,  879,  879,    0,  873,
      873,  873,  877,  880,  873,    0,  881,    0,    0,    0,
      880,    0,  873,  881,  873,  873,  873,  879,  882,  880,
      880,  883,  881,  881,    0,  882,    0,  880,  883,    0,
      911,  911,  911,  911,  882,  882,  911,  883,  883,    0,
      884,  881,    0,  873,  873,  875,  883,  884,  875,    0,
        0,    0,    0,  875,  875,  875,  884,  884,  875,    0,
      875,  884,    0,    0,  885,    0,  875,  887,  875,  875,
      875,  885,  886,    0,  887,  888,    0,    0,  889,  886,
      885,  885,  888,  887,  887,  889,    0,    0,  886,  886,

        0,  888,  888,    0,  889,  889,    0,  875,  875,  890,
        0,  885,  887,  886,    0,  891,  890,  888,    0,    0,
      889,  892,  891,  893,    0,  890,  890,  894,  892,    0,
      893,  891,  891,    0,  894,  890,  891,  892,  892,  893,
      893,    0,    0,  894,  894,  895,    0,  896,    0,    0,
      897,    0,  895,    0,  896,    0,    0,  897,  892,    0,
        0,  895,  895,  896,  896,  896,  897,  897,  898,  895,
        0,    0,  899,    0,  900,  898,  901,    0,    0,  899,
        0,  900,    0,  901,  898,  898,    0,  897,  899,  899,
      900,  900,  901,  901,  902,  900,  901,    0,  903,    0,

      898,  902,  904,    0,  899,  903,  905,    0,    0,  904,
      902,  902,    0,  905,  903,  903,    0,  906,  904,  904,
      904,    0,  905,  905,  906,  907,    0,  973,  905,  908,
        0,  909,  907,  906,  906,  906,  908,    0,  909,    0,
        0,  907,  907,  973,  973,  908,  908,  909,  909,  910,
      910,    0,  910,    0,  908,  910,    0,  910,    0,    0,
      907,  913,  913,  973,  913,    0,    0,  913,    0,  913,
        0,  910,  912,    0,  974,  912,    0,    0,    0,    0,
      912,  912,  912,  913,    0,  912,    0,  912,  917,  917,
      974,  974,  917,  912,    0,  912,  912,  912,  919,  919,

      917,  919,  917,    0,  919,    0,  919,    0,  920,  920,
        0,  920,  974,    0,  920,    0,  920,    0,    0,    0,
      919,  932,    0,    0,  912,  912,  916,    0,  932,  916,
      920,  917,  917,    0,  916,  916,  916,  932,  932,  916,
      921,  921,  921,  921,    0,  932,  921,  916,    0,  916,
      916,  916,  923,  923,    0,  923,    0,    0,  923,    0,
      923,    0,    0,  927,  927,  929,  929,  927,  929,  935,
        0,  929,    0,  929,  923,  927,  935,  927,  916,  916,
      918,  972,    0,  918,    0,  935,  935,  929,  918,  918,
      918,    0,  930,  918,    0,  918,    0,  972,  972,  930,

      935,  918,    0,  918,  918,  918,  927,  927,  930,  930,
      933,    0,    0,  931,    0,    0,  972,  933,  930,  975,
      931,    0,  987,    0,  934,    0,  933,  933,    0,  931,
      931,  934,  918,  918,  922,  975,  975,  922,  987,  987,
      934,  934,  922,  922,  922,  933,  936,  922,  976,  922,
      931,  975,    0,  936,  980,  922,    0,  922,  922,  922,
      937,  934,  936,  936,  976,  976,    0,  937,  938,    0,
      980,  980,    0,  939,    0,  938,  937,  937,    0,  976,
      939,  936,    0,  980,  938,  938,  922,  922,  924,  939,
      939,  924,  937,    0,  938,    0,  924,  924,  924,  940,

        0,  924,    0,  924,    0,    0,  940,    0,    0,  924,
      939,  924,  924,  924,  941,  940,  940,  942,    0,  945,
        0,  941,  944,  940,  942,    0,  945,    0,    0,  944,
      941,  941,  941,  942,  942,  945,  945,  945,  944,  944,
      924,  924,  926,  944,    0,  926,    0,    0,    0,    0,
      926,  926,  926,  943,  942,  926,    0,  946,    0,    0,
      943,    0,    0,  926,  946,  926,  926,  926,    0,  943,
      943,    0,    0,  946,  946,  947,  947,    0,  947,  946,
        0,  947,    0,  947,  962,  943,  948,  948,  948,  948,
        0,  962,  948,    0,  926,  926,  928,  947,    0,  928,

      962,  962,  962,    0,  928,  928,  928,  950,  950,  928,
      950,  928,    0,  950,    0,  950,    0,  928,    0,  928,
      928,  928,    0,  954,  954,  956,  956,  954,  956,  950,
        0,  956,    0,  956,    0,  954,    0,  954,    0,  957,
        0,    0,    0,    0,    0,    0,  957,  956,  928,  928,
      949,    0,    0,  949,    0,  957,  957,    0,  949,  949,
      949,  957,  958,  949,  977,  949,  954,  954,    0,  958,
        0,  949,  978,  949,  949,  949,  959,    0,  958,  958,
      977,  977,  981,  959,  960,  977,    0,  958,  978,  978,
        0,  960,  959,  959,  978,    0,    0,  959,  981,  981,

      960,  960,  949,  949,  951,  960,    0,  951,  981,    0,
        0,    0,  951,  951,  951,  961,    0,  951,    0,  951,
        0,    0,  961,    0,    0,  951,    0,  951,  951,  951,
      963,  961,  961,  964,  964,  961,  964,  963,    0,  964,
        0,  964,  965,  965,  965,  965,  963,  963,  965,    0,
      966,  966,    0,    0,  966,  964,  951,  951,  953,    0,
        0,  953,  966,    0,  966,  963,  953,  953,  953,  968,
      968,  953,  968,    0,    0,  968,    0,  968,    0,  953,
        0,  953,  953,  953,  969,  969,  979,  969,  982,    0,
      969,  968,  969,  966,  966,  970,  970,  970,  970,    0,

      989,  970,  979,  979,  982,  982,  969,  983,  979,    0,
      953,  953,  955,    0,  984,  955,  989,  989,    0,    0,
      955,  955,  955,  983,  983,  955,  982,  955,  986,  983,
      984,  984,  988,  955,  984,  955,  955,  955,    0,    0,
      985,    0,    0,  990,  986,  986,    0,    0,  988,  988,
      986,  991,    0,    0,  992,    0,  985,  985,    0,  990,
      990,    0,    0,  988,  955,  955,  967,  991,  991,  967,
      992,  992,    0,  991,  967,  967,  967,  985,  993,  967,
      990,  994,    0,    0,  995,  992,  996,  967,  997,  967,
      967,  967,  999,    0,  993,  993,  998,  994,  994, 1000,

      995,  995,  996,  996,  997,  997,    0, 1001,  999,  999,
      997, 1002,  998,  998, 1003, 1000, 1000,    0,  967,  967,
      995, 1004,  998, 1001, 1001, 1005,    0, 1002, 1002, 1006,
     1003, 1003, 1001, 1002,    0,    0, 1007, 1004, 1004, 1004,
     1008, 1005, 1005, 1009,    0, 1006, 1006, 1010,    0, 1011,
        0, 1003, 1007, 1007,    0,    0, 1008, 1008, 1012, 1009,
     1009, 1013, 1008, 1010, 1010, 1011, 1011, 1014,    0, 1015,
        0, 1011,    0, 1016, 1012, 1012, 1018, 1013, 1013,    0,
     1017,    0,    0, 1014, 1014, 1015, 1015, 1019,    0, 1016,
     1016,    0, 1018, 1018,    0, 1012, 1017, 1017, 1013,    0,

     1032,    0, 1017, 1019, 1019,    0,    0, 1032,    0, 1014,
     1016, 1018, 1020, 1020,    0, 1020, 1032, 1032, 1020,    0,
     1020, 1021, 1021, 1021, 1021, 1022, 1022, 1021, 1029, 1022,
     1024, 1024,    0, 1024, 1020, 1029, 1024, 1022, 1024, 1022,
     1025, 1025,    0, 1025, 1029, 1029, 1025,    0, 1025,    0,
        0,    0, 1024, 1026, 1026, 1026, 1026, 1027,    0, 1026,
     1028,    0, 1025, 1030, 1027, 1031, 1029, 1028, 1022, 1022,
     1030,    0, 1031, 1027, 1027, 1027, 1028, 1028, 1028, 1030,
     1030, 1031, 1031, 1033,    0,    0, 1034,    0, 1035,    0,
     1033, 1031,    0, 1034,    0, 1035,    0,    0,    0, 1033,

     1033, 1030, 1034, 1034, 1035, 1035, 1036,    0, 1037,    0,
     1038,    0, 1039, 1036,    0, 1037, 1035, 1038,    0, 1039,
        0,    0, 1036, 1036, 1037, 1037, 1038, 1038, 1039, 1039,
     1040,    0, 1041,    0, 1039,    0, 1038, 1040,    0, 1041,
        0,    0,    0, 1036, 1042, 1037, 1040, 1040, 1041, 1041,
     1043, 1042, 1040,    0,    0, 1044,    0, 1043, 1045,    0,
     1042, 1042, 1044,    0,    0, 1045, 1043, 1043,    0, 1041,
     1046, 1044, 1044,    0, 1045, 1045, 1047, 1046, 1043,    0,
     1045,    0, 1048, 1047, 1049,    0, 1046, 1046,    0, 1048,
     1044, 1049, 1047, 1047,    0, 1050,    0, 1051, 1048, 1048,

     1049, 1049, 1050,    0, 1051, 1047, 1048, 1046,    0,    0,
        0, 1050, 1050, 1051, 1051, 1052, 1052,    0, 1052,    0,
     1049, 1052,    0, 1052, 1053, 1053, 1053, 1053,    0, 1051,
     1053,    0, 1050,    0, 1054, 1054,    0, 1052, 1054, 1056,
     1056,    0, 1056, 1095,    0, 1056, 1054, 1056, 1054, 1057,
     1057,    0, 1057,    0,    0, 1057,    0, 1057,    0, 1095,
     1095, 1056, 1058, 1058, 1058, 1058, 1059, 1059, 1058, 1059,
        0, 1057, 1059,    0, 1059,    0,    0, 1054, 1054, 1060,
     1060, 1060, 1060, 1061, 1061, 1060,    0, 1061, 1059,    0,
     1063, 1063,    0, 1063,    0, 1061, 1063, 1061, 1063, 1064,

     1064,    0, 1064, 1096,    0, 1064, 1066, 1064, 1065, 1065,
     1065, 1065, 1063, 1066, 1065,    0,    0,    0, 1067, 1096,
     1096, 1064, 1066, 1066, 1066, 1067, 1061, 1061,    0,    0,
     1068,    0, 1069,    0, 1067, 1067, 1067, 1068, 1070, 1069,
     1096, 1098,    0, 1071,    0, 1070, 1068, 1068, 1069, 1069,
     1071,    0,    0,    0, 1070, 1070, 1072, 1098, 1098, 1071,
     1071,    0,    0, 1072,    0,    0,    0, 1073, 1068, 1074,
     1069,    0, 1072, 1072, 1073, 1070, 1074,    0, 1072,    0,
     1071, 1075,    0, 1073, 1073, 1074, 1074, 1076, 1075, 1073,
     1080, 1080, 1080, 1080, 1076, 1077, 1080, 1075, 1075,    0,

        0, 1078, 1077, 1076, 1076,    0, 1074,    0, 1078, 1076,
        0, 1077, 1077,    0,    0,    0, 1075, 1078, 1078, 1097,
     1079, 1079,    0, 1079, 1077, 1078, 1079,    0, 1079, 1081,
     1081, 1083, 1083, 1081, 1083, 1097, 1097, 1083,    0, 1083,
        0, 1081, 1079, 1081, 1084, 1084,    0, 1084,    0,    0,
     1084, 1086, 1084, 1083, 1085, 1085, 1085, 1085, 1086, 1097,
     1085,    0, 1087,    0, 1088,    0, 1084, 1086, 1086, 1087,
        0, 1088, 1081, 1081,    0, 1089,    0, 1090, 1087, 1087,
     1088, 1088, 1089,    0, 1090,    0,    0, 1086, 1087, 1091,
     1088, 1089, 1089, 1090, 1090,    0, 1091, 1093, 1093, 1093,

     1093, 1092, 1092, 1093, 1092, 1091, 1091, 1092, 1094, 1092,
        0, 1099, 1089, 1090, 1100,    0, 1101,    0,    0, 1102,
        0, 1103,    0, 1092, 1094, 1094, 1091, 1099, 1099,    0,
     1100, 1100, 1101, 1101, 1094, 1102, 1102, 1103, 1103, 1104,
        0, 1105,    0, 1103, 1106, 1100, 1099, 1107,    0,    0,
     1094, 1102, 1108,    0, 1109, 1104, 1104, 1105, 1105,    0,
     1106, 1106,    0, 1107, 1107, 1110, 1106, 1111, 1108, 1108,
     1109, 1109,    0, 1112, 1108, 1113, 1109, 1114, 1105, 1115,
        0, 1110, 1110, 1111, 1111,    0, 1116,    0, 1111, 1112,
     1112, 1113, 1113, 1114, 1114, 1115, 1115, 1117,    0, 1118,

        0, 1115, 1116, 1116,    0, 1119,    0, 1120,    0, 1121,
        0,    0,    0, 1117, 1117, 1118, 1118, 1122,    0, 1123,
     1114, 1119, 1119, 1120, 1120, 1121, 1121, 1124, 1118, 1125,
        0, 1121, 1126, 1122, 1122, 1123, 1123,    0,    0,    0,
        0,    0,    0, 1124, 1124, 1125, 1125,    0, 1126, 1126,
     1127, 1127,    0, 1127,    0, 1122, 1127,    0, 1127, 1128,
     1128, 1128, 1128, 1124, 1126, 1128, 1129,    0, 1130,    0,
        0, 1131, 1127, 1129, 1132, 1130,    0,    0, 1131, 1133,
        0, 1132, 1129, 1129, 1130, 1130, 1133, 1131, 1131,    0,
     1132, 1132, 1134,    0, 1132, 1133, 1133, 1135,    0, 1134,

     1136,    0,    0, 1129, 1135, 1130, 1131, 1136, 1134, 1134,
     1133,    0, 1174, 1135, 1135, 1137, 1136, 1136, 1138, 1135,
     1139,    0, 1137,    0,    0, 1138,    0, 1139, 1174, 1174,
        0, 1137, 1137, 1140, 1138, 1138, 1139, 1139, 1141, 1138,
     1140, 1142, 1136, 1174,    0, 1141, 1137,    0, 1142, 1140,
     1140, 1140, 1143,    0, 1141, 1141, 1144, 1142, 1142, 1143,
     1145,    0,    0, 1144, 1146,    0,    0, 1145, 1143, 1143,
        0, 1146, 1144, 1144, 1142,    0, 1145, 1145, 1147,    0,
     1146, 1146, 1144, 1143, 1148, 1147, 1149,    0,    0,    0,
        0, 1148, 1160, 1149, 1147, 1147,    0,    0,    0, 1160,

     1148, 1148, 1149, 1149, 1150, 1150, 1146, 1150, 1160, 1160,
     1150,    0, 1150, 1160, 1147,    0,    0,    0, 1149,    0,
     1148, 1151, 1151, 1151, 1151, 1154, 1150, 1151, 1152, 1152,
        0, 1152, 1154,    0, 1152,    0, 1152, 1153, 1153, 1153,
     1153, 1154, 1154, 1153, 1155,    0,    0, 1156,    0, 1157,
     1152, 1155,    0,    0, 1156, 1175, 1157,    0,    0, 1178,
     1155, 1155, 1154, 1156, 1156, 1157, 1157, 1158,    0, 1157,
     1159, 1175, 1175,    0, 1158, 1178, 1178, 1159, 1161,    0,
        0, 1155, 1156, 1158, 1158, 1161, 1159, 1159,    0, 1158,
     1162,    0,    0, 1163, 1161, 1161, 1161, 1162, 1164,    0,

     1163, 1167,    0,    0,    0, 1164, 1162, 1162, 1167, 1163,
     1163,    0, 1159,    0, 1164, 1164,    0, 1167, 1167, 1165,
     1165,    0, 1165, 1162, 1163, 1165, 1168, 1165, 1166, 1166,
     1166, 1166, 1167, 1168, 1166,    0,    0, 1169,    0, 1170,
     1164, 1165, 1168, 1168, 1169, 1171, 1170,    0, 1172,    0,
     1173,    0, 1171, 1169, 1169, 1170, 1170, 1168,    0,    0,
     1176, 1171, 1171, 1169, 1172, 1172, 1173, 1173, 1177,    0,
     1172, 1179, 1173, 1180,    0, 1170, 1176, 1176,    0, 1181,
        0, 1171,    0,    0, 1177, 1177, 1182, 1179, 1179, 1180,
     1180, 1183,    0,    0, 1184, 1181, 1181, 1176, 1185, 1177,

     1181, 1186, 1182, 1182, 1187,    0, 1188, 1183, 1183, 1183,
     1184, 1184, 1189,    0, 1185, 1185, 1184, 1186, 1186, 1190,
     1187, 1187, 1188, 1188, 1191,    0,    0,    0, 1189, 1189,
     1192, 1191, 1194,    0, 1185, 1190, 1190, 1192, 1199, 1194,
     1191, 1191,    0, 1188, 1193, 1199, 1192, 1192, 1194, 1194,
     1191, 1193,    0,    0, 1199, 1199, 1192, 1195,    0, 1190,
     1193, 1193, 1193, 1196, 1195,    0,    0,    0, 1197, 1194,
     1196,    0,    0, 1195, 1195, 1197, 1198,    0, 1197, 1196,
     1196, 1195, 1200, 1198, 1197, 1197, 1220,    0, 1201, 1200,
     1202,    0, 1198, 1198, 1196, 1201,    0, 1202, 1200, 1200,

     1198, 1203, 1220, 1220, 1201, 1201, 1202, 1202, 1203, 1204,
     1202,    0, 1205, 1201, 1206,    0, 1204, 1203, 1203, 1205,
     1207, 1206, 1220,    0,    0, 1204, 1204, 1207, 1205, 1205,
     1206, 1206, 1203, 1208, 1205, 1209, 1207, 1207, 1210,    0,
     1208,    0, 1209,    0,    0, 1210, 1211,    0, 1207, 1208,
     1208, 1209, 1209, 1211, 1210, 1210, 1210, 1212,    0, 1208,
     1213, 1209, 1211, 1211, 1212, 1214,    0, 1213,    0,    0,
     1213,    0, 1214, 1212, 1212,    0, 1213, 1213, 1215,    0,
     1216, 1214, 1214, 1211, 1217, 1215, 1218, 1216, 1212,    0,
     1214, 1217,    0, 1218, 1215, 1215, 1216, 1216, 1215, 1219,

     1217, 1217, 1218, 1218, 1216,    0, 1219, 1221, 1217, 1222,
        0, 1223,    0, 1224,    0, 1219, 1219, 1218, 1225,    0,
     1226, 1219, 1227, 1221, 1221, 1222, 1222, 1223, 1223, 1224,
     1224,    0, 1228,    0, 1225, 1225, 1226, 1226, 1227, 1227,
     1229,    0, 1230,    0,    0, 1231,    0, 1223, 1228, 1228,
        0, 1226, 1231, 1232, 1228,    0, 1229, 1229, 1230, 1230,
     1232, 1231, 1231,    0, 1233,    0, 1229,    0,    0, 1232,
     1232, 1233, 1234,    0,    0,    0,    0,    0, 1235, 1234,
     1233, 1233,    0, 1236, 1231, 1235, 1237,    0, 1234, 1234,
     1236,    0, 1232, 1237, 1235, 1235,    0,    0,    0, 1236,

     1236, 1233, 1237, 1237, 1234, 1238,    0, 1239, 1237, 1236,
     1240,    0, 1238,    0, 1239, 1235,    0, 1240, 1241,    0,
        0, 1238, 1238, 1239, 1239, 1241, 1240, 1240,    0, 1238,
     1242,    0,    0, 1243, 1241, 1241, 1252, 1242, 1245,    0,
     1243,    0, 1250, 1239, 1244, 1245, 1242, 1242,    0, 1243,
     1243, 1244, 1252, 1252, 1245, 1245, 1246, 1241, 1250, 1250,
     1244, 1244,    0, 1246, 1247,    0,    0, 1248, 1252, 1242,
     1243, 1247, 1246, 1246, 1248, 1245, 1244,    0, 1249, 1250,
     1247, 1247, 1246, 1248, 1248, 1249, 1247, 1251,    0, 1253,
        0, 1248,    0, 1254, 1249, 1249, 1253,    0,    0,    0,

     1254, 1255,    0, 1251, 1251, 1253, 1253,    0, 1255, 1254,
     1254, 1253, 1256,    0, 1249, 1254,    0, 1255, 1255, 1256,
        0,    0,    0, 1251, 1257,    0, 1258, 1255, 1256, 1256,
        0, 1257, 1259, 1258, 1266,    0,    0, 1260,    0, 1259,
     1257, 1257, 1258, 1258, 1260, 1261, 1258, 1256, 1259, 1259,
     1266, 1266, 1261, 1260, 1260,    0, 1262,    0, 1263,    0,
        0, 1261, 1261, 1262, 1264, 1263, 1267, 1261,    0, 1265,
        0, 1264, 1262, 1262, 1263, 1263, 1265,    0, 1262,    0,
     1264, 1264, 1267, 1267, 1263, 1265, 1265, 1268,    0, 1265,
        0, 1269,    0, 1270, 1268, 1271,    0, 1267, 1269, 1264,

     1270, 1273, 1271, 1268, 1268,    0, 1272, 1269, 1269, 1270,
     1270, 1271, 1271, 1272, 1274,    0,    0, 1273, 1273, 1275,
        0, 1274, 1272, 1272,    0, 1270, 1275, 1276,    0,    0,
     1274, 1274,    0,    0, 1276, 1275, 1275,    0, 1272,    0,
        0,    0,    0, 1276, 1276, 1274,    0,    0,    0,    0,
     1275, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1282, 1282, 1282, 1282, 1282,

     1282, 1282, 1282, 1282, 1282, 1282, 1283, 1283,    0,    0,
     1283, 1283, 1283, 1284,    0, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1285, 1285,    0,    0, 1285, 1285, 1285,
     1286,    0, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
     1287, 1287,    0,    0, 1287, 1287, 1287, 1288,    0, 1288,
     1288, 1288, 1288, 1288, 1288, 1288, 1288, 1289, 1289,    0,
        0, 1289, 1289, 1289, 1290,    0, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1291, 1291,    0,    0, 1291, 1291,
     1291, 1292,    0, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1293,    0,    0,    0, 1293,    0, 1293, 1293,    0,

     1293, 1293, 1294,    0,    0, 1294, 1294,    0, 1294, 1294,
     1294, 1294, 1294, 1295, 1295,    0, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1295, 1296,    0, 1296, 1296,    0,    0,
     1296,    0, 1296, 1297, 1297, 1297, 1297, 1297,    0, 1297,
     1298, 1298, 1298, 1298, 1298,    0, 1298, 1299, 1299, 1299,
     1299, 1299,    0, 1299, 1300, 1300, 1300, 1300, 1300,    0,
     1300, 1301, 1301, 1301, 1301, 1301,    0, 1301, 1302,    0,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1303,    0,
        0,    0, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1304,
        0, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1305,

        0,    0,    0, 1305, 1305, 1305, 1305, 1305, 1305, 1305,
     1306,    0, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1307,    0,    0,    0, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1308,    0,    0,    0, 1308, 1308, 1308, 1308, 1308,
     1308, 1308, 1309,    0, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1310,    0,    0,    0, 1310, 1310, 1310, 1310,
     1310, 1310, 1310, 1311,    0, 1311, 1311, 1311, 1311, 1311,
     1311, 1311, 1311, 1312,    0,    0,    0, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1313, 1313,    0, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1314,    0,    0,    0, 1314,

     1314, 1314, 1314, 1314, 1314, 1314, 1315,    0,    0,    0,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1316, 1316,    0,
     1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1317,    0,
        0,    0, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1318,
        0,    0,    0, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
     1319, 1319,    0, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1320,    0,    0,    0, 1320, 1320, 1320, 1320, 1320,
     1320, 1320, 1321,    0,    0,    0, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1322,    0,    0,    0, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1323, 1323,    0, 1323, 1323, 1323,

     1323, 1323, 1323, 1323, 1323, 1324,    0,    0,    0, 1324,
     1324, 1324, 1324, 1324, 1324, 1324, 1325,    0,    0,    0,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1326, 1326,    0,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1327,    0,
        0,    0, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1328,
        0,    0,    0, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1329, 1329,    0, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1330,    0,    0,    0, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1331, 1331,    0, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1332, 1332,    0, 1332, 1332, 1332, 1332,

     1332, 1332, 1332, 1332, 1333,    0,    0,    0, 1333, 1333,
     1333, 1333, 1333, 1333, 1333, 1334,    0,    0,    0, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1335, 1335,    0, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1336, 1336,    0,
        0, 1336, 1336, 1336, 1337, 1337,    0, 1337, 1337, 1337,
     1337, 1337, 1337, 1337, 1337, 1338,    0,    0,    0, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1339,    0,    0,    0,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1340, 1340,    0,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1341, 1341,
        0, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1342,

        0,    0,    0, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1343, 1343,    0, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1344,    0,    0,    0, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1345,    0,    0,    0, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1346, 1346,    0, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1347, 1347,    0,    0, 1347, 1347,
     1347, 1348, 1348,    0, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1349,    0,    0,    0, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1350, 1350,    0, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1351,    0,    0,    0, 1351, 1351,

     1351, 1351, 1351, 1351, 1351, 1352,    0,    0,    0, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1353, 1353,    0, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1354, 1354,    0,
        0, 1354, 1354, 1354, 1355, 1355,    0, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1356,    0,    0,    0, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1357,    0,    0,    0,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1358, 1358,    0,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1359, 1359,
        0, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1360,
     1360,    0,    0, 1360, 1360, 1360, 1361, 1361,    0, 1361,

     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1362, 1362,    0,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1363, 1363,
        0, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1364,
     1364,    0, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2010 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "strategyLanguage.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
//#include "preModule.hh"
#include "lexerAux.hh"
#include "global.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

void getInput(char* buf, yy_size_t& result, yy_size_t max_size);
//
//	result might be an int or a yy_size_t depending on flex version, so we use a temporary.
//
#define YY_INPUT(buf, result, max_size) \
  { yy_size_t safeResult; getInput(buf, safeResult, max_size); result = safeResult; }

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define RETURN_FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

#define SAVE(token) \
  { savedToken.tokenize(yytext, lineNumber); savedReturn = token; }

#define SAVE_FIX_UP(token) \
  { savedToken.fixUp(yytext, lineNumber); savedReturn = token; }

#define RETURN_SAVED(token) \
  { lvalp->yyToken = savedToken; return (token); }

#define STORE \
  { Token t; t.tokenize(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored " << t);*/ }
#define STORE_FIX_UP \
  { Token t; t.fixUp(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored fixUp " << t);*/ }

#define EXIT(token) \
  { yy_pop_state(); RETURN(token) }

Token savedToken;
int savedReturn;
int braceCount;
int parenCount;
int terminationSet;
string accumulator;
string fileName;

//int terminationCondition;
int minLength;
extern Vector<Token> lexerBubble;










#line 2898 "<stdout>"

#define INITIAL 0
#define ID_MODE 1
#define CMD_MODE 2
#define SEEN_DOT 3
#define BUBBLE_MODE 4
#define END_STATEMENT_MODE 5
#define END_COMMAND_MODE 6
#define FILE_NAME_MODE 7
#define FILE_NAME_QUOTE_MODE 8
#define STRING_MODE 9
#define LATEX_MODE 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 119 "../../../src/Mixfix/lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();

#line 3110 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1278 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8541 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 123 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 127 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 133 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 134 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 138 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 142 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 143 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VIEW);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_SREDUCE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_SREWRITE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_XG_NARROW;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_GET;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_VARIANTS;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_VARIANT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_BODY;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_BUILTIN;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
return KW_ATTRIBUTE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 193 "../../../src/Mixfix/lexer.ll"
return KW_NEWLINE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 194 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 195 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 196 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 197 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 198 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 199 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 200 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 201 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 202 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 203 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 204 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 205 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 206 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 207 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 208 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 209 "../../../src/Mixfix/lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 210 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 211 "../../../src/Mixfix/lexer.ll"
return KW_OPS2;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 212 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 213 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 214 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 215 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 216 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 217 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 218 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 219 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 220 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 221 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 222 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 223 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 224 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 225 "../../../src/Mixfix/lexer.ll"
return KW_IRREDUNDANT;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 226 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 227 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 228 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 229 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 230 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 231 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 232 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 233 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 234 "../../../src/Mixfix/lexer.ll"
return KW_LABEL;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 235 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 236 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 237 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 238 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 239 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 244 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 258 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 262 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 263 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 264 "../../../src/Mixfix/lexer.ll"
RETURN(IDENTIFIER)
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 265 "../../../src/Mixfix/lexer.ll"
{
					  SAVE_FIX_UP(ENDS_IN_DOT)
					  BEGIN(SEEN_DOT);
					}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 269 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK


case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 273 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 278 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(IDENTIFIER)
					}
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 113:
YY_RULE_SETUP
#line 290 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 291 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 292 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 293 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 294 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 295 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 296 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 297 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 298 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 299 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 300 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 301 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 302 "../../../src/Mixfix/lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 303 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 304 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 305 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 306 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 307 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 308 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 309 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 310 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 311 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 312 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 313 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 314 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 315 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 316 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 317 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 318 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 319 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 320 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 321 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 322 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 323 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 324 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 325 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 326 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 327 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 328 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 329 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 330 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 331 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 332 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 333 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 334 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 335 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 336 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 337 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 338 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 339 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 340 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 341 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Bubble mode squirrels tokens away in lexerBubble until some termination criteria is met.
  */

case 165:
YY_RULE_SETUP
#line 348 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COLON) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 354 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COMMA) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 360 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_LEFT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 366 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_RIGHT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 372 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_EQUALS) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 378 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_ARROW2) && lexerBubble.length() >= minLength)
					    EXIT(KW_ARROW2)
					  else
					    STORE
					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 384 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_TO) && lexerBubble.length() >= minLength)
					    EXIT(KW_TO)
					  else
					    STORE
					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 390 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_IF) && lexerBubble.length() >= minLength)
					    EXIT(KW_IF)
					  else
					    STORE
					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 396 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_OP_ATTRIBUTE) && lexerBubble.length() >= minLength)
					    {
					      yyless(0);  // need to re-lex it to get the correct return value
					      yy_pop_state();
					    }
					  else
					    STORE
					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 405 "../../../src/Mixfix/lexer.ll"
{
					  ++parenCount;
					  STORE
					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 409 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0)
					    {
					      if ((terminationSet & BAR_RIGHT_PAREN) && lexerBubble.length() >= minLength)
					        EXIT(*yytext)
					      IssueWarning(LineNumber(lineNumber) << ": mismatched parentheses.");
					    }
					  else
					    --parenCount;
					  STORE
					}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 420 "../../../src/Mixfix/lexer.ll"
STORE
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 421 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() >= minLength &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE(*yytext)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE
					}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 432 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() + 1 >= minLength  &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE_FIX_UP(ENDS_IN_DOT)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE_FIX_UP
					}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 443 "../../../src/Mixfix/lexer.ll"
STORE_FIX_UP
	YY_BREAK

/*
  *	We have saved something that looks like a statement terminating period. We now lex the next
  *	token to see if it ends a module or starts a new statement, and if so push the lexed token back
  *	on to the input stream to be re-lexed in a new mode.
  */

case 180:
YY_RULE_SETUP
#line 452 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // BUG - need to deal with white space and comments after the .
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 460 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 182:
YY_RULE_SETUP
#line 468 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE(*yytext);
					}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 472 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE_FIX_UP(ENDS_IN_DOT)
					}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 476 "../../../src/Mixfix/lexer.ll"
{
	     				  //
					  //	We need {maudeId} here so that an identifier such
					  //	as .foo doesn't get split by the first rule.
					  //
					  lexerBubble.append(savedToken);
					  yyless(0);
					  BEGIN(BUBBLE_MODE);
					}
	YY_BREAK


case 185:
YY_RULE_SETUP
#line 488 "../../../src/Mixfix/lexer.ll"
{
					  if (accumulator.empty())
					    BEGIN(FILE_NAME_QUOTE_MODE);
					  else
					    accumulator += '"';
					}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 494 "../../../src/Mixfix/lexer.ll"
accumulator += ' ';
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 495 "../../../src/Mixfix/lexer.ll"
accumulator += '"';
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 496 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 497 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 498 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 499 "../../../src/Mixfix/lexer.ll"
{
					  if (!accumulator.empty())
					    {
					      yy_pop_state();
					      lvalp->yyString = accumulator.c_str();
					      eatComment(false);
					      return FILE_NAME_STRING;
					    }
					}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 508 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 193:
YY_RULE_SETUP
#line 517 "../../../src/Mixfix/lexer.ll"
{
					   yy_pop_state();
					   lvalp->yyString = accumulator.c_str();
					   eatComment(false);
					   return FILE_NAME_STRING;
					}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 523 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 524 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 196:
YY_RULE_SETUP
#line 533 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 538 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 198:
YY_RULE_SETUP
#line 547 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 548 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 553 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = accumulator.c_str();
						  return LATEX_STRING;
						}
					    }
					  accumulator += yytext;
					}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 567 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 571 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 575 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  accumulator += yytext;
					}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 579 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(SEEN_DOT):
case YY_STATE_EOF(BUBBLE_MODE):
case YY_STATE_EOF(END_STATEMENT_MODE):
case YY_STATE_EOF(END_COMMAND_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(FILE_NAME_QUOTE_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 582 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 588 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 589 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 590 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 595 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK
#line 4511 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1278 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1278 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1277);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 595 "../../../src/Mixfix/lexer.ll"



#include "lexerAux.cc"

