2003-05-30  Steven Eker  <eker@goo.csl.sri.com>

	* S_Symbol.hh (class S_Symbol): added decl for finalizeSortInfo()

	* S_Symbol.cc (finalizeSortInfo): added

2003-05-01  Steven Eker  <eker@goo.csl.sri.com>

	* S_LhsAutomaton.cc (match): call setValidAfterMatch()
	(extMatchGt): call setValidAfterMatch() before each return true

	* S_DagNode.cc (overwriteWithClone): use copySetRewritingFlags()
	(makeClone): copySetRewritingFlags()
	
===================================Maude80===========================================

2003-02-26  Steven Eker  <eker@goo.csl.sri.com>

	* S_Subproblem.cc (S_Subproblem): pass varSort as const Sort*

	* S_Subproblem.hh (class S_Subproblem): made varSort const Sort*
	const; updated decl for ctor

	* S_DagNode.cc (matchVariableWithExtension): implemented

2003-02-25  Steven Eker  <eker@goo.csl.sri.com>

	* S_LhsAutomaton.cc (match): updated Assert()

	* S_Term.cc: removed #pragma
	(S_Term): updated Assert()
	(normalize): updated Assert()s
	(insertAbstractionVariables): DebugAdvisoryCheck() ->
	DebugAdvisory()

	* S_Term.hh: removed #pragma

	* S_Symbol.cc: removed #pragma
	(makeTerm): updated Assert()s
	(makeDagNode): updated Assert()s
	(eqRewrite): updated Assert()
	(computeBaseSort): updated Assert()
	(normalizeAndComputeTrueSort): updated Assert()

	* S_Symbol.hh: removed #pragma

	* S_Subproblem.cc: removed #pragma
	(S_Subproblem): updated Assert()s
	(solve): updated Assert()

	* S_Subproblem.hh: removed #pragma

	* S_RhsAutomaton.cc: removed #pragma

	* S_RhsAutomaton.hh: removed #pragma

	* S_LhsAutomaton.cc: removed #pragma

	* S_LhsAutomaton.hh: removed #pragma

	* S_ExtensionInfo.cc: removed #pragma

	* S_ExtensionInfo.hh: removed #pragma

	* S_DagNode.cc: removed #pragma
	(copyWithReplacement): updated Assert() (both versions)
	(matchVariableWithExtension): Assert() -> CantHappen()

	* S_DagNode.hh: removed #pragma

	* S_DagArgumentIterator.cc: removed #pragma
	(argument): updated Assert()
	(next): updated Assert()

	* S_DagArgumentIterator.hh: removed #pragma

	* S_ArgumentIterator.cc: removed #pragma
	(argument): updated Assert()
	(next): updated Assert()

	* S_ArgumentIterator.hh: removed #pragma
	
===================================Maude79===========================================

2002-11-25  Steven Eker  <eker@goo.csl.sri.com>

	* S_Subproblem.cc (S_Subproblem): switched initializer order to
	placate g++3.2

2002-10-04  Steven Eker  <eker@goo.csl.sri.com>

	* S_DagNode.hh (class S_DagNode): updated decl for complex version
	of copyWithReplacement()

	* S_DagNode.cc (copyWithReplacement): complex version: handle new
	calling convention

	* S_Symbol.cc (stackArguments): only stack arg if it is not frozen
	or unstackable

2002-10-03  Steven Eker  <eker@goo.csl.sri.com>

	* S_DagNode.hh (class S_DagNode): updated stackArguments() decl

	* S_DagNode.cc (stackArguments): handle respectFrozen flag
	
===================================Maude76==================================================

2002-08-02  Steven Eker  <eker@goo.csl.sri.com>

	* S_Term.cc (compileRhs2): added code the flag the last use of
	source
	
===================================Maude74==================================================

2002-05-15  Steven Eker  <eker@goo.csl.sri.com>

	* S_LhsAutomaton.cc (addSubpattern): term -> groundTerm to avoid
	be shadowed by argument of the same name
	(matchEq): term -> groundTerm
	(extMatchGt): term -> groundTerm
	(dump): term -> groundTerm

	* S_LhsAutomaton.hh (class S_LhsAutomaton): data member term ->
	groundTerm to avoid nasty shadowing bug

2002-05-09  Steven Eker  <eker@goo.csl.sri.com>

	* S_Symbol.hh (class S_Symbol): provide defaults for strategy and
	memoFlag in decl for S_Symbol()

2002-05-08  Steven Eker  <eker@goo.csl.sri.com>

	* S_DagNode.hh (class S_DagNode): class S_Subproblem is no longer
	a friend

	* S_Subproblem.hh (class S_Subproblem): extension-> extensionInfo

	* S_Subproblem.cc (dump): implemented
	(solve): cleaned up loop

	* S_LhsAutomaton.cc (extMatchGt): use new S_Subproblem() semantics

	* S_Subproblem.cc (S_Subproblem): init leftOver; added Assert() to
	make sure leftOver > 0
	(solve): use leftOver rather than used

	* S_Subproblem.hh (class S_Subproblem): data member used replaced
	by leftOver

	* S_LhsAutomaton.cc (extMatchGt): use equal() rather than
	compare()
	(extMatchGt): fixed bug in bound VARIABLE with matching symbol
	case where we were passing the wrong value to setUnmatched()
	(extMatchGt): reorganized nested if in VARIABLE case

2002-05-07  Steven Eker  <eker@goo.csl.sri.com>

	* S_LhsAutomaton.cc (extMatchGt): handle bound variable case

	* S_LhsAutomaton.hh (class S_LhsAutomaton): can no longer have a
	union of automaton and sort since we need both in the
	ABSTRACTED_NON_GROUND_ALIEN case; union term & automaton instead

	* S_LhsAutomaton.cc (addSubpattern): fix bug by setting sort to
	error sort in the  ABSTRACTED_NON_GROUND_ALIEN case
	(dump): print sort in ABSTRACTED_NON_GROUND_ALIEN case

	* S_LhsAutomaton.hh (class S_LhsAutomaton): added decl for
	extMatchGt(); nonExtMatchEq() -> matchEq()

	* S_LhsAutomaton.cc (nonExtMatchGt): fixed another bug in bound
	variable case
	(nonExtMatchEq): renamed to matchEq() since we can also handle the
	extension case
	(match): simplified using extMatchGt()
	(extMatchGt): added

	* S_LhsAutomaton.hh (class S_LhsAutomaton): added decls for
	nonExtMatchEq() and nonExtMatchGt()

	* S_LhsAutomaton.cc (nonExtMatchEq): added; handle bound variable
	case correctly, fixing bug in original match code
	(nonExtMatchGt): added; handle bound variable case correctly,
	fixing bug in original match code
	(match): use nonExtMatchEq() and nonExtMatchGt()

	* S_Subproblem.cc (solve): compare() -> cmp()

	* S_LhsAutomaton.cc (match): compare() -> cmp(); cmp variable -> r

	* S_DagNode.cc (compareArguments): use cmp() for mpz_class

	* S_Term.cc (compareArguments): (both versions) use cmp() for
	mpz_class

2002-05-06  Steven Eker  <eker@goo.csl.sri.com>

	* S_Symbol.cc (normalizeAndComputeTrueSort): fixed bug where we
	were calling normalizeAtTop() before rather than after calling
	computeTrueSort() on our argument

2002-05-03  Steven Eker  <eker@goo.csl.sri.com>

	* S_LhsAutomaton.hh (class S_LhsAutomaton): matchAtTop becomes a
	bool

	* S_LhsAutomaton.cc (dump): can't print name of abstraction variable

	* S_Symbol.cc (computePath): fix bug that we introduced

	* S_RhsAutomaton.cc (dump): dump number

	* S_DagNode.cc (overwriteWithClone): don't bother copying theory
	byte
	(makeClone): don't bother copying theory byte

	* S_Term.hh (class S_Term): class S_ArgumentIterator is no
	longer a friend

	* S_Term.cc (dump): added

	* S_DagNode.hh (class S_DagNode): class S_ExtensionInfo is no
	longer a friend

	* S_ExtensionInfo.cc (buildMatchedPortion): use getNumber() and
	getArgument()

	* S_DagNode.hh (class S_DagNode): class S_Term is no longer a
	friend

	* S_Term.cc (compareArguments): (DagNode* version) use getNumber()
	and getArgument()

	* S_DagNode.hh (class S_DagNode): class S_LhsAutomaton is no
	longer a friend

	* S_LhsAutomaton.cc (match): use getNumber() and getArgument()

	* S_DagNode.hh (class S_DagNode): class S_RhsAutomaton is no
	longer a friend

	* S_Symbol.cc (stackArguments): use eagerArgument()

	* S_Symbol.hh (class S_Symbol): added decl for memoStrategy()

	* S_Symbol.cc (computePath): slicker version using map<> and single
	loop
	(computeBaseSort): fixed a bug where we were compaing number to 0
	rather than pathLength - introduced during mpz_class conversion
	(computeBaseSort): fixed bug in cycle case calculation
	(memoStrategy): added
	(eqRewrite): handle complex strategies

2002-05-02  Steven Eker  <eker@goo.csl.sri.com>

	* S_Subproblem.cc: BigNum -> mpz_class with operation modifications
	throughout

	* S_Subproblem.hh: BigNum -> mpz_class

	* S_RhsAutomaton.cc: BigNum -> mpz_class

	* S_RhsAutomaton.hh: BigNum -> mpz_class

	* S_LhsAutomaton.cc: BigNum -> mpz_class with operation modifications
	throughout

	* S_LhsAutomaton.hh: BigNum -> mpz_class

	* S_ExtensionInfo.cc: BigNum -> mpz_class with operation modifications
	throughout

	* S_ExtensionInfo.hh: BigNum -> mpz_class

	* S_DagNode.cc: BigNum -> mpz_class with operation modifications
	throughout

	* S_DagNode.hh: BigNum -> mpz_class

	* S_Term.cc: BigNum -> mpz_class with operation modifications
	throughout

	* S_Term.hh: BigNum -> mpz_class

	* S_Symbol.cc: BigNum -> mpz_class with operation modifications
	throughout

2002-04-30  Steven Eker  <eker@goo.csl.sri.com>

	* S_LhsAutomaton.cc (~S_LhsAutomaton): fixed memory leak where we
	weren't deleting automaton in the ABSTRACTED_NON_GROUND_ALIEN case

	* S_DagNode.cc (getHashValue): compute a hash value consistant
	with S_Term::normalize()

	* S_Term.cc (normalize): call setHashValue()

	* S_LhsAutomaton.cc (match): added extension
	ABSTRACTED_NON_GROUND_ALIEN case

	* S_Symbol.cc: deleted a huge amount of commented out code from
	1997 version

	* S_Symbol.hh (class S_Symbol): deleted decl for findPrevious()

	* S_Symbol.cc (computeBaseSort): fixed bug where we were using
	pathLength in place of path.leadLength

	* S_Symbol.hh (class S_Symbol): added decl for computePath()

	* S_Symbol.cc (computePath): added
	(compileOpDeclarations): use computePath
	(computeBaseSort): use sortPaths

	* S_Subproblem.cc (solve): fixed bug where we weren't comparing 
	t.compare(0) == 0
	
	* S_Symbol.cc (computeBaseSort): implemented

2002-04-29  Steven Eker  <eker@goo.csl.sri.com>

	* S_LhsAutomaton.cc (match): added extension VARIABLE case

	* S_Subproblem.hh: created

	* S_Subproblem.cc: created

	* S_LhsAutomaton.cc (match): handle extension  GROUND_ALIEN and
	NON_GROUND_ALIEN cases

2002-04-26  Steven Eker  <eker@goo.csl.sri.com>

	* S_LhsAutomaton.cc (match): implemented non-extension case

	* S_Term.cc (compileLhs2): pass abstractionVariableIndex to
	addSubpattern()

	* S_LhsAutomaton.hh (class S_LhsAutomaton): updated decl for
	addSubpattern(); added ABSTRACTED_NON_GROUND_ALIEN to enum
	PatternType; moved automaton to seperate anonymous union

	* S_LhsAutomaton.cc (dump): support ABSTRACTED_NON_GROUND_ALIENs
	(addSubpattern): handle ABSTRACTED_NON_GROUND_ALIENs

	* S_Symbol.hh (class S_Symbol): added decl for
	mightCollapseToOurSymbol()

	* S_Symbol.cc (mightCollapseToOurSymbol): crude first
	implementation

	* S_Term.cc (insertAbstractionVariables): added; we need this
	because out argument might collapse into our theory and end up
	matching part of our subject - in this case we need an abstraction
	variable and can no longer honour ground out matching since we may
	return a subproblem

	* S_Term.hh (class S_Term): added data member
	abstractionVariableIndex and decl for insertAbstractionVariables()

2002-04-25  Steven Eker  <eker@goo.csl.sri.com>

	* S_Term.cc (compileLhs2): use S_LhsAutomaton

	* S_LhsAutomaton.hh: created

	* S_LhsAutomaton.cc: created

	* S_Symbol.cc (ruleRewrite): use S_ExtensionInfo
	(eqRewrite): implemented
	(stackArguments): stack actual arg
	(normalizeAndComputeTrueSort): normalizeAtTop() before calling
	computeTrueSort() on arg

2002-04-24  Steven Eker  <eker@goo.csl.sri.com>

	* S_Term.cc (compileRhs2): implemented

	* S_RhsAutomaton.cc: created

	* S_RhsAutomaton.hh: created

	* S_Term.cc (S_Term): fixed arg vs argument bug

	* S_Symbol.cc (makeTerm): implemented stub
	(makeDagNode): implemented stub

	* S_Term.hh (class S_Term): deleted decls for analyseCollapses()
	and insertAbstractionVariables() - Term defaults are fine

	* S_Term.cc (deepCopy2): added
	(normalize): added
	(compareArguments): added 2 versions
	(S_Term): added SymbolMap version
	(findEagerVariables): added
	(markEagerArguments): added
	(dagify2): added
	(analyseConstraintPropagation): added
	(compileLhs2): added stub
	(findAvailableTerms): added
	(compileRhs2): added stub

	* S_Term.hh (class S_Term): added decl for SymbolMap copy ctor

2002-04-23  Steven Eker  <eker@goo.csl.sri.com>

	* S_Term.cc: created

	* S_ArgumentIterator.cc: created

	* S_ArgumentIterator.hh: created

	* S_DagNode.cc (matchVariableWithExtension): added stub

	* S_DagNode.hh (getNumber): added
	(getArgument): added

	* S_Term.hh: rewritten in accord with new theory interface

	* S_DagNode.hh (symbol): added

	* S_DagArgumentIterator.cc: created

	* S_DagArgumentIterator.hh: created

	* S_ExtensionInfo.cc: created

	* S_ExtensionInfo.hh: created

2002-04-22  Steven Eker  <eker@goo.csl.sri.com>

	* S_DagNode.cc (S_DagNode): now takes S_Symbol*
	(copyEagerUptoReduced2): added
	(clearCopyPointers2): added
	(overwriteWithClone): added
	(makeClone): added
	(normalizeAtTop): added
	(copyWithReplacement): added 2 versions
	(stackArguments): added
	(makeExtensionInfo): added
	(partialReplace): added
	(partialConstruct): added

	* S_DagNode.hh (class S_DagNode): added NO_COPYING(); tidied up
	comments; updated decl for S_DagNode

2002-04-19  Steven Eker  <eker@goo.csl.sri.com>

	* S_Symbol.cc: rewritten in accord with new theory interface

	* S_Theory.hh: created

	* S_Symbol.hh: rewritten in accord with new theory interface
	
===================================Maude72==================================================

2001-04-03  Steven Eker  <eker@goo.csl.sri.com>

	* S_DagNode.hh (class S_DagNode): rewritten

Thu Jun 19 11:53:48 1997  Steven Eker  <eker@lilac.csl.sri.com>

	* S_Symbol.hh (class S_Symbol): added struct SortPath and sortPathTable

Wed Jun 18 17:41:23 1997  Steven Eker  <eker@lilac.csl.sri.com>

	* S_Term.hh: created

	* S_Symbol.hh: created

	* S_DagNode.hh: created

